---
date-format: "DD-MMM-YYYY"
language: 
  title-block-published: "Update"

format: 
  html:
    embed-resources: TRUE 
    toc: true
    toc-title: Inhoud
    toc-depth: 2
    toc-location: left
    code-fold: false
    number-sections: true
    number-depth: 3
    theme:
    - lumen
    - my_theme.scss
    output-file: "yyyymmdd Performance_model_pfs"
    fig-width: 7
    column: page-right

engine: knitr
fig-format: png
fig-dpi: 100
editor: source

execute: 
  echo: false
  warning: false
---

```{r setup}

#![](logo.png){width=100%}
options(OutDec = ".") #geen comma's

#library(quantmod)
library(png)
#for charting
library(tibbletime) #rollify
library(slider) #rolling statistics
library(tidyquant) # xts, zoo, lubridate, performance_analytics, quantmod, TTR
library(tidyverse) # ggplot2, purrr, dplyr, tidyr, readr, tibble, stringr
library(lubridate) #datumfuncties
library(readxl) # xlsx inlezen
library(RColorBrewer) #kleuren
library(directlabels) #voor labels aan uiteinde van lijnen, geom_dl
library(ggrepel) #label repel
library(scales) #label_percent
library(broom) #tidy
library(scales) #pretty breaks
library(quarto)
library(gt) #tabellen
library(gtExtras) #tabellen
library(gridExtra) #meerdere grafieken op een pagina
library(paletteer)
library(rsconnect)
library(janitor)
library(ggcorrplot)

# Suppress summarise info dplyr
options(dplyr.summarise.inform = FALSE)
options(knitr.table.format = "html")
```

```{r is_op_kantoor_of_niet}

if(str_detect(getwd(), "research")) {
  pad_deel1 <- "/Users/research/Documents/R files/Performance/"
  library(Rblpapi) #Bloomberg API
  blpConnect()
} else if(str_detect(getwd(), "OneDrive")) {
  pad_deel1 <- "/Users/pieter/OneDrive/R Projects/Performance/"
} else {
  pad_deel1 <- ""
}

bij_bavd <- str_detect(pad_deel1, "research")
bij_pp <- str_detect(pad_deel1, "OneDrive")
bij_cloud <- (!bij_bavd & !bij_pp)

#dagelijkse nieuwe dingen alleen bij_bavd
new_daily <- bij_bavd

```

```{r handige_functies}

times_100_round2 <- function(x, na.rm = FALSE) (round(x*100, 2))

```

```{r colors}
#colors
#https://gist.github.com/lopspower/03fb1cc0ac9f32ef38f4
ba_color <- "#4E9080"
euroblue <- "#004494" #brewer.pal(n = 9, name = 'Blues')[8]
euroyellow <- "#ffd617"
usred <- "#bf0a30" ##brewer.pal(n = 9, name = 'Reds')[8]
chfred <- brewer.pal(9, "Reds")[6]
etforange <- brewer.pal(9, "Oranges")[5]
cashblue <- brewer.pal(9, "Blues")[5]
bondspurple <- brewer.pal(n = 9, "Purples")[7]
bmgray <-brewer.pal(n =9, name = 'Greys')[6]

RD30green <- brewer.pal(9, "Greens")[9]
RD50green <- brewer.pal(9, "Greens")[8]
VP50green <- brewer.pal(9, "Greens")[7]
VD50blue <- brewer.pal(9, "Blues")[6]
RD100green <- brewer.pal(9, "Greens")[5]
VP100green <- brewer.pal(9, "Greens")[4]

DZ50blue <- brewer.pal(9, "Blues")[8]
RD70green <- brewer.pal(9, "Greens")[6]

```

```{r factor_levels}
RDRM_levels <- c("RD", "RM")
asset_levels <- c("Aandelen", "Obligaties", "Cash")
type_levels <- c("USD Stock", "EUR Stock", "CHF Stock", "GBP Stock", "ETF", "Staatsobligatie",  "BM", "CASH")
sector_levels <- c("Energy", "Materials", "Industrials", "Consumer Discretionary", "Consumer Staples", "Health Care", 
                   "Financials", "Information Technology", "Communication Services", "Utilities", "Real Estate", 
                   "None", "Staatsobligaties", "Credits", "Cash")
sector_levels_RD <- sector_levels[1:11]
sector_levels_short <- c("EN", "MT", "IN", "CD", "CS", "HC", "FN", "IT", "TC", "UT", "RE", 
                         "None", "Staatsobligaties", "Credits", "Cash")
sector_levels_RD_short <- sector_levels_short[1:11]
sector_levels_RD_abbr <- c("Enrg", "Mtrl", "Inds", "CnsD", "CnsS", "HltC" , "Fnnc", "InfT" , "CmmS", "Utlt", "RlEs")

country_levels <- c("USA", "Canada", "UK", "France", "Germany", "Netherlands", "Italy", "Spain", "Belgium", "Ireland", "Finland", "Austria", "Portugal", "Denmark", "Switzerland", "Sweden", "Norway", "Israel", "Japan", "Australia", "Hong Kong", "Singapore", "New Zealand", "None")
region_levels <- c("Americas", "Europe & Middle East", "Pacific", "None")
currency_levels <- c("USD", "CAD", "AUD", "HKD", "SGD", "NZD", "EUR", "DKK", "GBP", "CHF", "SEK", "NOK", "ILS", "JPY")
currency_2_levels <- c("USD (related)", "EUR (related)", "GBP", "CHF", "JPY", "Other")

portfolio_levels <- c("RD50", "DZ50", "VP50", "VD50", "RD30", "RD70", "RD100", "VP100")
portfolio_levels_duurzaam <- c("DZ50", "VD50")
portfolio_levels_x_duurzaam <- portfolio_levels[which(!portfolio_levels %in% portfolio_levels_duurzaam)]
portfolio_levels_RDRM <- portfolio_levels[-which(portfolio_levels == c("RD100", "VP100"))]
portfolio_levels_vlieger <- c("VP50", "VD50", "VP100")
portfolio_levels_ETFs <- portfolio_levels[-which(portfolio_levels %in% portfolio_levels_vlieger)]

portfolio_levels_kolom <- portfolio_levels |> as_tibble() |> rename(portfolio = value)
#portfolio_pf_kolom <- portfolio_levels_kolom |> mutate(portfolio = portfolio_levels)

portfolio_AIRS_levels <- c("VOLK_50RD-50RM", "VOLK_Duurzaam-50RD-50RM", "VOLK_Vlieger 50RD-50RM", "VOLK_Vlieger_Duurzaam-50RD-50RM", 
                           "VOLK_30RD-70RM", "VOLK_70RD-30RM", "VOLK_100RD", "VOLK_Vlieger 100RD")
portfolio_AIRS_levels_duurzaam <- c("VOLK_Duurzaam-50RD-50RM", "VOLK_Vlieger_Duurzaam-50RD-50RM")

portfolio_colors <- c(RD50green, DZ50blue, VP50green, VD50blue, RD30green, RD70green, RD100green, VP100green)
portfolio_colors_duurzaam <- c(DZ50blue, VD50blue)
portfolio_colors_x_duurzaam <- portfolio_colors[which(!portfolio_levels %in% portfolio_levels_duurzaam)]

portfolio_colors_kolom <- portfolio_colors |> as_tibble() |> rename(color = value)
portfolios_colors <- portfolio_levels_kolom |> bind_cols(portfolio_colors_kolom)

benchmark_levels <- c("BM", "JPM", "MSDEWIN", "BM3070", "BM5050", "BM7030")

sector_benchmark_levels <- c("MXWO0EN", "MXWO0MT", "MXWO0IN", "MXWO0CD", "MXWO0CS", 
                             "MXWO0HC", "MXWO0FN", "MXWO0IT", "MXWO0TC", "MXWO0UT", "MXWO0RE")

sector_levels_RD_ticker_name <-
  sector_benchmark_levels |> as_tibble() |> rename(ticker = value) |>
  mutate(sector = sector_levels_RD)

sector_short_to_long_name <- function(sector_short_name) {sector_levels[which(sector_levels_short == sector_short_name)]}
sector_short_RD_to_long_name <- function(sector_short_name) {sector_levels_RD[which(sector_levels_RD_short == sector_short_name)]}
sector_long_to_short_name <- function(sector_long_name) {sector_levels_short[which(sector_levels == sector_long_name)]}

bms_colors <- benchmark_levels |> as_tibble() |> rename(portfolio = value) |> mutate(color = bmgray)
portfolios_bms_colors <- portfolios_colors |> bind_rows(bms_colors)

types_levels_colors <-
  type_levels |> as_tibble() |> rename(type = value) |>
    mutate(color = case_when(type == "USD Stock" ~ usred,
                                              type == "EUR Stock" ~ euroblue,
                                              type == "GBP Stock" ~ euroblue,
                                              type == "ETF" ~ etforange,
                                              type == "CHF Stock" ~ chfred,
                                              type == "Staatsobligatie" ~ bondspurple,
                                              type == "BM" ~ bmgray,
                                              TRUE ~ cashblue))

portfolios_bms_wgts_assets <-
  portfolio_levels_kolom |> 
  mutate(MSDEWIN = ifelse(portfolio %in% c("VP100", "RD100"), 100, str_sub(portfolio, 3, 4)),
         MSDEWIN = as.numeric(MSDEWIN)/100,
         JPM = 1 - MSDEWIN,
         Cash = 0) |>
  pivot_longer(cols = c(JPM, MSDEWIN, Cash), values_to = "bm_wgt", names_to = "bm") |>
  mutate(asset = case_when(bm == "MSDEWIN" ~ "Aandelen", 
                           bm == "JPM" ~ "Obligaties",
                           TRUE ~ "Cash")) |> 
  select(-bm)

```

```{r charts_custom_theme}
charts_custom_theme <-
  list(
    labs(x = "", y = ""),
    theme_bw(),
    theme(plot.title = element_text(hjust = 0.5),
          plot.subtitle = element_text(hjust = 0.5),
          plot.caption = element_text(hjust = 1),
          legend.position = "",
          legend.title = element_blank())
  )
```

```{r risk_bestand_startgegevens}
#spreadsheet portfolio holdings en etf landen- en sectorwegingen
holdings_file <- str_c(pad_deel1, "sheet_holdings.xlsx")
#inlezen JPM daily uit AIRS
JPM_daily_AIRS_file <- str_c(pad_deel1, "sheet_JPM_daily_from_dec_2013.xlsx")

#nieuwe manifest maken voor posit cloud connect
if(bij_pp) {rsconnect::writeManifest()}
```

```{r maken_RDRM_en_country_region_currency_table}
#maken RDRM asset tabel
RDRM_asset_table <-
  asset_levels %>% as_tibble() %>%
  rename(asset = value) %>%
  mutate(RDRM = case_when(asset %in% c("Obligaties", "Cash") ~ "RM",
                          asset == "Aandelen" ~ "RD"),
         asset = factor(asset, levels = asset_levels),
         RDRM = factor(RDRM, levels = RDRM_levels))

#maken tabel landen - regio - valuta
country_region_currency_table <-
  country_levels %>% as_tibble() %>%
  rename(country = value) %>%
  mutate(region =
           case_when(country %in% c("USA", "Canada") ~ "Americas",
                     country %in% c("Japan", "Australia", "Hong Kong", "Singapore", "New Zealand") ~ "Pacific",
                     TRUE ~ "Europe & Middle East"),
         currency =
           case_when(country == "USA" ~ "USD",
                     country == "Canada" ~ "CAD",
                     country == "UK" ~ "GBP",
                     country == "New Zealand" ~ "NZD",
                     country == "Australia" ~ "AUD",
                     country == "Hong Kong" ~ "HKD",
                     country == "Singapore" ~ "SGD",
                     country == "Japan" ~ "JPY",
                     country == "Sweden" ~ "SEK",
                     country == "Denmark" ~ "DKK",
                     country == "Switzerland" ~ "CHF",
                     country == "Israel" ~ "ILS",
                     country == "Norway" ~ "NOK",
                     TRUE ~ "EUR"),
        currency_2 =
           case_when(currency %in% c("USD", "CAD", "AUD", "HKD", "SGD", "NZD") ~ "USD (related)",
                     currency %in% c("NOK", "SEK", "ILS") ~ "Other",
                     currency == "JPY" ~ "JPY",
                     currency == "CHF" ~ "CHF",
                     currency == "GBP" ~ "GBP",
                     TRUE ~ "EUR (related)"),
        country = factor(country, levels = country_levels),
        region = factor(region, levels = region_levels),
        currency = factor(currency, levels = currency_levels),
        currency_2 = factor(currency_2, levels = currency_2_levels))
```

```{r ticker_from_bloomberg_ticker}
#ticker maken obv bloomberg_ticker
ticker_from_bloomberg_ticker <- function(bloomberg_ticker) {
   #is het een Govt of Corp
   is_bond <- if(str_ends(bloomberg_ticker, "Govt") | str_ends(bloomberg_ticker, "Corp")) {TRUE} else {FALSE}
    #eerste deel uit bloomberg_ticker voor aandelen en obligaties
   ticker_1 <- str_split_i(bloomberg_ticker, " ", 1)
   #tweede deel is een _ behalve voor obligaties
   ticker_2 <- if(is_bond) {""} else {"_"} 
   #derde deel is deel 2 uit de bloomberg_ticker
   ticker_3 <- str_split_i(bloomberg_ticker, " ", 2)
   #de rest is alleen voor obligaties (Govt)
   afloopdatum <- if(is_bond) {str_split_i(bloomberg_ticker, " ", 3)} else {""} 
   ticker_4 <- if(is_bond) {"_"} else {""}
   maand <- if(is_bond) {as.integer(str_split_i(afloopdatum, "/", 1))} else {""} 
   jaar <- if(is_bond) {as.integer(str_split_i(afloopdatum, "/", 3)) - 2000} else {""} 
   ticker <- str_c(ticker_1, ticker_2, ticker_3, ticker_4, maand, jaar)
   ticker <- if(is_bond) {str_replace(ticker, "NETHER", "NL")} else {ticker}
   ticker = if(is_bond) {str_replace(ticker, "DBR", "GE")} else {ticker}
   #DTB's
   ticker <- if(str_detect(bloomberg_ticker, "NL0015002F23")) {"NL0_625"} else {ticker}
   #CASH
   ticker <- if(str_detect(bloomberg_ticker, "CASH")) {"CASH"} else {ticker}
   ticker <- str_replace_all(ticker, c("_Index" = "", "_ECB_Curncy" = "", "XAUEUR_Curncy" = "XAUEUR"))

  return(ticker)
}

```

```{r holdings_inlezen}
holdings <-
  readxl::read_xlsx(holdings_file, sheet = "all_holdings") %>%
  #ticker maken
  rowwise() |> 
  mutate(ticker = ticker_from_bloomberg_ticker(bloomberg_ticker)) |>
  select(ticker, everything()) |> 
  #name_ maken zodat een join mogelijk is met de maandelijkse AIRS files
  mutate(name_ = str_replace_all(name, " ", "_")) %>%
  #currency_2 (groepen currencies) koppelen aan currency (wordt later voor ETF's overruled, bijv. IJPA_NA is JPY)
  left_join(country_region_currency_table %>% select(currency, currency_2) %>% unique(), by = "currency") %>%
  #region (groepen landen) koppelen aan country
  left_join(country_region_currency_table %>% select(country, region) %>% unique(), by = "country") %>%
  #RDRM koppelen aan asset
  left_join(RDRM_asset_table, by = "asset")

#tickers om koersen van te downloaden uit blbrg
bloomberg_tickers <-
  readxl::read_xlsx(holdings_file, sheet = "all_holdings") |> select(bloomberg_ticker)

#BM bloomberg_tickers om pdurs van te downloaden uit blbrg
bloomberg_tickers_bonds <-
  holdings %>% 
  filter(str_detect(bloomberg_ticker, " Govt")) |> 
  #GBM eruit
  filter(!str_detect(bloomberg_ticker, "GBM Govt")) |> 
  select(bloomberg_ticker)

#dividend alleen van Aandelen (kan ook een bond etf zijn, eigenlijk niet nodig voor de attributie)
bloomberg_tickers_equities <-
  holdings %>%
  filter(str_detect(bloomberg_ticker, " Equity")) |> 
  select(bloomberg_ticker)

individuele_aandelen <- 
  holdings %>% 
  filter(str_detect(type, " Stock")) |> 
  pull(ticker)
```

```{r lange_termijn_bloomberg_tickers}

lange_termijn_bloomberg_tickers <- 
  holdings |> filter(lange_termijn == TRUE) |> pull(bloomberg_ticker)

```

```{r functies_prices_indices_key_rates_div_inlezen_blp}
#datum_defs naar datum_breaks_def bovenaan

#koershistorie uit bloomberg halen functie
bdh_bloomberg_ticker_field <- function(bloomberg_ticker, fields, start_date = start_date_of_data, period = "MONTHLY") {
  bdh(bloomberg_ticker, start.date = as.Date(start_date), fields = fields,
      options = c("periodicitySelection" = period)) %>% 
    as_tibble() %>% 
    mutate(bloomberg_ticker = bloomberg_ticker) %>%
    select(date, bloomberg_ticker, all_of(fields))
}

bdh_bloomberg_ticker_field2 <- function(bloomberg_ticker, field, start_date = start_date_of_data, period = "MONTHLY") {
  bdh(bloomberg_ticker, start.date = as.Date(start_date), fields = field,
      options = c("periodicitySelection" = period)) %>% 
    as_tibble() %>% 
    mutate(bloomberg_ticker = bloomberg_ticker) %>%
    rename(value := !!field) %>% 
    mutate(field := !!field) %>% 
    select(date, bloomberg_ticker, field, value)
}

PX_LAST_tickers <- holdings |> #alle tickers
  select(bloomberg_ticker) |> pull()
PR384_tickers <- holdings |> #tickers voor dirty prices (bonds)
  filter(str_detect(bloomberg_ticker, " Govt") | str_detect(bloomberg_ticker, " Corp")) |>
  select(bloomberg_ticker) |> pull()
YL003_tickers <- PR384_tickers #YL003 is yield to maturity voor bonds
DU011_tickers <- PR384_tickers #DU011 is duration voor bonds
INDEX_OAS_TSY_tickers <- c("I32516 Index", "I05885 Index", "I36658EU Index") #OAS van verschillende ETF's
BX210_tickers <- c("BENEGA Index") #Looptijd van BENEGA
BX228_tickers <- c("BENEGA Index") #Duration van BENEGA

#veld uit bloomberg halen functie (div historie "dvd_hist_all", partial durations "DU324")
bds_bloomberg_ticker_field <- function(bloomberg_ticker, field) {
  bds(security = bloomberg_ticker, field = field) %>% 
    as_tibble() %>%
    nest() |> 
    mutate(bloomberg_ticker = bloomberg_ticker) |> 
    select(bloomberg_ticker, !!field := data)
}

```

```{r bestaande_bloomberg_data_inlezen}

#lees laatste |> bestand

if(file.exists(str_c(pad_deel1, "bloomberg_data.rds"))) 
  {bloomberg_data <- read_rds(str_c(pad_deel1, "bloomberg_data.rds"))
  new_long_term_history <- FALSE} else 
   #lege tabel maken met nieuwe lt historie
  {bloomberg_data <- tribble(~bloomberg_ticker, ~data, ~inhoud)
  new_long_term_history <- TRUE}

#opsplitsen en benoemen - worden gebruikt als er geen update plaatsvindt
#bdh
blbrg_monthly_bdh_fields <- bloomberg_data |> filter(inhoud == "blbrg_monthly_bdh_fields")
blbrg_daily_bdh_fields_mtd <- bloomberg_data |> filter(inhoud == "blbrg_daily_bdh_fields_mtd")
blbrg_M7EU_daily_prices <- bloomberg_data |> filter(inhoud == "blbrg_M7EU_daily_prices")
blbrg_MSDEWIN_daily_prices <- bloomberg_data |> filter(inhoud == "blbrg_MSDEWIN_daily_prices")

#bds
blbrg_dvd_hist_all <- bloomberg_data |> filter(inhoud == "blbrg_dvd_hist_all")
blbrg_partial_durations <- bloomberg_data |> filter(inhoud == "blbrg_partial_durations")

#bdp
blbrg_currencies <- bloomberg_data |> filter(inhoud == "blbrg_currencies")
blbrg_amounts_outstanding <- bloomberg_data |> filter(inhoud == "blbrg_amounts_outstanding")
blbrg_market_caps <- bloomberg_data |> filter(inhoud == "blbrg_market_caps")

#lastdate uit bestaande koersen bestand
# op eerste vd maand
if(file.exists(str_c(pad_deel1, "bloomberg_data.rds")))
{lastdate <-
  blbrg_monthly_bdh_fields |>
  #volgende ticker houdt op in sep 2024
  filter(bloomberg_ticker != "US0001M Index") |>
  #speelt dis niet mee
  unnest(cols = data) |>
  #alles naar laatste vd maand
  mutate(date = floor_date(date, unit = "month"),
         date = lubridate::rollback(date + months(1))) %>%
  #X
  #X fix 1ste van een maand
  #is het de eerste van de maand
  #filter(date < as.Date("2025-09-30")) |>
  #einde fix
  ungroup() %>%
  select(date) %>% tail(1) %>% pull() |> as.Date()} else
# einde op eerste vd maand
    {lastdate <- rollback(floor_date(Sys.Date() - months(1), unit = "month") + months(1))}

```

```{r koersen_inlezen_maandelijks}

start_date_of_long_term_data <- as.Date("1989-12-31")
start_date_of_data <- as.Date("2011-12-31")
start_date_sector_indices <- as.Date("2013-12-31")

#datum defs
sys_last_month_end <- Sys.Date() - days(day(Sys.Date()))
#maandelijkse nieuwe dingen alleen als maandeinde voorbij is en op kantoor
new_monthly <- sys_last_month_end > lastdate & bij_bavd
#zo ja haal nieuwe maanddata uit bloomberg

#new_long_term_history <- FALSE #als nieuwe geschiedenis nodig s dan #bloomberg_data verwijderen. Is vervangen door: als file data.rds er niet #is, dan opnieuw lt history maken en new_monthly true 

if(bij_bavd & new_monthly) {
  ##haal nieuwe maandeinde koersen e.d. op
  new_blbrg_monthly_bdh_fields <-
    #voor alle bloomberg_tickers behalve de lange_termijn_bloomberg_tickers
    map_dfr(PX_LAST_tickers[!PX_LAST_tickers %in% lange_termijn_bloomberg_tickers], 
            field = "PX_LAST", 
            bdh_bloomberg_ticker_field2, 
            #start_date = if(new_long_term_history) start_date_of_data else lastdate, #zo krijg je de laatste maand nog eens
            start_date = if(new_long_term_history) start_date_of_data else lastdate + 5, 
            #+ 5 zodat alleen de laatste ultimo meekomt, en er geen dubbele lastdate komt
            period = "MONTHLY") |> 
    bind_rows(
    #voor de lange_termijn_bloomberg_tickers
    map_dfr(lange_termijn_bloomberg_tickers, 
            field = "PX_LAST", 
            bdh_bloomberg_ticker_field2, 
            start_date = if(new_long_term_history) start_date_of_long_term_data else lastdate + 5, 
            period = "MONTHLY")) |> 
    bind_rows(
    map_dfr(PR384_tickers, 
            field = "PR384", 
            bdh_bloomberg_ticker_field2, 
            start_date = if(new_long_term_history) start_date_of_data else lastdate + 5, 
            period = "MONTHLY")) |> 
    bind_rows(
    map_dfr(YL003_tickers, 
            field = "YL003", 
            bdh_bloomberg_ticker_field2, 
            start_date = if(new_long_term_history) start_date_of_data else lastdate + 5, 
            period = "MONTHLY")) |> 
    bind_rows(
    map_dfr(INDEX_OAS_TSY_tickers, 
            field = "INDEX_OAS_TSY", 
            bdh_bloomberg_ticker_field2, 
            start_date = if(new_long_term_history) start_date_of_data else lastdate + 5, 
            period = "MONTHLY")) |> 
    bind_rows(
    map_dfr(BX210_tickers, 
            field = "BX210", 
            bdh_bloomberg_ticker_field2, 
            start_date = if(new_long_term_history) start_date_of_data else lastdate + 5, 
            period = "MONTHLY")) |> 
    bind_rows(
    map_dfr(BX228_tickers, 
            field = "BX228", 
            bdh_bloomberg_ticker_field2, 
            start_date = if(new_long_term_history) start_date_of_data else lastdate + 5, 
            period = "MONTHLY")) |> 
    bind_rows(
    map_dfr(DU011_tickers, 
            field = "DU011", 
            bdh_bloomberg_ticker_field2, 
            start_date = if(new_long_term_history) start_date_of_data else lastdate + 5, 
            period = "MONTHLY"))
  
  #updaten blbrg_monthly_bdh_fields
  blbrg_monthly_bdh_fields <-
    blbrg_monthly_bdh_fields |>
    unnest(cols = data) |> 
    #kolom inhoud verwijderen anders later dubbel
    select(-inhoud) %>% 
    #nieuwe data toevoegen
    bind_rows(new_blbrg_monthly_bdh_fields) |> 
    group_by(bloomberg_ticker) %>%
    nest() %>%
    mutate(inhoud = "blbrg_monthly_bdh_fields")
  
  #verwijder oude data en schrijf nieuwe weg in bloomberg_data
  bloomberg_data <- 
    bloomberg_data |> 
    filter(inhoud != "blbrg_monthly_bdh_fields") |> 
    bind_rows(blbrg_monthly_bdh_fields)

  #statische data mbt currency van bloomberg_tickers - ook een keer per maand updaten
  blbrg_currencies <-
    map_dfr(bloomberg_tickers$bloomberg_ticker, bdp, "CRNCY") %>% 
    as_tibble(rownames = "bloomberg_ticker") %>%
    mutate(CRNCY = ifelse(CRNCY == "GBp", "GBP", CRNCY)) %>% 
    group_by(bloomberg_ticker) %>% 
    nest() %>% 
    mutate(inhoud = "blbrg_currencies")
  #verwijder oude data en schrijf nieuwe weg in bloomberg_data
  bloomberg_data <- 
    bloomberg_data |> 
    filter(inhoud != "blbrg_currencies") |> 
    bind_rows(blbrg_currencies)

  ##haal nieuwe amounts outstanding op
  blbrg_amounts_outstanding <- 
    map_dfr(bloomberg_tickers_bonds$bloomberg_ticker, bdp, "DS021") %>% 
    as_tibble(rownames = "bloomberg_ticker") %>%
    group_by(bloomberg_ticker) %>% 
    nest() %>% 
    mutate(inhoud = "blbrg_amounts_outstanding")
  #verwijder oude data en schrijf nieuwe weg in bloomberg_data
  bloomberg_data <- 
    bloomberg_data |> 
    filter(inhoud != "blbrg_amounts_outstanding") |> 
    bind_rows(blbrg_amounts_outstanding)
}

#volgende altijd ophalen: dividenden, market_caps
if(bij_bavd) {
  ##haal nieuwe dividenden op
  blbrg_dvd_hist_all <-
    map2_dfr(bloomberg_tickers_equities$bloomberg_ticker, "dvd_hist_all", bds_bloomberg_ticker_field) %>% 
    group_by(bloomberg_ticker) %>% 
    nest() %>% 
    mutate(inhoud = "blbrg_dvd_hist_all")
  #verwijder oude data en schrijf nieuwe weg in bloomberg_data
  bloomberg_data <- 
    bloomberg_data |> 
    filter(inhoud != "blbrg_dvd_hist_all") |> 
    bind_rows(blbrg_dvd_hist_all)

  ##haal nieuwe market caps op
  blbrg_market_caps <- 
    map_dfr(bloomberg_tickers$bloomberg_ticker, bdp, "RR902") %>% 
    as_tibble(rownames = "bloomberg_ticker") %>%
    group_by(bloomberg_ticker) %>% 
    nest() %>% 
    mutate(inhoud = "blbrg_market_caps")
  #verwijder oude data en schrijf nieuwe weg in bloomberg_data
  bloomberg_data <- 
    bloomberg_data |> 
    filter(inhoud != "blbrg_market_caps") |> 
    bind_rows(blbrg_market_caps)
  
  ##haal nieuwe PE's van ETF's op
  bloomberg_tickers_etfs_aandelen <- 
    holdings |> filter(type == "ETF", asset == "Aandelen") |> select(bloomberg_ticker)
  blbrg_fund_pes <- 
    map_dfr(bloomberg_tickers_etfs_aandelen$bloomberg_ticker, bdp, "FD104") %>% 
    as_tibble(rownames = "bloomberg_ticker") %>%
    group_by(bloomberg_ticker) %>%
    nest() %>%
    mutate(inhoud = "blbrg_fund_pes")
   #verwijder oude data en schrijf nieuwe weg in bloomberg_data
   bloomberg_data <- 
     bloomberg_data |> 
     filter(inhoud != "blbrg_fund_pes") |> 
     bind_rows(blbrg_fund_pes)
   
  ##haal nieuwe PE's van individuele aandelen op
  bloomberg_tickers_individuele_aandelen <- 
    holdings |> filter(str_detect(type, "Stock")) |> select(bloomberg_ticker)
  blbrg_stock_pes <- 
    map_dfr(bloomberg_tickers_individuele_aandelen$bloomberg_ticker, bdp, "RR900") %>% 
    as_tibble(rownames = "bloomberg_ticker") %>%
    group_by(bloomberg_ticker) %>%
    nest() %>%
    mutate(inhoud = "blbrg_stock_pes")
   #verwijder oude data en schrijf nieuwe weg in bloomberg_data
   bloomberg_data <- 
     bloomberg_data |> 
     filter(inhoud != "blbrg_stock_pes") |> 
     bind_rows(blbrg_stock_pes)
}
```

```{r koersen_inlezen_dagelijks_na_maandeinde}

new_daily <- new_daily #zie bovenaan
new_daily_start_date <- Sys.Date() - days(10) #neem laatste vijf dagen, allen de laatste is nodig

if(new_daily) {
  ##haal nieuwe dagkoersen op vanaf de lastdate
  blbrg_daily_bdh_fields_mtd <-
    map_dfr(PX_LAST_tickers, field = "PX_LAST", bdh_bloomberg_ticker_field2, start_date = new_daily_start_date, period = "DAILY") |> bind_rows(
    map_dfr(PR384_tickers, field = "PR384", bdh_bloomberg_ticker_field2, start_date = new_daily_start_date, period = "DAILY")) |> bind_rows(
    map_dfr(YL003_tickers, field = "YL003", bdh_bloomberg_ticker_field2, start_date = new_daily_start_date, period = "DAILY")) |> bind_rows(
    map_dfr(INDEX_OAS_TSY_tickers, field = "INDEX_OAS_TSY", bdh_bloomberg_ticker_field2, start_date = new_daily_start_date, period = "DAILY")) |> bind_rows(
    map_dfr(BX210_tickers, field = "BX210", bdh_bloomberg_ticker_field2, start_date = new_daily_start_date, period = "DAILY")) |> bind_rows(
    map_dfr(BX228_tickers, field = "BX228", bdh_bloomberg_ticker_field2, start_date = new_daily_start_date, period = "DAILY")) |> bind_rows(
    map_dfr(DU011_tickers, field = "DU011", bdh_bloomberg_ticker_field2, start_date = new_daily_start_date, period = "DAILY")) |>
    group_by(bloomberg_ticker) %>% 
    nest() %>% 
    mutate(inhoud = "blbrg_daily_bdh_fields_mtd")
  #verwijder oude data en schrijf nieuwe weg in bloomberg_data
  bloomberg_data <- 
    bloomberg_data |> 
    filter(inhoud != "blbrg_daily_bdh_fields_mtd") |> #bestaande eruit
    bind_rows(blbrg_daily_bdh_fields_mtd) #nieuwe erin
 
  ##haal nieuwe M7EU en MSDEWIN daily op
  blbrg_M7EU_daily_prices <- 
    bdh_bloomberg_ticker_field("M7EU Index", start_date = start_date_sector_indices, period = "DAILY", field = "PX_LAST") %>% 
    group_by(bloomberg_ticker) %>% 
    nest() %>% 
    mutate(inhoud = "blbrg_M7EU_daily_prices")
  #verwijder oude data en schrijf nieuwe weg in bloomberg_data
  bloomberg_data <- 
    bloomberg_data |> 
    filter(inhoud != "blbrg_M7EU_daily_prices") |> #bestaande eruit
    bind_rows(blbrg_M7EU_daily_prices) #nieuwe erin

  blbrg_MSDEWIN_daily_prices <- 
    bdh_bloomberg_ticker_field("MSDEWIN Index", start_date = start_date_sector_indices, period = "DAILY", field = "PX_LAST") %>% 
    group_by(bloomberg_ticker) %>% 
    nest() %>% 
    mutate(inhoud = "blbrg_MSDEWIN_daily_prices")
  #verwijder oude data en schrijf nieuwe weg in bloomberg_data
  bloomberg_data <- 
    bloomberg_data |> 
    filter(inhoud != "blbrg_MSDEWIN_daily_prices") |> #bestaande eruit
    bind_rows(blbrg_MSDEWIN_daily_prices) #nieuwe erin
  
  #partial durations
  blbrg_partial_durations <- 
     map2_dfr(bloomberg_tickers_bonds$bloomberg_ticker, "DU324", bds_bloomberg_ticker_field) %>% 
     group_by(bloomberg_ticker) %>% 
     nest() %>% 
     mutate(inhoud = "blbrg_partial_durations")
  #verwijder oude data en schrijf nieuwe weg in bloomberg_data
  bloomberg_data <- 
    bloomberg_data |> 
    filter(inhoud != "blbrg_partial_durations") |> #bestaande eruit
    bind_rows(blbrg_partial_durations) #nieuwe erin
  
} #einde nieuwe daily

#EINDE DATA UIT BOOMLBERG INLEZEN

```

```{r bloomberg_data_wegschrijven}

bloomberg_data |> 
  write_rds(str_c(pad_deel1, "bloomberg_data.rds"))

#einde data maken. Als bij bavd, stop
if(bij_bavd) {
  print("data bestand staat klaar")
  stop()}

```

```{r laatste_eerste_quote}

#functie om laatste quate van een bloomberg_ticker
laatste_quote <- function(bloomberg_ticker) {
  #laatste quote van een ticker
    bloomberg_data |> 
    filter(str_detect(inhoud, "daily"), 
           str_detect(bloomberg_ticker, !!bloomberg_ticker)) |> 
    unnest(cols = data) |>
    filter(date == max(date)) |>
    select(date, bloomberg_ticker, PX_LAST = value)
}
eerste_quote <- function(bloomberg_ticker) {
  #laatste quote van een ticker
    bloomberg_data |> 
    filter(str_detect(inhoud, "monthly"), 
           str_detect(bloomberg_ticker, !!bloomberg_ticker)) |> 
    unnest(cols = data) |>
    filter(date == min(date)) |>
    select(date, bloomberg_ticker, PX_LAST = value)
}
```

```{r tickers_veranderen_in_data}
#DATA UIT BLOOMBERG OMZETTEN

data <- 
  bloomberg_data |> 
  #tickers_veranderen_in_data
  rowwise() |> 
  mutate(ticker = ticker_from_bloomberg_ticker(bloomberg_ticker)) |> 
  group_by(ticker) |> 
  mutate(inhoud = str_remove(inhoud, "blbrg_")) |>
  select(ticker, data, inhoud)

#opsplitsen en benoemen en uitpakken
monthly_bdh_fields <- 
  data |> 
  filter(inhoud == "monthly_bdh_fields") |> 
  unnest(cols = data) |>
  #datums naar einde maand
  mutate(date = floor_date(date, unit = "month"),
  date = lubridate::rollback(date + months(1))) |> 
  select(-inhoud) |> 
  #volgende noodzakelijk vanwege het bestaan van lange_termijn_bloomberg_tickers
  filter(date > start_date_of_data) |> 
  #fix op 4 nov 2024 vanwege dubbele gegevens voor 2024-09-30
  unique()

daily_bdh_fields_mtd <- 
  data |> 
  filter(inhoud == "daily_bdh_fields_mtd") |> 
  unnest(cols = data) |> 
  select(-inhoud)

dvd_hist_all <- 
  data |> 
  filter(inhoud == "dvd_hist_all") |>  
  unnest(cols = data) |> 
  select(-inhoud) |> 
  unnest(cols = dvd_hist_all) |> 
  group_by(ticker)

currencies <- 
  data |> 
  filter(inhoud == "currencies") |> 
  unnest(cols = data) |> 
  select(-inhoud) 
  

daily_bhd_fields_mtd <- 
  data |> 
  filter(inhoud == "daily_bdh_fields_mtd") |> 
  unnest(cols = data) |>
  select(-inhoud)

M7EU_daily_prices <- 
  data |> 
  filter(inhoud == "M7EU_daily_prices") |> 
  unnest(cols = data) |>
  select(-inhoud, -ticker) |> 
  rename(M7EU = PX_LAST)

MSDEWIN_daily_prices <- 
  data |> 
  filter(inhoud == "MSDEWIN_daily_prices") |> 
  unnest(cols = data) |>
  select(-inhoud, -ticker) |> 
  rename(MSDEWIN = PX_LAST)

partial_durations <- 
  data |> 
  filter(inhoud == "partial_durations") |>   
  unnest(cols = data)

amounts_outstanding <- 
  data |> 
  filter(inhoud == "amounts_outstanding") |> 
  unnest(cols = data) |> 
  select(-inhoud) |> 
  rename(amount_outstanding = DS021)

market_caps <- 
  data |> 
  filter(inhoud == "market_caps") |> 
  unnest(cols = data) |> 
  select(-inhoud) |> 
  rename(market_caps = RR902)

```

```{r all_prices_local_long_daily_mtd_na_fill}
##haal bestaande dagkoersen op (zijn nieuwe als new_daily)
#idee; df's heten blbrg_... als ze rechtsreeks uit blbrg komen, zodra erin is gewijzigd heet het anders
all_prices_local_long_daily_mtd <-
 daily_bdh_fields_mtd |> 
  pivot_wider(names_from = field) |> 
  mutate(PX_LAST = ifelse(ticker %in% bloomberg_tickers_bonds, PR384, PX_LAST)) |> 
  select(ticker, date, PX_LAST)

all_prices_local_long_daily_mtd_na_fill <- 
  #neemt alle prijzen vanaf laatste maandeinde en trekt NA's door met de laatst bekende prijs
  all_prices_local_long_daily_mtd |>
  #
  pivot_wider(id_cols = date, values_from = PX_LAST, names_from = ticker) |> 
  na.locf() |> 
  pivot_longer(cols = -date, names_to = "ticker", values_to = "PX_LAST") |> 
  select(ticker, date, PX_LAST)

```

```{r all_prices_local_long_monthly, warning=FALSE}

all_prices_local_long_monthly <-
  monthly_bdh_fields |>
  pivot_wider(names_from = field) |> 
  #voor bonds dirty price
  mutate(PX_LAST = ifelse(ticker %in% bloomberg_tickers_bonds, PR384, PX_LAST)) |> 
  select(ticker, date, PX_LAST) |>
  #dubbele small cap eruit
  unnest(cols = PX_LAST) |> 
  group_by(ticker, date) |> 
  mutate(n = n(), nr = row_number()) |> 
  arrange(desc(n)) |> 
  filter(!nr == 2) |> 
  select(-n, -nr)
  #einde dubbele small cap eruit

```

```{r snapshot_date}
snapshot_date <- #laatste datum waarop koersen voor alle bloomberg_tickers (van de laatste file)
  all_prices_local_long_daily_mtd %>%
  group_by(ticker) %>%
  #behalve bloomberg_tickers die niet goed of niet meer updaten
  # filter(!str_detect(ticker, "ESTRON"), 
  #        !str_detect(ticker, "EONIA"), 
  #        !str_detect(ticker, "DSM_NA") , 
  #        !str_detect(ticker, "RDSA_NA") , 
  #        !str_detect(ticker, "T1"),
  #        !str_detect(ticker, "VDE_UN"),
  #        !str_detect(ticker, "MXWO0RE"),
  #        !str_detect(ticker, "NL2_724"),
  #        !str_detect(ticker, "SUSWLIN_NA"),
  #        !str_detect(ticker, "SNAF2_NA"),
  #        !str_detect(ticker, "NTSC"),
  #        !str_detect(ticker, "JPEIGLBL"),
  #        !str_detect(ticker, "EUR001M"),
  #        #jaarbegin special
  #        !str_detect(ticker, "_SE"),
  #        !str_detect(ticker, "_SW")) %>%
  #andere, positieve benadering, zonder onderhoud: eerste datum alle us tickers (UN, UW, etc)
  filter(str_detect(ticker, "_U")) |> 
  filter(!is.na(PX_LAST)) |> #alleen bloomberg_tickers met een koers
  filter(date == max(date)) %>%
  ungroup() %>%
  select(date) %>% #verschillende datums, verschilt per bloomberg_ticker
  arrange(date) %>% #sorteren op datum
  head(1) %>% #de eerste datum is de gemene deler, waarop voor alle bloomberg_tickers een prijs beschikbaar is
  pull()

#laatstde datum van bloomberg tickers (maar niet later dan de snapshot_date)
laatste_datum_bloomberg_tickers_tm_snapshot_date <-
  bloomberg_data |> 
  filter(str_detect(inhoud, "mtd")) |> 
  unnest(cols = data) |> 
  group_by(bloomberg_ticker) |> 
  filter(date <= snapshot_date, date == max(date)) |> 
  select(bloomberg_ticker, date)

#laatste datum van de tickers die niet goed of niet meer updaten
no_update_bloomberg_tickers <-
  laatste_datum_bloomberg_tickers_tm_snapshot_date |> 
  filter(date < snapshot_date,
         #staatsobligaties die aflopen
         !str_detect(bloomberg_ticker, "NETHER"))
  #volgende nodig voor als er geen tickers achterlopen (bijv. op einde dag)
  if(nrow(no_update_bloomberg_tickers) == 0) {
    no_update_bloomberg_tickers <- 
      tibble(bloomberg_ticker = "geen", date = snapshot_date)
  }

NTSCLBE_NA_lastdate <- 
  all_prices_local_long_daily_mtd |> 
  filter(str_detect(ticker, "NTSCLBE_NA")) |> 
  filter(!is.na(PX_LAST)) |> #alleen bloomberg_tickers met een koers
  filter(date == max(date)) %>%  
  pull(date)

snapshot_date_format <-
  snapshot_date |>
  format("%d-%b-%Y")

lastdate_format <-
  lastdate |>
  format("%d-%b-%Y")
```

---
title: "Modelportefeuilles t/m `r snapshot_date_format` "
title-block-banner: images/favicon.ico

---

```{r bloomberg_tickers_eur_usd_chf_benoemen}
#bloomberg_tickers in eur, usd en chf benoemen
eur_tickers <- filter(holdings, currency == "EUR", !str_detect(ticker, "EUREUR")) %>% select(ticker, type, sector) |> filter(!is.na(type))
usd_tickers <- filter(holdings, currency == "USD", !str_detect(ticker, "EURUSD")) %>% select(ticker, type, sector) |> filter(!is.na(type))
chf_tickers <- filter(holdings, currency == "CHF", !str_detect(ticker, "EURCHF")) %>% select(ticker, type, sector) |> filter(!is.na(type))
gbp_tickers <- filter(holdings, currency == "GBP", !str_detect(ticker, "EURGBP")) %>% select(ticker, type, sector)
```

```{r all_prices_local_long}

all_prices_local_long_snapshot_date <-
  #neem de NA_fill versie en filter deze op de snapshot_date
  all_prices_local_long_daily_mtd_na_fill %>%
  group_by(ticker) %>%
  filter(date == snapshot_date)

#tickers uit bloomberg_tickers maken - ook voor currencies
all_prices_local_long_crncies <-
  all_prices_local_long_monthly %>%
  #X 
  #check of snapshot_date < laatste datum monthly
  #zo ja dan monthly afkappen op de een na laatste datum
  #dit gebeurt m.n. op de 1ste van een maand
  #oplossing voor altijd: als snapshot_date > laatste van een maand heeft het geen gevolgen
  filter(date < snapshot_date) |>
  #
  #somms twee koersen smaal cap fonds
  unnest(cols = PX_LAST) |> group_by(ticker, date) |>  
  mutate(nr = row_number()) |> filter(nr == 1) |> 
  select(-nr) |> 
  #einde somms twee koersen smaal cap fonds
  group_by(ticker) %>%
  bind_rows(all_prices_local_long_snapshot_date) %>%
  #currencies ertussen
  left_join(currencies, by = "ticker") %>%
  mutate(PX_LAST = ifelse(ticker %in% gbp_tickers$ticker, PX_LAST/100, PX_LAST)) %>%
  unique() |> #voor als snapshot_date == lastdate
  group_by(ticker) |> #ipv bloomberg_ticker
  select(date, ticker, PX_LAST, CRNCY)

#lastdate corrigeren naar een maand eerder als de snapshot_date < dan de lastdate
#if(lastdate > snapshot_date) {}

#de CRNCY kolom er weer uit
all_prices_local_long <-
  all_prices_local_long_crncies %>%
  select(-CRNCY) 

```

```{r dates}
dates <- all_prices_local_long %>% 
  filter(date >= start_date_sector_indices) |> 
  ungroup() %>% select(date) %>% arrange(date) |> unique()

twee_jaar_datums <- start_date_sector_indices %m+% months(seq(0, length(dates$date), 24))
jaar_datums <- start_date_sector_indices %m+% months(seq(0, length(dates$date), 12))
kwartaal_datums <- start_date_sector_indices %m+% months(seq(0, length(dates$date), 3))
maand_datums <- start_date_sector_indices %m+% months(seq(0, length(dates$date), 1))

#Grok
# Assuming these are defined globally as before
dates <- all_prices_local_long %>% 
  filter(date >= start_date_sector_indices) |> 
  ungroup() %>% select(date) %>% arrange(date) |> unique()

twee_jaar_datums <- start_date_sector_indices %m+% months(seq(0, length(dates$date), 24))
jaar_datums <- start_date_sector_indices %m+% months(seq(0, length(dates$date), 12))
kwartaal_datums <- start_date_sector_indices %m+% months(seq(0, length(dates$date), 3))
maand_datums <- start_date_sector_indices %m+% months(seq(0, length(dates$date), 1))

datum_breaks <- function(start_date, end_date) {
  if (as.Date(end_date) - as.Date(start_date) >= years(10)) {
    twee_jaar_datums[twee_jaar_datums >= as.Date(start_date) & twee_jaar_datums <= as.Date(end_date)]
  } else if (as.Date(end_date) - as.Date(start_date) >= months(13) &
             as.Date(end_date) - as.Date(start_date) < years(10)) {
    jaar_datums[jaar_datums >= as.Date(start_date) & jaar_datums <= as.Date(end_date)]
  } else if (as.Date(end_date) - as.Date(start_date) > months(4) &
             as.Date(end_date) - as.Date(start_date) < months(13)) {
    kwartaal_datums[kwartaal_datums >= as.Date(start_date) & kwartaal_datums <= as.Date(end_date)]
  } else {
    maand_datums[maand_datums >= as.Date(start_date) & maand_datums <= as.Date(end_date)]
  }
}

#datum_labels voor charts
datum_labels <- function(start_date, end_date) {
  if(as.Date(end_date) - as.Date(start_date) >= years(10)) {"%Y"} 
  else if (as.Date(end_date) - as.Date(start_date) >= months(13) &
            as.Date(end_date) - as.Date(start_date) < years(6)) {"%Y"}
  else if (as.Date(end_date) - as.Date(start_date) > months(4) &
            as.Date(end_date) - as.Date(start_date) < months(13)) {"%b-%y"}
  else {"%b-%y"}
}

```

```{r exchange_rates}

ECB_Exchange_rates_long <-
  all_prices_local_long %>%
  filter(ticker %in% c("EURUSD_ECB", "EURGBP_ECB", "EURCHF_ECB", "EURJPY_ECB")) %>%
  pivot_wider(names_from = ticker, values_from = PX_LAST) |> 
  mutate(EUREUR_ECB = 1) |>
  pivot_longer(cols = -date, names_to = "currency", values_to = "exchange_rate") 

```

```{r dates_namen}

#lastdate <- boven gedefinieerd
last_ultimo_year <- if(month(lastdate) == 12) lastdate else dates %>% filter(year(date) == year(lastdate) - 1) %>% tail(1) %>% as.integer %>% as.Date()
next_to_last_ultimo_year <- last_ultimo_year %m-% years(1)
next_to_last_ultimo_year2 <- next_to_last_ultimo_year %m-% years(1)
next_to_last_ultimo_year3 <- next_to_last_ultimo_year2 %m-% years(1)
next_to_last_ultimo_year4 <- next_to_last_ultimo_year3 %m-% years(1)
#hele jaartallen als getallen
last_year <- last_ultimo_year |> format("%Y") |> as.integer()
#daarna -1, -2 etc
next_to_lastdate <- ceiling_date(lastdate %m-% months(1), 'month') %m-% days(1)
next_to_lastdate2 <- ceiling_date(lastdate %m-% months(2), 'month') %m-% days(1)
next_to_lastdate3 <- ceiling_date(lastdate %m-% months(3), 'month') %m-% days(1)
next_to_lastdate4 <- ceiling_date(lastdate %m-% months(4), 'month') %m-% days(1)
one_year_ago <- ceiling_date(lastdate %m-% months(12), 'month') %m-% days(1)

last_quarter_start <-
  dates %>%
  filter(date != snapshot_date) %>%
  mutate(month = month(date)) %>%
  filter(month %in% c(3, 6, 9, 12)) %>%
  select(date) %>% tail(2) %>% head(1) %>% pull()

last_quarter_end <-
  dates %>%
  filter(date != snapshot_date) %>%
  mutate(month = month(date)) %>%
  filter(month %in% c(3, 6, 9, 12)) %>%
  select(-month) %>% tail(1) %>% pull()

last_quarter <- function(last_quarter_end) {
  case_when(month(last_quarter_end) == 12 ~ str_c("Q4 ", year(last_quarter_end)),
            month(last_quarter_end) ==  9 ~ str_c("Q3 ", year(last_quarter_end)),
            month(last_quarter_end) ==  6 ~ str_c("Q2 ", year(last_quarter_end)),
            month(last_quarter_end) ==  3 ~ str_c("Q1 ", year(last_quarter_end)))
}
```

```{r dividend}
start_date_looptijd_BENEGA <- as.Date("2016-12-31")
start_date_attr <- as.Date("2016-12-31")
start_date_vp_vf <- as.Date("2017-06-30")
start_date_fd <- as.Date("2018-08-31")
start_date_vd <- as.Date("2022-09-30")

div_tax <- 0 #na overleg 22-nov-2021

dividends_EUR_month_end <-
  dvd_hist_all %>%
    #div types:
    #[1] "Spinoff"           "Regular Cash"      "Cancelled"         "Final"             "Interim"           "Stock Split"
    #[7] "Income"            "Omitted"           "Return of Capital" "Special Cash"      "3rd Interim"       "2nd Interim"
    #[13] "1st Interim"       "4th Interim"
    #de volgende laat ik eruit: "Spinoff", "Cancelled", "Stock Split", "Omitted"
    filter(!`Dividend Type` %in% c("Spinoff", "Cancelled", "Stock Split", "Omitted")) %>%
    rename(pay_date = `Payable Date`, ex_date = `Ex-Date`, div = `Dividend Amount`) %>%
    select(ticker, pay_date, ex_date, ticker, div) %>%
    #datum naar maandeinde BETAALDATUM
    mutate(date = floor_date(pay_date, unit = "month"),
           date = lubridate::rollback(date + months(1))) %>%
    #filter(ex_date < snapshot_date) %>%
    #laatste datum terug naar snapshot_date zodat wisselkoersen erbij kunnen
    mutate(date = ifelse(date > lastdate, snapshot_date, date),
           date = as.Date(date)) %>%
    #nu nog een wisselkoers erbiij
    group_by(ticker) %>%
    left_join(currencies, by = "ticker") %>%
    #wisselkoersen erbij
    left_join(ECB_Exchange_rates_long %>% mutate(CRNCY = str_sub(currency, start = 4, end = 6)), by = c("date", "CRNCY")) %>%
    #voor UNA_NA GBP van maken
    mutate(CRNCY = ifelse(ticker == "UNA_NA", "GBP", CRNCY)) %>%
    mutate(div_EUR = ifelse(CRNCY == "GBP", div/exchange_rate/100, div/exchange_rate),
           div_EUR_net = (1 - div_tax) * div_EUR) %>%
    #nu datums na vandaag weer terug zetten
    mutate(date = floor_date(pay_date, unit = "month"),
           date = lubridate::rollback(date + months(1))) %>%
    select(date, ex_date, pay_date, ticker, div, CRNCY, div_EUR, div_EUR_net) %>%
  #NA dates eruit, die hebben mini bedragen 
    filter(date > start_date_of_data)

dividends_EUR_month_end_until_snapshot_date <-
  dividends_EUR_month_end |>
  filter(ex_date <= snapshot_date, ex_date >= lastdate) |>
  mutate(date = ifelse(date > lastdate, snapshot_date, date),
         date = as.Date(date))
```

```{r daily_JPM_uit_AIRS_inlezen_samenvoegen_met_MSDEWIN_M7EU_uit_blbrg}

JPM_daily_from_dec_2013 <-
  #JPM in spreadsheet
  readxl::read_xlsx(JPM_daily_AIRS_file, sheet = "JPM_daily", skip = 0, col_types = c("date", "numeric")) %>%
  mutate(date = as.Date(date)) %>%
  arrange(date)

JPM_MSDEWIN_M7EU_daily_from_dec_2013 <-
  #joinen op data waar voor alle reeksen gegevens zijn
  JPM_daily_from_dec_2013 %>% 
  left_join(MSDEWIN_daily_prices, by = "date") %>%
  left_join(M7EU_daily_prices, by = "date")
```

```{r bm_snapshot_maken_incl_daily_en_naar_monthly}

#notitie uit 2018 - overige looptijden voor BENEGA
#         Dur   Mat   Mat range
#BENEGA   8.5   9.99  >1y
#
#BENEG1   1.9   1.9   1-3y
#BENEG2   3.7   3.9   3-5y
#BENEG3   5.4   5.6   5-7y
#BENEG4   7.7   8.2   7-10y
#BENEG5   16    20    10+y

MSDEWIN_snapshot <-
  all_prices_local_long %>%
  ungroup() %>%
  filter(ticker == "MSDEWIN", date == snapshot_date) %>%
  select(PX_LAST) %>%
  pull()

#BENEGA als benadering voor JPM
BENEGA_last_ultimo <-
  all_prices_local_long %>%
  ungroup() %>%
  filter(ticker == "BENEGA", date == lastdate) %>%
  select(PX_LAST) %>%
  pull()

BENEGA_snapshot <-
  all_prices_local_long %>%
  ungroup() %>%
  filter(ticker == "BENEGA", date == snapshot_date) %>%
  select(PX_LAST) %>%
  pull()

CASH_snapshot <- 1

JPM_last_ultimo <- JPM_MSDEWIN_M7EU_daily_from_dec_2013 %>% filter(date == max(date)) %>% select(JPM) %>% as.double()
MSDEWIN_last_ultimo <- JPM_MSDEWIN_M7EU_daily_from_dec_2013 %>% filter(date == max(date)) %>% select(MSDEWIN) %>% as.double()
JPM_snapshot <- BENEGA_snapshot/BENEGA_last_ultimo * JPM_last_ultimo

JPM_MSDEWIN_M7EU_snapshot <- 
  tibble(date = as.Date(snapshot_date), JPM = JPM_snapshot, MSDEWIN = MSDEWIN_snapshot, M7EU = NA)

```

```{r bm_mixed_prices_maken_daily_en_dan_naar_monthly}

JPM_MSDEWIN_M7EU_daily_en_snapshot_onderelkaar <-
  JPM_MSDEWIN_M7EU_daily_from_dec_2013 %>%
  bind_rows(JPM_MSDEWIN_M7EU_snapshot) %>%
  unique() #voor als snapshot_date == lastdate

bms_mixed_daily_en_snapshot_onderelkaar <-
  JPM_MSDEWIN_M7EU_daily_en_snapshot_onderelkaar %>%
    mutate(across(-date, ~ifelse(date == min(date), 0, (./lag(.) - 1)))) %>%
  #hier MSDEWIN van voor dec 2016 vervangen door M7EU
    mutate(MSDEWIN = ifelse(date <= start_date_attr, M7EU, MSDEWIN)) |> 
  #M7EU eruit halen
    select(-M7EU) %>%
  #mixed bms maken
    mutate(BM7030 = 0.7 * MSDEWIN + 0.3 * JPM,
           BM5050 = 0.5 * MSDEWIN + 0.5 * JPM,
           BM3070 = 0.3 * MSDEWIN + 0.7 * JPM) |>
    mutate(across(-date, ~cumprod(1 + .)))

#alleen maandeindes eruit halen
bm_prices_JPM_MSDEWIN_mixed_monthly_en_snapshot <-
  bms_mixed_daily_en_snapshot_onderelkaar %>%
    mutate(month = month(date),
           #houden als volgende dag een andere maand is of als het de laatste is
           keep = ifelse(month != lead(month) | date == max(.$date), 1, 0)) %>%
    filter(keep == 1) %>%
    select(-month, -keep) %>%
  mutate(date = floor_date(date, unit = "month"),
         date = lubridate::rollback(date + months(1))) %>%
  mutate(date = ifelse(date > lastdate, snapshot_date, date),
         date = as.Date(date))

```

```{r FIX_MXWO0RE_NA_since_nov_23}
msci_sector_tickers <- str_c("MXWO0", sector_levels_RD_short)

#lees sector indices in en maak breed
bm_MSCI_en_sector_indices_local <-
  all_prices_local_long %>%
  filter(ticker %in% c("MXWO", msci_sector_tickers)) %>%
  pivot_wider(values_from = PX_LAST, names_from = ticker)

#MXWO0RE is niet meer beschikbaar.
#laatste datum MXWO0RE is 2023-10-31
#datums waarop en MXWO0RE niet meer beschikbaar is
dates_MXWO0RE_NA <- #kunnen meerdere datums zijn
  bm_MSCI_en_sector_indices_local |> 
  select(date, MXWO0RE) |> 
  filter(is.na(MXWO0RE)) |> 
  select(date) |> 
  pull()

#lees gewichten op lastdate uit sheet_holdings (nodig voor berekening missing MXWO0RE)
weights_sectors_dates <-
  readxl::read_xlsx(holdings_file, sheet = "mxwo_sector_wts") |> 
  mutate(date = as.Date(date)) |> 
  pivot_longer(-date) |>
  rename(ticker = name, weight = value)

#perf RE op een datum op een NA datum
perf_RE <- function(date) {
  perf_MXWO <- #perf MXWO vanaf  RE op date
    all_prices_local_long |> 
    filter(ticker == "MXWO") |> 
    mutate(perf_MXWO = PX_LAST/lag(PX_LAST)-1) |>
    filter(date == !!date) |>
    ungroup() |> 
    select(perf_MXWO) |> pull()
  
  weight_RE <- #gewicht RE op date
    weights_sectors_dates |>
    filter(date == dates$date[which(dates$date == !!date)-1]) |> # 1 date eerder
    filter(ticker == "MXWO0RE") |>
    ungroup() |>
    select(weight) |> pull()

  sum_wtd_perf_ex_RE <- #som gewogen perf ex RE
    all_prices_local_long |>
    #alleen MXWO0 en sector indices
    filter(str_detect(ticker, "MXWO0")) %>%
    #alleen datum en eerdere datum
    filter(date %in% c(!!date, dates$date[which(dates$date == !!date)-1])) |>
    #gewichten ernaast hangen
    left_join(weights_sectors_dates, by = c("date", "ticker")) |>
    mutate(weight = ifelse(ticker == "MXWO", 1, weight)) |>
    group_by(ticker) |>
    filter(ticker != "MXWO0RE") |>
    mutate(perf = PX_LAST/lag(PX_LAST)-1,
           wtd_perf = perf * lag(weight)) |>
    ungroup() |>
    reframe(sum_wtd_perf_ex_RE = sum(wtd_perf, na.rm = TRUE)) |> pull()

  tibble(date = !!date, 
         perf_RE_NA = (perf_MXWO - sum_wtd_perf_ex_RE)/weight_RE)
}

#RE perf op NA datums
RE_perf_NA_dates <-
  dates_MXWO0RE_NA |> 
  map_dfr(perf_RE)

# #invoegen in bm_MSCI_en_sector_indices_local
bm_MSCI_en_sector_indices_local <-
  bm_MSCI_en_sector_indices_local |>
  left_join(RE_perf_NA_dates, by = "date") |> 
  mutate(perf_RE_not_NA = ifelse(date == min(date), 0, MXWO0RE/lag(MXWO0RE)-1),
         perf_RE = ifelse(!is.na(perf_RE_not_NA), perf_RE_not_NA, perf_RE_NA),
  RE_index =ifelse(date == min(date), 1, cumprod(1+perf_RE))) |> 
  select(-c(perf_RE_NA, perf_RE_not_NA, perf_RE, MXWO0RE)) |> 
  rename(MXWO0RE = RE_index) 

#naar long format
bm_MSCI_en_sector_indices_local_long <-
 # all_prices_local_long %>%
  #filter(str_detect(ticker, "MXWO"))
  bm_MSCI_en_sector_indices_local |> 
  pivot_longer(-date, names_to = "ticker", values_to = "PX_LAST")

#in all_prices_local_long voegen
bm_MXWO0RE_index_local_long <- 
  bm_MSCI_en_sector_indices_local |> 
  select(date, MXWO0RE) |> 
  mutate(ticker = "MXWO0RE") |> 
  select(date, ticker, PX_LAST = MXWO0RE)

all_prices_local_long <-
  all_prices_local_long |> 
  #oude eruit
  filter(ticker != "MXWO0RE") |> 
  #nieuwe erin
  bind_rows(bm_MXWO0RE_index_local_long)

#EINDE FIX MWWO0RE NA sinds nov 2023
```

```{r bm_MSCI_en_sector_indices_eur}

bm_MSCI_en_sector_indices_eur_long <-
  bm_MSCI_en_sector_indices_local_long %>%
  left_join(ECB_Exchange_rates_long %>% filter(currency == "EURUSD_ECB"), by = "date") %>%
  mutate(PX_LAST = PX_LAST/exchange_rate) %>%
  select(date, ticker, PX_LAST)

bm_MSCI_en_sector_indices_eur <- 
  bm_MSCI_en_sector_indices_eur_long |> 
  pivot_wider(names_from = ticker, values_from = PX_LAST)

bm_prices_eur_long <-
  bm_prices_JPM_MSDEWIN_mixed_monthly_en_snapshot %>%
  left_join(bm_MSCI_en_sector_indices_eur, by = "date") %>%
  pivot_longer(-date) %>%
  rename(ticker = name, PX_LAST = value) %>%
  group_by(ticker)

bm_prices_eur <-
  bm_prices_eur_long %>%
  pivot_wider(values_from = PX_LAST, names_from = ticker)

```

```{r portfolio_downloads_ruw_maandelijkse_VOLK_files_uit_AIRS}

#portfolio_downloads_files inlezen uit spreadsheets genaamd portefeuille yyyymmdd, bv. "VOLK_Vlieger 50RD-50RM 20180930" met extensie xlsx. Daatoe dus opslaan als ...xlsx.

#als op pc of mac, lees VOLK files, maak portfolio_downloads_ruw
#en schrijf weg als portfolio_downloads_ruw_tm_mar25.rds
# if(bij_bavd | bij_pp) {
# portfolio_download_files <-
#     #alleen de VOLK_ files, die lopen tot en met 2025-03-31
#     list.files(str_c(pad_deel1, "portfolio_downloads/")) |> as_tibble() |> filter(str_starts(value, "VOLK_")) |> pull()
# 
# portfolio_downloads_inlezen <- function(filename) {
#   readxl::read_excel(str_c(pad_deel1, "portfolio_downloads/", filename), range = cell_cols("A:J"), col_types = c(rep("text", 2), rep("numeric", 8))) %>%
#     as_tibble() %>%
#     mutate(portfolio_date = filename) |>
#     filter(!str_detect(`Opgelopen rente`, Naam)) |> #zit in separate kolom
#     #onnodige kolommen eruit
#     select(-c(`Begin koers`, Beginwaarde, `Ongerealiseer resultaat`, `% portf.`))
# }
# 
#   #alle ruwe portfolio_downloads onder elkaar
#   portfolio_downloads_ruw_tm_mar25 <- map_dfr(portfolio_download_files, portfolio_downloads_inlezen)
#   write_rds(portfolio_downloads_ruw_tm_mar25, "portfolio_downloads_ruw_tm_mar25.rds")
#} else {
#als niet op pc of mac (op cloud), lees dan "portfolio_downloads_ruw.rds"

#portfolio_downloads_ruw_tm_mar25 t/m maart '25
#niet meer aanpassen
  portfolio_downloads_ruw_tm_mar25 <- read_rds("portfolio_downloads_ruw_tm_mar25.rds")
#}
```

```{r nieuwe_files_AIRS_met_alle_modelportefeuilles_inlezen}
#portfolio_namen in bestandsnamen oude files t/m maart 2025
#juiste volgorde, als in portfolio_levels
portfolio_levels_old_monthly_AIRS_files <- c("50RD-50RM", "Duurzaam-50RD-50RM", "Vlieger 50RD-50RM", "Vlieger_Duurzaam-50RD-50RM", "30RD-70RM", "70RD-30RM", "100RD", "Vlieger 100RD")
portfolio_levels_new_monthly_AIRS_files <- c("50RD-50RM", "Duurzaam-50RD50RM",  "Vlieger 50RD-50RM", "Vlieger Duurz 50RD-50RM",    "30RD-70RM", "70RD-30RM", "100RD", "Vlieger 100RD")

#tabellen van maken voor join in functie hieronder
portfolio_levels_old_monthly_AIRS_files_tabel <- portfolio_levels_old_monthly_AIRS_files |> as_tibble() |> rename(portfolio_date = value)
portfolio_levels_new_monthly_AIRS_files_tabel <- portfolio_levels_new_monthly_AIRS_files |> as_tibble() |> rename(Portefeuille = value)

#tabel voor join
portfolio_levels_old_and_new_monthly_AIRS_files_tabel_en_portfolio_levels <-
  portfolio_levels_new_monthly_AIRS_files_tabel |> 
  bind_cols(portfolio_levels_old_monthly_AIRS_files_tabel) |> 
  bind_cols(portfolio_levels_kolom)

portfolio_download_files_new <- 
  list.files(str_c(pad_deel1, "portfolio_downloads/")) |> as_tibble() |> 
  #alle BEHALVE de VOLK_ files, die lopen tot en met 2025-03-31, 
  # daarna beginnen ze met de datum en bevat de naam "Fondsenlijst
  filter(str_detect(value, "Fondsenlijst")) |> pull()

if(bij_bavd | bij_pp) {
  
  portfolio_downloads_new_inlezen <- function(filename) {
    readxl::read_xlsx(str_c(pad_deel1, "portfolio_downloads/", filename)) |>
    #regel cash
    mutate(FondsOmschrijving = 
             ifelse(is.na(FondsOmschrijving), str_c("Modelportefeuilles " , Portefeuille), FondsOmschrijving)) |>
    select(Naam = FondsOmschrijving, 
           Valuta, 
           Aantal = totaalAantal, 
           Koers = Fondskoers, 
           Marktwaarde = Waarde,
           `Opgelopen rente` = RenteEUR,
           Portefeuille) |> 
    filter(Portefeuille %in% portfolio_levels_new_monthly_AIRS_files) |>
      left_join(portfolio_levels_old_and_new_monthly_AIRS_files_tabel_en_portfolio_levels, by = "Portefeuille") |>
    mutate(portfolio_date = str_c("VOLK_", portfolio_date, " ", str_sub(filename, 1, 8), ".xlsx"),
           Aantal = ifelse(is.na(Aantal), Marktwaarde, Aantal),
           `Opgelopen rente` = ifelse(is.na(`Opgelopen rente`), 0, `Opgelopen rente`),
           Koers = ifelse(is.na(Koers), 0, Koers)) |>
    select(-Portefeuille, -portfolio)
  }

  #alle ruwe portfolio_downloads onder elkaar
  portfolio_downloads_ruw_vanaf_apr25 <- map_dfr(portfolio_download_files_new, portfolio_downloads_new_inlezen)
  write_rds(portfolio_downloads_ruw_vanaf_apr25, "portfolio_downloads_ruw_vanaf_apr25.rds")
} else {
  #als niet op pc of mac (op cloud), lees dan "portfolio_downloads_ruw.rds"
  portfolio_downloads_ruw_vanaf_apr25 <- read_rds("portfolio_downloads_ruw_vanaf_apr25.rds")
}

#is er een tussentijdse update van de portfolio_downloads?
tussentijdse_update_uit_AIRS <-  
  portfolio_download_files_new |> as_tibble() |> 
  filter(str_detect(value, "tussentijds")) |> 
  nrow()

tussentijdse_update_uit_AIRS_date <- 
  portfolio_download_files_new |> as_tibble() |> 
       filter(str_detect(value, "tussentijds")) |> pull() |> str_sub(1, 8) |> ymd()
  
```

```{r portfolio_downloads_ruw_samenvoegen_en_ISIN_erbij}

#isins
naam_isin <- readxl::read_excel(holdings_file, sheet = "naam_isin")

#portfolio_downloads_ruw_tm_mar25 en portfolio_downloads_ruw_vanaf_apr25 samenvoegen
portfolio_downloads_ruw <-
  portfolio_downloads_ruw_tm_mar25  |> 
  bind_rows(portfolio_downloads_ruw_vanaf_apr25) |> 
  #ISINs erbij
  left_join(naam_isin, by = "Naam")# |> 
  #Cash regels CASH_EUR
  #mutate(ISIN = ifelse(str_starts(Naam, "Intern") | str_starts(Naam, "Modelportefeuilles"), "CASH_EUR", ISIN))

```

```{r portfolios_tabel_koersen_AIRS_maken_new_niet_gelukt}
portfolios_tabel_koersen_AIRS_new <- 
  portfolio_downloads_ruw |> 
  mutate(portfolio_date = str_remove(portfolio_date, ".xlsx"),
         date = str_sub(portfolio_date, start = nchar(portfolio_date) - 8),
         date = ymd(date),
         portfolio_AIRS = str_sub(portfolio_date, start = 1, end = nchar(portfolio_date) - 9),
         portfolio_AIRS = str_remove(portfolio_AIRS, "VOLK_"),
         Naam = ifelse(str_starts(Naam, "Intern") | str_starts(Naam, "Modelportefeuilles"), "Cash", Naam),
         name_ = str_replace_all(Naam, " ", "_")) |>  #name_ kun je mee joinen
    
    #portfolio naam erin via join en verwijderen overtollige kolommen
    left_join(portfolio_levels_old_and_new_monthly_AIRS_files_tabel_en_portfolio_levels, by = c("portfolio_AIRS" = "portfolio_date")) |> 
    select(-c(portfolio_date, portfolio_AIRS, Portefeuille)) |> 
    #datums naar ultimo's
    mutate(date = floor_date(date, unit = "month"),
           date = lubridate::rollback(date + months(1))) |> 
    left_join(holdings, by = c("ISIN", "name_"))
```

```{r portfolios_tabel_koersen_AIRS_maken}
#HIER
#allerlei aanpassingen aan formaat, kolommen erbij maken, datum, pf gewicht etc
portfolios_tabel_koersen_AIRS <- 
  portfolio_downloads_ruw %>%
                mutate(portfolio_date = str_remove(portfolio_date, ".xlsx"),
                       date = str_sub(portfolio_date, start = nchar(portfolio_date) - 8),
                       date = ymd(date),
                       portfolio_AIRS = str_sub(portfolio_date, start = 1, end = nchar(portfolio_date) - 9),
                       portfolio_AIRS = str_remove(portfolio_AIRS, "VOLK_")) |> 
                       #portfolio naam erin via join en verwijderen overtollige kolommen
                       left_join(portfolio_levels_old_and_new_monthly_AIRS_files_tabel_en_portfolio_levels, 
                                 by = c("portfolio_AIRS" = "portfolio_date")) |> 
                         select(-c(portfolio_date, portfolio_AIRS, Portefeuille)) |>

                       #NAAMSWIJZIGINGEN
                       mutate(  
                       #eind mei 2020 is de naam van cash in de AIRS files
                       #veranderd van "Intern ..." naar "Modelportefeuilles ..."
                       #code voor veranderen OUDE NAAM in NIEUWE NAAM in de historie
                       #Naam = ifelse(Naam == "OUDE NAAM", "NIEUWE NAAM", Naam),
                       Naam = ifelse(str_starts(Naam, "Intern") | str_starts(Naam, "Modelportefeuilles"), "Cash", Naam),
                       #Naamswijziging Essilor in 2021
                       Naam = ifelse(Naam == "Essilor International", "EssilorLuxottica", Naam),
                       #Naamswijziging RDSA in 2022
                       Naam = ifelse(Naam == "Royal Dutch Shell", "Shell PLC", Naam),
                       #Naamswijziging Cummins in 2022
                       Naam = ifelse(Naam == "Cummins Engine",
                                     "Cummins Inc", Naam),
                       #Naamswijziging VFEM, IWDA, XDWH en WTCH ineens zonder " EUR" achter de naam
                       Naam = ifelse(Naam == "Vanguard FTSE Emerging Mkts Index Fd",
                                     "Vanguard FTSE Emerg. Markets ETF", Naam),
                       #IWDA is iets anders dan IWRD
                       Naam = ifelse(Naam == "SPDR MSCI World Tech ETF EUR",
                                     "SPDR MSCI World Tech ETF", Naam),
                       Naam = ifelse(Naam == "Xtrackers World Health Care EUR",
                                     "Xtrackers World Health Care", Naam),
                       #Naamswijziging LEAD GY in maart 2024, 
                       #oude naam is "Lyxor MSCI Eur ESG Lead UCITS ETF - Acc"
                       #nieuwe naam is "Amundi MSCI Europe ESG Leaders ETF"
                       Naam = ifelse(Naam == "Lyxor MSCI Eur ESG Lead UCITS ETF - Acc",
                                     "Amundi MSCI Europe ESG Leaders ETF", Naam),
                       #nog een wijziging in sep 2025
                       Naam = ifelse(Naam == "Amundi MSCI Europe ESG Leaders ETF",
                       "Amundi MSCI Europe ESG Selec UCITS ETF Acc", Naam),
                       #Naamswijziging MWOP GY in sep 2024, 
                       #oude naam is "Amundi MSCI World ESG Leaders UCITS ETF Acc"
                       #nieuwe naam is "Amundi MSCI World ESG Leaders ETF"
                       Naam = ifelse(Naam == "Amundi MSCI World ESG Leaders UCITS ETF Acc",
                                             "Amundi MSCI World ESG Selec UCITS ETF Acc", Naam),
                       #Naamswijziging MWOP GY in oct 2025, 
                       #oude naam is "Amundi MSCI World ESG Leaders ETF"
                       #nieuwe naam is "Amundi MSCI World ESG Selec UCITS ETF Acc"
                       Naam = ifelse(Naam == "Amundi MSCI World ESG Leaders ETF",
                                     "Amundi MSCI World ESG Selec UCITS ETF Acc", Naam),
                       #Naamswijziging LEAD GY in oct 2025, 
                       #oude naam is "Amundi MSCI Europe ESG Leaders ETF"
                       #nieuwe naam is "Amundi MSCI Europe ESG Selec UCITS ETF Acc"
                       Naam = ifelse(Naam == "Amundi MSCI World ESG Leaders ETF",
                                     "Amundi MSCI Europe ESG Selec UCITS ETF Acc", Naam),
                       Naam = ifelse(Naam == "L` Oreal", 
                                     "LOreal", Naam),
                       #Naamswijziging XDWH GY in mar 2025, 
                       Naam = ifelse(Naam == "Xtrackers World Health Care", 
                                     "Xtrackers MSCI World Health Care", Naam),
                       #Naamswijziging SPPY_GY in mar 2025, 
                       Naam = ifelse(Naam == "SPDR SP500 ESG Leaders ETF", 
                                     "SPDR S&P 500 Leaders UCITS ETF (Acc)", Naam),
                       #Naamswijzigingen NTSCLBE NA in 2012 en 2025, 
                       Naam = ifelse(Naam == "NT World Small Cap ESG Low Carbon" |
                                     Naam == "NT World Small Cap ESG Low Carbon Ind",
                                     "NT Wld SC Low Carbon Eq Index FGR Feeder B", Naam),
                       ## Verander deze namen ook in het holdings sheet in Excel
                       name_ = str_replace_all(Naam, " ", "_"), #name_ kun je mee joinen
                       # Valuta = ifelse(Naam == "Opgelopen rente", "EUR", Valuta),
                       # Aantal = ifelse(Naam == "Opgelopen rente", Marktwaarde, Aantal),
                       Koers = ifelse(Naam %in% c("Cash", "Opgelopen rente"), 1, Koers)) %>%
                #datum naar laatste vd maand (voor de join)
                mutate(date = floor_date(date, unit = "month"),
                       date = lubridate::rollback(date + months(1))) %>%
                       #join met holdings voor ticker, type, sector etc. info
                left_join(holdings, by = "name_") #ISIN van maken
              #  left_join(holdings, by = "_name") #ISIN van maken

```


```{r portfolios_tabel_koersen_AIRS_tussentijdse_update}
portfolios_tabel_koersen_AIRS <- 
  if(tussentijdse_update_uit_AIRS) {
    # Ensure tussentijdse_update_uit_AIRS_date is a Date
    tussentijdse_update_uit_AIRS_date <- as.Date(tussentijdse_update_uit_AIRS_date)
    
    # Update only the rows with the maximum date
    portfolios_tabel_koersen_AIRS |> 
      mutate(date = if_else(
        date == max(date, na.rm = TRUE), 
        tussentijdse_update_uit_AIRS_date, 
        date
      ))
  } else {
    portfolios_tabel_koersen_AIRS
  }       

```

```{r datums_met_meerdere_koersen_NTSCLBE}
datums_met_meerdere_koersen_NTSCLBE <- 
  portfolios_tabel_koersen_AIRS |> 
  select(date, portfolio, name, ticker, Koers_AIRS = Koers)  |> 
  group_by(date, ticker) |> 
  mutate(Aantal_verschillende_AIRS_koersen = n_distinct(Koers_AIRS)) |> 
  filter(Aantal_verschillende_AIRS_koersen > 1) |>
  pull(date) |> 
  unique()
#op die datums, neem de koers van Bloomberg vwb NTSCLBE (zie de chunk hieronder) # VERVALLEN NA overschrijven van deze koersen
```

```{r portfolios_tabel_maken}

portfolios_tabel <-
  portfolios_tabel_koersen_AIRS |> 
                #Bloomberg prijzen in kolom PX_LAST zetten, om te gebruiken in plaats van AIRS prijzen indien nodig
                left_join(all_prices_local_long, by = c("ticker", "date")) |> 
                #join met de ECB exchange rates, zelfde reden
                left_join(ECB_Exchange_rates_long |> mutate(currency = str_sub(currency, 4, 6)), 
                           by = c("date", "Valuta" = "currency")) |> 
                #aanpassing op 5 feb25, alles airs koersen behalve NTSCLBE vanwege meerder koersen op 1 moment
                #mutate(Koers = ifelse(str_detect(ticker, "NTSCL") & date %in% datums_met_meerdere_koersen_NTSCLBE, PX_LAST, Koers)) |> 
                #einde voor ETF's overschakelen op Bloomberg prijzen
                #filter(name_ != "Opgelopen_rente") %>% #schrap die regel, het staat ook in een kolom voor elke obligatie
                group_by(date, portfolio) %>%
                mutate(Marktwaarde = 
                          case_when(type == "Staatsobligatie" ~ Koers/exchange_rate/100 * Aantal + `Opgelopen rente`,
                                     TRUE ~ Koers/exchange_rate * Aantal),
                        weight = Marktwaarde/sum(Marktwaarde)) %>%
                select(-Valuta, -Naam) %>%
                rename(shares = Aantal, 
                       price = Koers, 
                       value_eur = Marktwaarde) %>%
                select(date, portfolio, RDRM, asset, type, sector, name, ticker, shares, price, currency, value_eur, weight, duurzaam) %>%
                arrange(date, portfolio) %>%
                #Splits in portefeuille
                #Apple
                mutate(shares = ifelse(date < as.Date("2020-08-24") & ticker == "AAPL_UW",
                         shares * 4, shares),
                       price = ifelse(date < as.Date("2020-08-24") & ticker == "AAPL_UW",
                       price / 4, price),
                #Google
                       shares = ifelse(date < as.Date("2022-07-20") & ticker == "GOOGL_UW",
                         shares * 20, shares),
                       price = ifelse(date < as.Date("2022-07-20") & ticker == "GOOGL_UW",
                       price / 20, price)
                )


#dividend_info uit blbrg is al split-adjusted
```

```{r etf_levels}

etf_levels <- 
  portfolios_tabel |> ungroup() |> filter(date == lastdate, type == "ETF") |> select(ticker) |> unique() |> pull()
#handmarig was
#etf_levels <- c("IWDA_NA", "SPY5_GY", "SPPY_GY", "SXXPIEX_GY","MWOP_GY", 
#                "LEAD_GY", "IJPA_NA", "XZMJ_GY", "WTCH_NA", "XDWH_GY", "NTSCLBE_NA")

```

```{r portfolios_tabel_lastdate_wegschrijven_beleggingsvoorstel}
portfolios_tabel_lastdate <- portfolios_tabel |> filter(date == lastdate)

#portfolios_tabel_lastdate.csv wegschrijven voor gebruik in Beleggingsvoorstel
if(!bij_bavd) {
  write.csv(portfolios_tabel_lastdate, str_c(pad_deel1, "portfolios_tabel_lastdate.csv"), row.names = TRUE)
}

```

```{r key_rates_en_curve_basis}
#begin Obligaties
key_rates <-
  all_prices_local_long %>%
  pivot_wider(values_from = PX_LAST, names_from = ticker) %>%
  select(date, EONIA:GNTH30YR) %>%
  #EONIA wordt NA dan ESTRON, combineer in ON
  mutate(ON = ifelse(is.na(EONIA), ESTRON, EONIA)) %>%
  select(-c(EONIA, ESTRON)) %>%
  select(date, ON, everything())

key_rates_plus <- key_rates %>%
    mutate(date = as.Date(date)) %>%
    mutate_if(is.numeric, function(x) x/100) %>%
    #50 jaar erin met helling de helft van 10-30
    mutate(GNTH50YR = GNTH30YR + (GNTH30YR - GNTH10YR)/2)

key_rates <- key_rates_plus %>%
    select(-contains("2"), -contains("4"), -contains("8"), -contains("9"))

curve_hist <- function(asof_date) {
  key_rates %>%
    filter(date == asof_date) %>%
    t() %>% as_tibble() %>%
    tail(8) %>%
    rename(par_rate = V1) %>%
    mutate(par_rate = as.numeric(par_rate)) %>%
    mutate(t_curve = c(0, 1, 3, 5, 7, 10, 30, 50)) %>%
    select(t_curve, par_rate) #wat een gedoe
}

#default curve
curve_basis <- curve_hist(lastdate)

curve_hist_plus <- function(asof_date = lastdate) {
  key_rates_plus <-
    key_rates_plus %>%
    filter(date == asof_date) %>%
    t() %>% as_tibble()
  date <- key_rates_plus %>%
    head(1) %>% as.character() %>% as.Date()
  key_rates_plus <-
    key_rates_plus %>% tail(12) %>% rename(par_rate = V1) %>%
    mutate(par_rate = as.numeric(par_rate)) %>%
    mutate(t_curve = c(0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 30, 50)) %>%
    mutate(date = date) %>% select(date, t_curve, par_rate)  #wat een gedoe
  key_rates_plus
}
```

```{r par_curve_05}
par_curve_05 <-
  tribble(~t_curve, ~par_rate, 0, 0.02, 1, 0.02, 3, 0.034, 5, 0.042,7, 0.0452, 10, 0.05, 30, 0.055)
```

```{r from_par_to_spot_curve}
#par_curve_int_05 <- tibble(t_int = 0:30) %>% mutate(par_rate_int = with(par_curve, approx(t_curve, par_rate, t_int))$y)

#input: par_rates 1, 3, 5, etc
#output: discount factors 1:30
par_to_df <- function(par_curve) {
  #eerst van 1,3,5, etc naar 1:30 interpoleren
  par_curve_int <- tibble(t_int = 1:50) %>%
    mutate(par_rate_int = with(par_curve, approx(t_curve, par_rate, t_int))$y)
  #dan van par naar df
  par_curve_int <- mutate(par_curve_int, df = 1/(1 + par_rate_int))
  for (row in 2:dim(par_curve_int)[1]) {
    par_curve_int[row,] <- mutate(par_curve_int[1:row,],
        df = (1 - par_rate_int*lag(cumsum(df)))/(1 + par_rate_int))[row,]
  }
  #dan van df 0:50 naar spot 0:50
  par_curve_int %>%
    mutate(spot_rate = ifelse(t_int == 0|t_int == 1, par_rate_int, (1/df)^(1/t_int)-1)) %>%
  #dan van spot 0:50 naar spot 1,3,5, etc.
  #filter(t_int %in% c(0, 1, 3, 5, 7, 10, 20, 30, 50)) %>%
  mutate(df2 = (1 + spot_rate)^-t_int) %>%
    rename(t_curve = t_int) %>%
    add_row(t_curve = 0, df = 1) %>% arrange(t_curve) %>%
    select(t_curve, df)
}

par_to_spot <- function(par_curve, i, j) {
  #curve scenario erin
  if(i)
  par_curve <- par_curve %>% mutate(par_rate = ifelse(t_curve == i, par_rate + j/100, par_rate))
  #1:30 maken interpoleren
  tibble(t_int = 1:50) %>%
    mutate(par_rate_int = with(par_curve, approx(t_curve, par_rate, t_int))$y) %>% rename(t_curve = t_int) %>%
  #samenvoegen met df en spot
  left_join(par_to_df(par_curve), by = "t_curve") %>%
    mutate(spot =(1/df)^(1/t_curve)-1,
           par_minus_spot = par_rate_int - spot) %>%
    rename(par_rate = par_rate_int) %>%
    select(t_curve, par_rate,spot) %>%
    rename(!!str_c("par", i) := par_rate, !!str_c("spot", i) := spot)
}
```

```{r bond_cash_flows}

# bond_date_cf1_old <- function(today, mat_dat) {
#   settle_date <- ymd(today)
#   #is cf dit of volgend jaar?
#   if(
#     #make_date(year(settle_date), month(mat_dat), day(mat_dat)) < settle_date) {
#     ceiling_date(make_date(year(today), month(mat_dat), day(mat_dat)), unit = "month") %m-% days(1) < settle_date) {
#         date_cf1 <- ceiling_date(make_date(year(settle_date), month(mat_dat), day(mat_dat)) %m+% years(1), unit = "months") %m-% days(1)}
#       # date_cf1 <- make_date(year(settle_date) + 1, month(mat_dat), day(mat_dat))}
#   else  
#   #{date_cf1 <- make_date(year(settle_date), month(mat_dat), day(mat_dat))}
#   {date_cf1 <- ceiling_date(make_date(year(settle_date), month(mat_dat), day(mat_dat)), unit = "months") %m-% days(1)}
#   date_cf1
# }
# 
bond_date_cf1 <- function(today, mat_dat) {
  settle_date <- ymd(today) + days(1)
  #is cf dit of volgend jaar?
  if(
    #make_date(year(settle_date), month(mat_dat), day(mat_dat)) < settle_date) {
    ceiling_date(make_date(year(today), month(mat_dat), day(mat_dat)), unit = "month") %m-% days(1) < settle_date) {
        date_cf1 <- ceiling_date(make_date(year(settle_date), month(mat_dat), day(mat_dat)) %m+% years(1), unit = "months") %m-% days(1)}
      # date_cf1 <- make_date(year(settle_date) + 1, month(mat_dat), day(mat_dat))}
  else
  #{date_cf1 <- make_date(year(settle_date), month(mat_dat), day(mat_dat))}
  {date_cf1 <- ceiling_date(make_date(year(settle_date), month(mat_dat), day(mat_dat)), unit = "months") %m-% days(1)}
  date_cf1
}
# bond_cf <- function(today, coupon, mat_dat) {
# #cashflows
#   settle_days <- 0
#   settle_date <- ymd(today) + days(settle_days)
#   #aantal cfs en cashflows
#   nr_cfs <- settle_date %--% ymd(mat_dat) %/% years(1) + 1
#   cfs <- c(rep(coupon, nr_cfs - 1), 1 + coupon) %>% tibble::enframe() %>% rename(i=name, cf =value)
#   #dates
#   date_cf1 <- bond_date_cf1(today, mat_dat)
#   #dates_cfs <- (date_cf1 + years(0:(nr_cfs-1))) %>% as_tibble() %>% rename(date = value) %>% mutate(i= 1:n())
#   dates_cfs <- (date_cf1 %m+% years(0:(nr_cfs-1))) %>% as_tibble() %>% rename(date = value) %>% mutate(i = 1:n())
#   #times
#   days_until_cf1 <- difftime(date_cf1, settle_date, unit = "days") %>% as.integer()
#   t <- days_until_cf1/365 + 0:(nr_cfs-1)
#   t <- t %>% tibble::enframe() %>% rename(i=name,t =value)
#   #join, tabel met een teller, t, datum en cashflows
#   bond_cf <- dates_cfs %>% left_join(cfs, by = "i") %>% 
#     left_join(t, by = "i") %>% select(i, date,t, cf)
#   bond_cf
# }
# 
# 


```

```{r curve_plus_delta}
# 
curve_delta_nul <-
  as_tibble(curve_basis$t_curve) %>%
  rename(t_curve = value) %>%
  mutate(delta = 0)

curve_plus_delta <- function(today = lastdate, curve_delta = curve_delta_nul, OAS = 0) {
  curve_hist(today) %>%
  left_join(curve_delta, by = "t_curve") %>%
  mutate(par_rate = par_rate + delta + OAS) %>%
  select(t_curve, par_rate)
}
# 
# curve_delta_punt <- function(curve_punt, schok_pct){
#   as_tibble(curve_basis$t_curve) %>%
#   rename(t_curve = value) %>%
#   mutate(delta = ifelse(t_curve == curve_punt, schok_pct, 0))
# }

# bond_fp <- function(today = lastdate, coupon, mat_dat, curve_delta = curve_delta_nul, OAS = 0) {
#   if(today > mat_dat) {NA}
#   else {
#     bond_cf(today, coupon, mat_dat) %>% #cashflow tabel
#     #curve delta argument nodig ivm krd berekening verderop
#     #curve delta is een schok (delta) op een punt of de hele curve
#     mutate(df_int = with(par_to_df(curve_plus_delta(today, curve_delta, OAS)), approx(t_curve, df, t))$y) %>%
#     #df's interpoleren rekening houdend met curve + spread
#     mutate(cw_cf = cf*df_int) %>% #cw cashflow
#     summarise(full_price = sum(cw_cf)) #sommeren is full price
#   }
# }

# bond_dur <- function(today = lastdate, coupon, mat_dat, curve_delta = curve_delta_nul, OAS = 0, mod = TRUE) {
#   if(today > mat_dat) {NA}
#     else {
#     #looptijd berekenen
#     remaining_maturity <- (as.Date(mat_dat) - as.Date(today))/365 %>% as.double()
#     #yield opzoeken in par rate tabel
#     bond_yield <-
#       approx(curve_plus_delta(as.Date(today), curve_delta, OAS)$t_curve,
#                           curve_plus_delta(as.Date(today), curve_delta, OAS)$par_rate, remaining_maturity)$y
#      #macaulay duration
#      teller <-
#        bond_cf(today, coupon, mat_dat) %>%
#        mutate(pv_cf = cf*(1+bond_yield)^-t,
#               t_pv_cf = t*pv_cf) %>%
#        summarise(dur = sum(t_pv_cf)) %>% pull()
#      noemer <-
#       bond_fp(today, coupon, mat_dat, curve_delta, OAS) %>% pull()
#      dur <- teller/noemer
#      #modified duration
#      if(mod == TRUE) {
#        dur/(1 + bond_yield)
#      } else {
#        dur
#      }
#     }
#   }

#####
# bond_cp_cm <- function(today, cm = 10, coupon) {
#  # if(today > mat_dat) {NA}
#   #  else {
#     #looptijd berekenen
#     #remaining_maturity <- (as.Date(mat_dat) - as.Date(today))/365 %>% as.double()
#     #yield opzoeken in par rate tabel
#     next_month_date <- ceiling_date(as.Date(today) %m+% months(1), 'month') %m-% days(1)
#     mat_date <- as.Date(today) %m+% years(cm)
#     bond_yield <-
#       approx(curve_plus_delta(as.Date(today))$t_curve,
#                           curve_plus_delta(as.Date(today))$par_rate, cm)$y
#     bond_yield_eom <-
#       approx(curve_plus_delta(next_month_date)$t_curve,
#                           curve_plus_delta(next_month_date)$par_rate, cm)$y
#      #macaulay duration
#      teller <-
#        bond_cf(today = as.Date(today), coupon = coupon, mat_dat = mat_date) %>%
#        mutate(pv_cf = cf*(1+bond_yield)^-t,
#               t_pv_cf = t*pv_cf) %>%
#        summarise(dur = sum(t_pv_cf)) %>% pull()
#      full_price <- bond_fp(today = as.Date(today), 
#               coupon = coupon, mat_dat = mat_date) %>% pull()
#      clean_price <-
#       bond_cp(today = as.Date(today), 
#               coupon = coupon, mat_dat = mat_date) %>% pull()
#      clean_price_eom <-
#       bond_cp(today = next_month_date, 
#               coupon = coupon, mat_dat = mat_date) %>% pull()
#      dur <- teller/full_price
#       #modified duration
#      trr = (clean_price_eom + coupon/12)/clean_price - 1
#     tribble(~today, ~next_month, ~mat_date, ~mat, ~coupon, ~yield, ~yield_eom, ~price, ~price_eom, ~teller, ~noemer, ~moddur, ~trr,
#              today, next_month_date, mat_date, cm, coupon, bond_yield, bond_yield_eom, clean_price, clean_price_eom,  teller, full_price, dur/(1 + bond_yield), trr)
# }

# bond_cp_hist_cm_trr <- function(coupon, mat_dat, curve_delta = curve_delta_nul, OAS= 0) {
#   map(key_rates$date, bond_cp_hist_cm, coupon, mat_dat, curve_delta, OAS) %>%
#     bind_rows %>%
#     mutate(date = key_rates$date,
#     accrual = coupon/12,
#     trr = clean_price + cumsum(accrual)) %>% as_tibble() %>%
#     select(date, trr)
# }

####
# bond_convexity <- function(today = lastdate, coupon, mat_dat, curve_delta = curve_delta_nul, OAS = 0) {
#     #looptijd berekenen
#     remaining_maturity <- (as.Date(mat_dat) - as.Date(today))/365 %>% as.double()
#     #yield opzoeken in par rate tabel
#     bond_yield <-
#       approx(curve_plus_delta(as.Date(today), curve_delta, OAS)$t_curve,
#                           curve_plus_delta(as.Date(today), curve_delta, OAS)$par_rate, remaining_maturity)$y
#      #convexity
#      bond_cf(today, coupon, mat_dat) %>%
#      mutate(term = t*(t+1)*cf*(1+bond_yield)^-(t+2)) %>%
#      summarise(convexity = sum(term)) %>% pull()
# }
```

```{r benega_dur_en_mat_hist}

benega_mat_hist <-
  monthly_bdh_fields |> 
  filter(ticker == "BENEGA", field == "BX210") |> 
  select(date, BENEGA_looptijd = value) |> 
  bind_rows(
    daily_bdh_fields_mtd |> 
    filter(ticker == "BENEGA") |> 
    filter(field == "BX210") |> 
    select(date, BENEGA_looptijd = value) |> 
    filter(date == snapshot_date)
  )

benega_dur_hist <-
  monthly_bdh_fields |> 
  filter(ticker == "BENEGA", field == "BX228") |> 
  select(date, BENEGA_mod_dur = value) |> 
  bind_rows(
    daily_bdh_fields_mtd |> 
    filter(ticker == "BENEGA") |> 
    filter(field == "BX228") |> 
    select(date, BENEGA_mod_dur = value) |> 
    filter(date == snapshot_date)
  ) 

benega_dur_en_mat_hist <-
  benega_mat_hist |> 
  left_join(benega_dur_hist, by = "date") |> 
  #fix 1ste vd maand
  unique() |> 
  #vanaf start_date_attr aanvullen met laatste waarde
  right_join(dates |> filter(date >= start_date_sector_indices), by = "date") |>  
  arrange(date) # |> 
  #fill(BENEGA_mod_dur, .direction = "up") |> 
  #fill(BENEGA_looptijd, .direction = "up")


benega_date_yield <- function(today = lastdate) {
  #benega looptijd
  benega_date_looptijd <-
    benega_dur_en_mat_hist %>%
    filter(date == today) %>%
    select(BENEGA_looptijd) %>% pull()
  #yield opzoeken in par rate tabel op die datum
  benega_yld <- approx(curve_plus_delta(as.Date(today))$t_curve,
                       curve_plus_delta(as.Date(today))$par_rate, benega_date_looptijd)$y
  #benega_yield
  tribble(~date, ~benega_yield,
             as.Date(today), benega_yld)
}

```

```{r bond_ticker_functies}
#uit ticker info halen
bond_ticker_mat_dat <- function(ticker) {
  split_ticker <- str_split(ticker, "_")
  mmyy <- split_ticker[[1]][2]
  yystring <- str_sub(mmyy, str_count(mmyy) - 1, str_count(mmyy))
  yy <- yystring %>% as.numeric()
  mm <- str_remove(mmyy, yystring) %>% as.numeric()
  make_date(yy+2000,mm, 15)
}
#
bond_ticker_coupon <- function(ticker) {
 split_ticker <- str_split(ticker, "_")
 str_remove_all(split_ticker[[1]][1], "[abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ]") %>% as.numeric()/100
}

bond_days_accrued <- function(today, mat_dat){
  365-difftime(bond_date_cf1(today, mat_dat), today, unit = "days") %>% as.integer()
}

bond_accrued <- function(today, coupon, mat_dat){
  bond_days_accrued(today,mat_dat)/365*coupon
}

bond_ticker_accrued <- function(today, ticker) {
  bond_accrued(today, bond_ticker_coupon(ticker), bond_ticker_mat_dat(ticker))
}

```

```{r div_EUR_portfolios_per_date}

#div per portfolio per datum, gebruik in RDRM attributie en cash positie snapshot
div_EUR_portfolios_per_date <-
  # if(snapshot_date > lastdate) {
  #   portfolios_tabel %>%
  #   #een snapshot datum eronder plakken anders komen daar geen dividenden of NA's in
  #   bind_rows(portfolios_tabel %>% filter(date == max(portfolios_tabel$date)) %>% mutate(date = snapshot_date)) %>%
  #   left_join(dividends_EUR_month_end_until_snapshot_date, by = c("date", "ticker")) %>%
  #   mutate(div_EUR_net = ifelse(is.na(div_EUR_net), 0, div_EUR_net),
  #          div_EUR_net = shares * div_EUR_net) %>%
  #   group_by(date, portfolio) %>%
  #   summarize(div_EUR_net = sum(div_EUR_net))
  # } else {
    portfolios_tabel %>%
    #geen snapshot datum eronder plakken anders komen daar geen dividenden of NA's in
    left_join(dividends_EUR_month_end, by = c("date", "ticker")) %>%
    mutate(div_EUR_net = ifelse(is.na(div_EUR_net), 0, div_EUR_net),
           div_EUR_net = shares * div_EUR_net) %>%
    group_by(date, portfolio) %>%
    summarize(div_EUR_net = sum(div_EUR_net))
#  }

```

```{r NTSCLBE_dec_2020_dubbel}
#NTSCLBE heeft twee verschillende koersen en dat kan niet
#hier aanpassen, niet in VOLK bestanden
NTSCLBE_dec_2020 <-
  portfolios_tabel %>% filter(date == "2020-12-31", ticker == "NTSCLBE_NA") %>% ungroup() %>% select(price) %>% tail(1) %>% as.double()

portfolios_tabel <-
  portfolios_tabel  %>%
  mutate(price = ifelse(date == "2020-12-31" & ticker == "NTSCLBE_NA", NTSCLBE_dec_2020, price))
```

```{r CASH_toevoegen}
 #CASH = 1 toevoegen
CASH_prices <-
  dates %>%
  mutate(ticker = "CASH", PX_LAST = 1)

all_prices_local_long <-
  all_prices_local_long %>%
  bind_rows(CASH_prices)
```

```{r bonds_NL_cashflows_this_month_before_snapshot_date}
#laatste datum uit AIRS (hetzij laatste ultimo, hetzij laatste tussentijdse update)
last_date_portfolios_tabel_uit_AIRS <-
  portfolios_tabel %>%
  ungroup() |>
  filter(date == max(date)) %>%
  select(date) %>% head(1) |>
  pull()
# 
#ontvangen coupons na lastdate en voor snapshot_date

 # bonds_NL_cashflows_this_month_before_snapshot_date_by_pf_ticker <-
 #  #simpeler oplossing ipv die met bond_date_cf1
 #  #maturity kan er misschien nog eenvoudig bij
 #  portfolios_tabel %>%
 #    select(date, portfolio, type, ticker, shares, currency) %>%
 #    filter(date == lastdate, str_detect(type, "obligatie")) |>
 #  mutate(lastdate = lastdate,
 #         snapshot_date = snapshot_date) |>
 #  rowwise() |>
 #  mutate(mat_dat = bond_ticker_mat_dat(ticker),
 #         coupon_rate = bond_ticker_coupon(ticker)) |>
 #  #na rowwise ungroup
 #  ungroup() |>
 #  mutate(coupon_date = make_date(year(lastdate), month(mat_dat), day(mat_dat)),
 #         coupon_betaald = ifelse(coupon_date > last_date_portfolios_tabel_uit_AIRS & coupon_date < (snapshot_date + 2), TRUE, FALSE),
 #         coupons = ifelse(coupon_betaald, coupon_rate * shares, 0)) |>
#  select(date, portfolio, ticker, shares, coupon_date, mat_dat, coupons, currency)
# 
#ontvangen coupons na lastdate en voor snapshot_date
# bonds_NL_cashflows_this_month_before_snapshot_date_by_pf_ticker <-
#   portfolios_tabel %>%
#   select(date, portfolio, ticker, shares) %>%
#   filter(date == lastdate, str_detect(ticker, "NL")) %>%
#   rowwise() %>%
# #  mutate(next_cf_date = bond_date_cf1(lastdate, bond_ticker_mat_dat(ticker))) %>%
#   mutate(next_cf_date = bond_date_cf1(lastdate, bond_ticker_mat_dat(ticker))) %>%
# #  mutate(coupons = ifelse(next_cf_date < lastdate %m+% months(1) & snapshot_date > next_cf_date, shares * bond_ticker_coupon(ticker), 0),
#   mutate(coupons = ifelse(next_cf_date <= lastdate %m+% months(1) & snapshot_date >= next_cf_date, shares * bond_ticker_coupon(ticker), 0),
#          currency = "EUR") %>%
#   rename(coupon_date = next_cf_date)

#bonds_NL_cashflows_this_month_before_snapshot_date <- #deze gaat in portfolios_tabel
#   portfolio_levels_kolom |> mutate(coupons = 0)
# 
bonds_NL_cashflows_this_month_before_snapshot_date <-
  # bonds_NL_cashflows_this_month_before_snapshot_date_by_pf_ticker %>%
  # group_by(portfolio) %>%
  # summarise(coupons = sum(coupons)) %>%
  # ungroup() %>%
  # bind_rows(tribble(~portfolio, ~coupons, "RD100", 0, "VP100", 0))
  portfolio_levels_kolom |> 
  mutate(coupons = 0)

```

```{r portfolios_tabel_snapshot}

#snapshot portfolios_tabel (uitgaande van onveranderde holdings en cash opgehoogd met dividenden)
#dit alleen doen als snapshot_date > lastdate?
#toevoeging na Fondsenlijst in portfolio_downloads: als er geen nieuwe tussentijdse fondsenlijst is

div_EUR_portfolios_per_date_snapshot_date <- tibble(date = snapshot_date, portfolio = portfolio_levels, div_EUR_net = 0)

div_EUR_portfolios_per_date_incl_snapshot_date <- 
  div_EUR_portfolios_per_date |> 
  bind_rows(div_EUR_portfolios_per_date_snapshot_date)


#als snapshot_date groter dan laatste AIRS datum (ook de tussentijdse)
if(snapshot_date > last_date_portfolios_tabel_uit_AIRS) {
  portfolios_tabel_snapshot <-
    portfolios_tabel %>%
    filter(date == max(.$date)) %>% #laatste gedownloade bestanden
    mutate(date = as.Date(snapshot_date)) |> 
           #nieuwe datum
    left_join(all_prices_local_long %>% #nieuwe prijzen
                ungroup() %>%
                select(date, ticker, PX_LAST),
              by = c("date", "ticker")) %>%
    mutate(price = PX_LAST) %>%
    select(-PX_LAST) %>%
    left_join(ECB_Exchange_rates_long %>% #wisselkoersen
                mutate(currency = str_sub(currency, 4, 6)),
              by = c("currency", "date")) %>%
    mutate(price = ifelse(type == "Staatsobligatie", price / 100, price)) %>%
    #dividenden tussen lastdate en snapshot_date erbij
    left_join(div_EUR_portfolios_per_date_snapshot_date %>%
                filter(date == snapshot_date),
              by = c("portfolio", "date")) %>%
    mutate(shares = ifelse(ticker == "CASH", shares + div_EUR_net, shares)) %>%
    #
    select(-div_EUR_net) %>%
    #hier couponnen mtd erbij
    left_join(bonds_NL_cashflows_this_month_before_snapshot_date, by = c("portfolio")) %>%
    mutate(shares = ifelse(ticker == "CASH", shares + coupons, shares)) %>%
    select(-coupons) %>%
    rowwise %>%
    mutate(accrued = ifelse(type == "Staatsobligatie", bond_ticker_accrued(snapshot_date, ticker), 0)) %>%
    mutate(price = ifelse(ticker == "CASH", 1, price),
           value_eur = shares * (price + accrued)/exchange_rate,
           price = ifelse(type == "Staatsobligatie", price * 100, price)) %>%
    select(-exchange_rate, -accrued) %>%
    #gewichten vervangen
    ungroup() %>%
    group_by(portfolio) %>%
    mutate(weight = value_eur/sum(value_eur))
  } else if(snapshot_date == last_date_portfolios_tabel_uit_AIRS) {
    portfolios_tabel_snapshot <- 
      portfolios_tabel |> 
      filter(date == snapshot_date)
  }
#zomaar wat 
  #als er een tussentijdse update was ... dan moeten die regels er weer uit
  if(tussentijdse_update_uit_AIRS) {
      if(tussentijdse_update_uit_AIRS_date < snapshot_date) {
      portfolios_tabel <-
         bind_rows(portfolios_tabel, portfolios_tabel_snapshot) |> 
         #... dan moeten die regels er weer uit
         filter(date != last_date_portfolios_tabel_uit_AIRS)
      }
    }  else {
    portfolios_tabel <- 
      bind_rows(portfolios_tabel, portfolios_tabel_snapshot)
  }

```

```{r all_prices_local_samenvoegen}

#AIRS obligatiekoersen voor zover beschikbaar (anders dan bloomberg) gebruiken, uit portfolios_tabel (dates zijn al op ultimo)
AIRS_obligatiekoersen_long <-
  portfolios_tabel %>%
  ungroup() %>%
  filter(str_detect(ticker, "T1") | str_detect(ticker, "NL")) %>%
  select(date, ticker, price) %>%
  arrange(ticker, date) %>%
  unique()

all_prices_local_long <-
  all_prices_local_long %>%
  left_join(AIRS_obligatiekoersen_long, by = c("date", "ticker")) %>%
  mutate(PX_LAST = ifelse(is.na(price), PX_LAST, price)) %>%
  select(-price)

all_prices_local <-
  all_prices_local_long %>%
  pivot_wider(names_from = ticker, values_from = PX_LAST)
```

```{r prices_naar_euros}

ECB_Exchange_rates_long_voor_join <-
  ECB_Exchange_rates_long %>%
              mutate(CRNCY = str_sub(currency, 4, 6)) %>%
              select(date, CRNCY, exchange_rate, currency)

#omrekenen naar EUR
all_prices_eur_long <-
  all_prices_local_long %>%
  #CRNCY kolom erbij
  left_join(currencies, by = "ticker") %>%
  #wisselkoersen erbij
  left_join(ECB_Exchange_rates_long_voor_join, by = c("date", "CRNCY")) %>%
  #benchmarks ertussen maar MSDEWIN en MXWO.. niet, anders dubbel
  bind_rows(bm_prices_eur_long %>%
              filter(ticker != "MSDEWIN", !str_detect(ticker, "MXWO")) %>%
              mutate(CRNCY = "EUR", exchange_rate = 1)) %>%
  mutate(price_eur = PX_LAST/exchange_rate) %>%
  #currencies kunnen eruit
  filter(!str_detect(ticker, "_ECB")) |>
  select(-exchange_rate, - CRNCY, -currency, -PX_LAST) |> 
  mutate(price_eur = ifelse(ticker == "CASH", 1, price_eur))

all_prices_eur <-
  all_prices_eur_long %>%
  pivot_wider(values_from = price_eur, names_from = ticker)

```

# Portefeuilleverdeling

## Portefeuille-overzicht

```{r holdings}

#holdings is regels met aantal aandelen
# holdings_dates_long <-
#   portfolios_tabel %>%
#   left_join(holdings, by = "ticker") %>%
#   select(date, pf, ticker, shares)
# 
# pf_holdings <- function(portfolio = "VP100", asof_date = lastdate) {
#   holdings_dates_long %>% filter(date == asof_date, pf == !!pf) %>%
#   left_join(holdings, by = "ticker") %>% filter(shares > 0) %>% ungroup() %>% select(ticker:RDRM)
# }

```

```{r pf_portfolio}

pf_portfolio <- function(portfolio = "RD50", asof_date = lastdate) {
    portfolios_tabel %>% filter(portfolio == !!portfolio, date == asof_date) %>%
        ungroup() %>%
        select(RDRM, asset, sector, type, name, ticker, shares, price, currency, value_eur, weight)
}

pf_weights <- function(portfolio = "VP100", asof_date = lastdate) {
  pf_portfolio(portfolio, asof_date) %>% select(ticker, weight)
}

#pf_weight in RM
pf_weight_rm <- function(portfolio = "RD50") {
  portfolios_tabel %>%
    filter(date == lastdate, portfolio == !!portfolio) %>%
    filter(RDRM == "RM") %>%
    ungroup() %>%
    summarize(rm = sum(weight)) %>%
    pull()
}

```

```{r gt_functies}

#gt functies
gt_last_row_bold <- function(gt_tbl) {
  gt_tbl |> 
  tab_style(
    style = list(cell_text(weight = "bold")),
    locations = cells_body(rows = length(everything())
    )
  )
}
gt_first_row_bold <- function(gt_tbl) {
  gt_tbl |> 
  tab_style(
    style = list(cell_text(weight = "bold")),
    locations = cells_body(rows = 1
    )
  )
}

gt_data_colors <- function(gt_tbl, columns) {
  gt_tbl |> 
  data_color(columns = columns, 
    fn = scales::col_bin(
    bins = c(-Inf, -.004, 0.004, Inf),
    palette = c("red3", "gray30", "gray30", "forestgreen")),
    apply_to = "text"
  )
}

gt_portfolio_colors <- function(gt_tbl) {
  gt_tbl |>
  tab_style(style = list(cell_text(color = portfolio_colors[1])), locations = cells_body(columns = c(portfolio), rows = portfolio == portfolio_levels[1])) |> 
  tab_style(style = list(cell_text(color = portfolio_colors[2])), locations = cells_body(columns = c(portfolio), rows = portfolio == portfolio_levels[2])) |>
  tab_style(style = list(cell_text(color = portfolio_colors[3])), locations = cells_body(columns = c(portfolio), rows = portfolio == portfolio_levels[3])) |>
  tab_style(style = list(cell_text(color = portfolio_colors[4])), locations = cells_body(columns = c(portfolio), rows = portfolio == portfolio_levels[4])) |>
  tab_style(style = list(cell_text(color = portfolio_colors[5])), locations = cells_body(columns = c(portfolio), rows = portfolio == portfolio_levels[5])) |>
  tab_style(style = list(cell_text(color = portfolio_colors[6])), locations = cells_body(columns = c(portfolio), rows = portfolio == portfolio_levels[6])) |>
  tab_style(style = list(cell_text(color = portfolio_colors[7])), locations = cells_body(columns = c(portfolio), rows = portfolio == portfolio_levels[7])) |> 
  tab_style(style = list(cell_text(color = portfolio_colors[8])), locations = cells_body(columns = c(portfolio), rows = portfolio == portfolio_levels[8]))
  # data_color(
  #   columns = "portfolio",
  #   apply_to = c("text"),
  #   palette = portfolio_colors,
  #   ordered = TRUE
  # )
}

gt_add_dividers_right <- function(gt_tbl, columns) {
  gt_tbl |> 
  gt_add_divider(
    columns = columns,
    sides = "right",
    color = "grey60",
    style = "solid",
    weight = px(1.5),
    include_labels = FALSE
  ) 
}

gt_first_col_bold <- function(gt_tbl) {
  gt_tbl |> 
  tab_style(
    style = list(cell_text(weight = "bold")),
    locations = cells_body(columns = 1))   
}

gt_delete_first_col_label <- function(gt_tbl) {
  gt_tbl |> #eerste col targeten niet gevonden dus ...
  cols_label(
    contains("...") ~ " ",
    contains("asset") ~ " ",
    contains("sector") ~ " ",
    contains("regio") ~ " ",
    contains("portfolio") ~ " ",
    contains("date") ~ " "
  )
}

gt_cols_align <- function(gt_tbl) {
  gt_tbl |> 
  #links uitlijnen bij tekst
  cols_align(
    align = "left",
    columns = !where(is.numeric)
  ) |>
  #rechts uitlijnen bij getallen
  cols_align(
    align = "right",
    columns = where(is.numeric)
  ) 
}

gt_font_padding_align <- function(gt_tbl) {
  gt_tbl |> 
  tab_options(table.font.size = 11,
              data_row.padding = px(5), #regelhoogte
              table.align = "center") #midden op de pagina
}


gt_container_scroll <- function(gt_tbl) {
  gt_tbl |> 
  tab_options(
    container.height = "480px"
  ) |> 
  opt_css( #om bovenste rij te bevriezen
    css = "
    #one .gt_col_heading {
    position: sticky;
    top: 0;
    }
    thead th:first-child {
    left: 0;
    z-index: 1;
    }
    ")
}

  # #one .gt_stub {
    # position: sticky;
    # left: 0;
    # }
    # 
    

    # thead th:first-child {
    # left: 0;
    # z-index: 2;
    # }

#gt_functie voor pfs ou tabellen
gt_pfs_ou <- function(gt_tbl) {
  gt_tbl |> 
  cols_label(starts_with(c(portfolio_levels))|starts_with(c(portfolio_levels))|starts_with("weight") ~ " pf",
             starts_with("bm") ~ "BM",
             starts_with("OU") ~ "OU") |> 
  tab_spanner(columns = 2:4, label = portfolio_levels[1], id = portfolio_levels[1]) |> 
  tab_spanner(columns = 5:7, label = portfolio_levels[2], id = portfolio_levels[2]) |>
  tab_spanner(columns = 8:10, label = portfolio_levels[3], id = portfolio_levels[3]) |>
  tab_spanner(columns = 11:13, label = portfolio_levels[4], id = portfolio_levels[4]) |>
  tab_spanner(columns = 14:16, label = portfolio_levels[5], id = portfolio_levels[5]) |>
  tab_spanner(columns = 17:19, label = portfolio_levels[6], id = portfolio_levels[6]) |>
  tab_spanner(columns = 20:22, label = portfolio_levels[7], id = portfolio_levels[7]) |>
  tab_spanner(columns = 23:25, label = portfolio_levels[8], id = portfolio_levels[8]) |>
  gt_add_dividers_right(columns = seq(1, 22, 3)) |> 
  gt_data_colors(columns = seq(4, 25, 3)) |>
  gt_delete_first_col_label() |> 
  gt_first_col_bold() |> 
  gt_last_row_bold() |> 
  tab_style(style = list(cell_text(weight = "bold")), 
            locations = cells_body(columns = starts_with("OU"))) |> 
  cols_width(
    contains("f") ~ px(20),
    contains("M") ~ px(20),
    contains("U") ~ px(20),
    contains("ortfolio") ~ px(130)
    ) |> 
  tab_style(style = cell_text(color = portfolio_colors[1], weight = "bold"), locations = cells_column_spanners(spanners = portfolio_levels[1])) |> 
  tab_style(style = cell_text(color = portfolio_colors[2], weight = "bold"), locations = cells_column_spanners(spanners = portfolio_levels[2])) |>
  tab_style(style = cell_text(color = portfolio_colors[3], weight = "bold"), locations = cells_column_spanners(spanners = portfolio_levels[3])) |>
  tab_style(style = cell_text(color = portfolio_colors[4], weight = "bold"), locations = cells_column_spanners(spanners = portfolio_levels[4])) |>
  tab_style(style = cell_text(color = portfolio_colors[5], weight = "bold"), locations = cells_column_spanners(spanners = portfolio_levels[5])) |>
  tab_style(style = cell_text(color = portfolio_colors[6], weight = "bold"), locations = cells_column_spanners(spanners = portfolio_levels[6])) |>
  tab_style(style = cell_text(color = portfolio_colors[7], weight = "bold"), locations = cells_column_spanners(spanners = portfolio_levels[7])) |> 
  tab_style(style = cell_text(color = portfolio_colors[8], weight = "bold"), locations = cells_column_spanners(spanners = portfolio_levels[8]))
}

gt_col_pfs_colors <- function(gt_tbl) {
  gt_tbl |>   
  tab_style(style = cell_text(color = portfolio_colors[1], weight = "bold"), locations = cells_column_labels(columns = portfolio_levels[1])) |> 
  tab_style(style = cell_text(color = portfolio_colors[2], weight = "bold"), locations = cells_column_labels(columns = portfolio_levels[2])) |> 
  tab_style(style = cell_text(color = portfolio_colors[3], weight = "bold"), locations = cells_column_labels(columns = portfolio_levels[3])) |> 
  tab_style(style = cell_text(color = portfolio_colors[4], weight = "bold"), locations = cells_column_labels(columns = portfolio_levels[4])) |> 
  tab_style(style = cell_text(color = portfolio_colors[5], weight = "bold"), locations = cells_column_labels(columns = portfolio_levels[5])) |> 
  tab_style(style = cell_text(color = portfolio_colors[6], weight = "bold"), locations = cells_column_labels(columns = portfolio_levels[6])) |> 
  tab_style(style = cell_text(color = portfolio_colors[7], weight = "bold"), locations = cells_column_labels(columns = portfolio_levels[7])) |> 
  tab_style(style = cell_text(color = portfolio_colors[8], weight = "bold"), locations = cells_column_labels(columns = portfolio_levels[8])) |> 
  tab_style(style = cell_text(color = "gray30", weight = "bold"), locations = cells_column_labels(columns = contains("bm"))) 
}


gt_cols_label_attr <- function(gt_tbl) {
  gt_tbl |> 
  cols_label(ends_with("pf_rt_RD") ~ "RD",
             ends_with("pf_rt_RM") ~ "RM",
             ends_with("BM_rt_RD") ~ "RD",
             ends_with("BM_rt_RM") ~ "RM",
             ends_with("BM_rt") ~ "BM",
             ends_with("pf_av_wt_RD") ~ "RD",
             ends_with("pf_av_wt_RM") ~ "RM",
             ends_with("pf_av_wt") ~ "pf",
             ends_with("bm_av_wt") ~ "BM",
             pf_rt ~ "pf",
             ends_with("pf_wt_RD") ~ "RD",
             ends_with("pf_wt_RM") ~ "RM",
             contains("ou")|contains("OU") ~ "OU") |> 
    cols_width(
      contains("date") ~ px(100),
      contains("ector") ~ px(200),
      contains("portfolio") ~ px(130),
      contains("RD50") ~ px(70),
      everything() ~ px(55))
  }
```

```{r portfolio_tabel_en_weights}

#voetnoot als er geen update is van een ticker inclusief datum
no_update_tickers <-
  no_update_bloomberg_tickers |> 
  rowwise() |>
  mutate(ticker = ticker_from_bloomberg_ticker(bloomberg_ticker)) |> 
  ungroup() |> 
  select(ticker, date) |> 
  left_join(portfolios_tabel_snapshot |> ungroup() |> select(ticker, portfolio), by = "ticker") |> 
  filter(!is.na(portfolio)) |>
  unique()

no_update_tickers_pf <- function(portfolio) {no_update_tickers |> filter(portfolio == !!portfolio) |>
                                      select(ticker) |> pull()
}

no_update_ticker_tekst <- function(ticker) {str_c(" laatste update ", ticker,
                                       " is van ", no_update_tickers |> filter(ticker == !!ticker) |>
                                      select(date) |> head(1) |> pull() |> format("%d-%b"))
}

no_update_ticker_tekst_pf <- function(portfolio, asof_date) {
  if(asof_date <= lastdate) 
    {NULL} else {
  map(no_update_tickers_pf(portfolio), no_update_ticker_tekst) |> unlist()
  }
}

# footnote_tekst_no_update <- function(portfolio, asof_date) {
#   (if(nrow(filter(no_update_tickers, portfolio == !!portfolio)) >= 1 | asof_date <= lastdate)
#     {str_c("laatste update ", no_update_tickers |> filter(portfolio == !!portfolio) |>
#            select(ticker) |> pull(), " is van ", no_update_tickers |> filter(portfolio == !!portfolio) |>
#            select(date) |> pull() |> format("%d-%b"))
#    } else {NULL}
#    )
# }

footnote_tekst_aantallen_koersen <- function(asof_date) {
  if(asof_date == last_date_portfolios_tabel_uit_AIRS | asof_date <= lastdate) {
    str_c("Aantallen en koersen uit AIRS per ", format(as.Date(asof_date), "%d-%b"))
  } else {
    str_c("Aantallen uit fondsenlijst AIRS per ", format(as.Date(last_date_portfolios_tabel_uit_AIRS), "%d-%b"), ", koersen uit Bloomberg per ", format(as.Date(asof_date), "%d-%b"))
  }
}
```

```{r portfolio_gt_functie}

#portefeuille in gt
portfolio_gt <- function(portfolio = "VP100", asof_date = lastdate) {
  regels <-
    pf_portfolio(portfolio, asof_date) %>%
    filter(shares > 0) %>%
    mutate(name = str_trunc(name, 27),
           price = round(price, 2),
           weight = weight * 100,
           type = str_trunc(type, 9),
           type = factor(type, levels = str_trunc(type_levels, 9)),
           asset = factor(asset, levels = asset_levels),
           sector = str_trunc(sector, 19),
           sector = factor(sector, levels = str_trunc(sector_levels, 19)),
           shares = round(shares, 0)) |>  #cash op hele euros
    arrange(RDRM, asset, sector, type, name)
  
  onderste_regel <-
    regels %>%
    summarise(RDRM = "Totaal", asset = "", sector = "", type = "", name = "", ticker = "",
              #shares en price een getal geven anderswordt de hele kolom char en gaat alignment fout
              shares = 0, price = 0, currency = "", value_eur = sum(value_eur), weight = sum(weight))
  #rbind ipv bind_rows vanwege type preservation
  rbind(regels, onderste_regel) %>%
  gt(id = "one") |> #id ivm container scroll css
  gt_cols_align() |> 
  fmt_number(columns = weight, decimals = 1) |> 
  fmt_number(columns = value_eur, decimals = 0) |> 
  sub_zero(zero_text = " ") |> 
  opt_row_striping() |> 
  data_color(
    columns = type,
    palette = c(types_levels_colors |> mutate(type = str_trunc(type, 9)) |> pull(color), "white"),
    ordered = TRUE,
    apply_to = "text"
  ) |>
  gt_last_row_bold() |> 
  tab_header(str_c("Modelportefeuille ", portfolio, " per ", as.Date(asof_date) |> format("%d-%b-%Y"))) |>
  tab_footnote(
    footnote_tekst_aantallen_koersen(asof_date)) |>
  tab_footnote(
    no_update_ticker_tekst_pf(portfolio, asof_date)) |> 
  opt_footnote_marks(marks = c("", "")) |> 
  gt_font_padding_align() |> 
  gt_container_scroll()
}

```

::: panel-tabset
### `r portfolio_levels[1]`

```{r ff_portfolio_tabel_en_weights}

portfolio_gt(portfolio = portfolio_levels[1], asof_date = snapshot_date)
```

### `r portfolio_levels[2]`

```{r fd_portfolio_tabel_en_weights}

portfolio_gt(portfolio = portfolio_levels[2], asof_date = snapshot_date)

```

### `r portfolio_levels[3]`

```{r vf_portfolio_tabel_en_weights}

portfolio_gt(portfolio = portfolio_levels[3], asof_date = snapshot_date)
```

### `r portfolio_levels[4]`

```{r vd_portfolio_tabel_en_weights}

portfolio_gt(portfolio = portfolio_levels[4], asof_date = snapshot_date)
```

### `r portfolio_levels[5]`

```{r ts_portfolio_tabel_en_weights}

portfolio_gt(portfolio = portfolio_levels[5], asof_date = snapshot_date)
```

### `r portfolio_levels[6]`

```{r st_portfolio_tabel_en_weights}

portfolio_gt(portfolio = portfolio_levels[6], asof_date = snapshot_date)
```

### `r portfolio_levels[7]`

```{r hz_portfolio_tabel_en_weights}

portfolio_gt(portfolio = portfolio_levels[7], asof_date = snapshot_date)
```
### `r portfolio_levels[8]`

```{r vp_portfolio_tabel_en_weights}

portfolio_gt(portfolio = portfolio_levels[8], asof_date = snapshot_date)
```

:::

## Asset categorieën

### Asset categorieën - huidige samenstelling

```{r asset_weights_tabel}

BM_weight_RD <- function(portfolio, RDRM = "RDRM") {
  if (portfolio %in% c("RD100", "VP100")) {BM_weight_RD <- 1}
  else if (portfolio =="RD70") {BM_weight_RD <- 0.7}
  else if (portfolio == "RD30") {BM_weight_RD <- 0.3}
  else {BM_weight_RD <- 0.5}
  if(RDRM == "RD") {BM_weight_RD <-1} else {BM_weight_RD <- BM_weight_RD}
  return(BM_weight_RD)
}

#ook als een asset categorie na is moet er een nul verschijnen, dit is lastig
bestaande_portfolio_dates_combis_aandelen <- 
  portfolios_tabel |> ungroup() |> select(date, portfolio) |> unique()|> mutate(asset = "Aandelen")
bestaande_portfolio_dates_combis_obligaties <- 
  portfolios_tabel |> ungroup() |> select(date, portfolio) |> unique()|> mutate(asset = "Obligaties")
bestaande_portfolio_dates_combis_cash <- 
  portfolios_tabel |> ungroup() |> select(date, portfolio) |> unique()|> mutate(asset = "Cash")

bestaande_portfolio_dates_combis_asset_categorieen <-
  bind_rows(bestaande_portfolio_dates_combis_aandelen,
           bestaande_portfolio_dates_combis_obligaties,
           bestaande_portfolio_dates_combis_cash)


#asset verdeling historie, daarvoor ook NA's maken als portefeuille niet bestaat:
#asset_verdeling bestaand: 
asset_weights_long_beschikbaar <-
  portfolios_tabel |>
  group_by(portfolio, asset, date) |>
  summarise(weight_beschikbaar = sum(weight))  

#als asset cat NA is maar portefeuille bestaat al wel, dan 0 maken
asset_weights_long <-
  bestaande_portfolio_dates_combis_asset_categorieen |> 
  left_join(asset_weights_long_beschikbaar, by = c("portfolio", "date", "asset")) |>
  mutate(weight_beschikbaar = ifelse(is.na(weight_beschikbaar), 0, weight_beschikbaar)) |> 
  #benchmarks erbij zodat deze ook voor de beschikbare datum NA worden
  left_join(portfolios_bms_wgts_assets, by = c("portfolio", "asset"))

#voor alle data waarop portefeuilles bestaan
portfolio_dates <- portfolios_tabel |> ungroup() |> select(date) |> unique()

#asset_verdeling NA maken: 
asset_weights_NA_maken <- 
  function(portfolio, asset) {
    portfolio_levels_kolom |> 
      filter(portfolio == !!portfolio) |> 
      mutate(asset = !!asset) |> 
      bind_cols(portfolio_dates) |> 
      mutate(weight_NA = NA)
}

#drie onder elkaar
asset_weights_long_NA <-
  map_dfr(portfolio_levels, asset_weights_NA_maken, asset = "Aandelen") |> 
  bind_rows(map_dfr(portfolio_levels, asset_weights_NA_maken, asset = "Obligaties")) |> 
  bind_rows(map_dfr(portfolio_levels, asset_weights_NA_maken, asset = "Cash")) |> 
  group_by(portfolio, asset, weight_NA)

#samenvoegen met beschikbaar
asset_verdeling <-
  asset_weights_long_NA |> 
  left_join(asset_weights_long, by = c("portfolio", "asset", "date")) |> 
  mutate(weight = ifelse(!is.na(weight_beschikbaar), weight_beschikbaar, weight_NA)) |>
  group_by(portfolio, asset, weight) |> 
  select(-weight_NA, -weight_beschikbaar) |> 
  #nu is weight NA als nog niet beschikbaar
  mutate(OU = weight - bm_wgt,
         asset = factor(asset, levels = asset_levels),
         portfolio = factor(portfolio, levels = portfolio_levels)) |> 
  select(date, portfolio, asset, weight, bm_wgt, OU) 

#asset verdeling op moment van snapshot
asset_weights_tabel <- function(asof_date = snapshot_date) {
  asset_verdeling |>
    filter(date == asof_date) |>
    select(-date) |>
    pivot_wider(values_from = c(weight:OU), names_from = portfolio, values_fill = 0) |>
    select(asset, contains(portfolio_levels)) |>
    arrange(asset)
}

total_row <- function(asof_date = snapshot_date) {
  asset_weights_tabel(asof_date) |> ungroup() |> summarise(asset = "Totaal", across(where(is.numeric), sum))
}

asset_weights_tabel_nice <- function(asof_date = snapshot_date) {
  asset_weights_tabel(asof_date) |>
  bind_rows(total_row(asof_date)) |>
  mutate(across(where(is.numeric), ~round(.*100, 1))) |>
  ungroup() |> 
  gt() |> 
  gt_pfs_ou() |> 
  tab_header(str_c("Asset categorieën in portefeuilles en benchmarks, ", format(asof_date, "%d-%b-%Y"))) |> 
  gt_font_padding_align()
}

asset_weights_tabel_nice(asof_date = snapshot_date)
```

### Asset categorieën - historisch

```{r assets_hist}

asset_weights_pfs <-
  portfolios_tabel %>%
    select(date, portfolio, asset, weight) %>%
    group_by(date, portfolio, asset) %>%
    summarize(wt = sum(weight)) %>%
  ## ingreep voor nul gewichten
  pivot_wider(names_from = asset, values_from = wt) |> 
  mutate(Obligaties = 1 - Aandelen - Cash) |> 
  pivot_longer(cols = Aandelen:Obligaties) |> 
  rename(wt = value, asset = name) |>    
  mutate(portfolio = factor(portfolio, levels = portfolio_levels),
         asset = factor(asset, levels = rev(asset_levels))) |> 
  mutate(wt = ifelse(wt < 0.0000001, 0, wt)) |> 
  ## einde ingreep voor nul gewichten obligaties
  mutate(portfolio = factor(portfolio, levels = portfolio_levels),
           asset = factor(asset, levels = rev(asset_levels)))
  
asset_weights_pfs_plot <- function(start_date = start_date_attr, end_date = snapshot_date, portfolios = portfolio_levels) {
  asset_weights_pfs |> 
    filter(portfolio %in% portfolios, date >= start_date, date <= end_date) |>
  ggplot() +
    geom_area(aes(x = date, y = wt, fill = asset, col = asset), alpha = 0.3, position = "stack", ) +
    scale_y_continuous(labels = scales::percent_format(accuracy = 1), breaks = c(0, 0.3, 0.5, 0.7, 1)) +
    scale_x_date(date_labels = "%b-%y", breaks = datum_breaks(start_date, end_date)) +
    scale_color_manual(values = rev(c(usred, bondspurple, cashblue)),
                      guide = guide_legend(reverse = TRUE)) +
    scale_fill_manual(values = rev(c(usred, bondspurple, cashblue)),
                      guide = guide_legend(reverse = TRUE)) +
    facet_wrap(~portfolio, ncol = length(portfolio_levels)) +
    labs(x = "", y = "") +
    ggtitle("Asset categorieën",
         subtitle = str_c("van ",  
                          day(start_date), "-", month(start_date, label = TRUE), "-", year(start_date), " t/m ",
                          day(end_date), "-", month(end_date, label = TRUE), "-", year(end_date))) +

     theme_bw() +
     theme(legend.position = "bottom",
           legend.title = element_blank(),
           axis.text.x = element_text(angle = 90, vjust = .5, size = if(length(portfolios) == 1) 12 else 6),
           strip.text = element_text(size = if(length(portfolios) == 1) 12 else 8),
           plot.title = element_text(hjust = 0.5),
           plot.subtitle = element_text(hjust = 0.5))
}

asset_weights_pfs_plot(start_date = start_date_sector_indices, end_date = snapshot_date, portfolios = portfolio_levels)
```

## Obligaties

```{r Credits_one_liner_looptijd_dur}

#dur en looptijd ingeschat voor SUA0 of andere credit ETF
SUA0_one_liner <-
  readxl::read_xlsx(holdings_file, sheet = "credit_pds") |> 
  nest(data = c(t_curve, KRD)) |> 
  rename(KRD = data) |> 
  select(ticker, sector, full_price, KRD, looptijd)
  #was: read_rds(str_c(pad_deel1, "CreditETF_legacy/SUA0_one_liner.rds"))

SUA0_looptijd <-
  SUA0_one_liner |>
  select(looptijd) |>
  pull()

SUA0_GY_duration <-
  SUA0_one_liner |>
  select(KRD) |>
  unnest(cols = c(KRD)) |>
  summarise(duration = sum(KRD)) |>
  pull()

EUNR_GY_duration <- 5 #opgezocht in 2024. heel grof want als rente lager is dan daalt duration. etc.
EEXF_LN_duration <- 5 #beetje idem als EUNR

EUNS_GY_duration <- 3 #opgezocht in 2024. niettemin gebruiken voor grove schating van attributie credits
HYG_UN_duration <- 3.3 #opgezocht in 2024. niettemin gebruiken voor grove schating van attributie credits

EUNR_GY_looptijd <- 6
EEXF_LN_looptijd <- 6

EUNS_GY_looptijd <- 4
HYG_UN_looptijd <- 4
```

```{r krds_voor_alle_portefeuilles_incl_cash_en_benchmark_tabel_mbv_bloomberg_pds_en_Credits_one_liner}

# full prices alle bonds bloomberg op snapshot date 
bonds_full_prices_snapshot_date <-
  bloomberg_data |> 
  filter(inhoud == "blbrg_daily_bdh_fields_mtd") |> 
  unnest(cols = data) |> 
  #
  filter(field == "PR384", date == snapshot_date) |> #moet zijn date == snapshot_date) |>
  #
  rowwise() |>
  mutate(ticker = ticker_from_bloomberg_ticker(bloomberg_ticker),
         sector = "Staatsobligaties") |> 
  select(ticker, sector, full_price = value) |> 
  #Credits eronder
  bind_rows(
    SUA0_one_liner |> select(ticker, sector, full_price))

# partial durations alle bonds bloomberg op snapshot date 
partial_durations_snapshot_date <-
  bloomberg_data |> 
  filter(inhoud == "blbrg_partial_durations") |> 
  unnest(cols = data) |> 
  unnest(cols = DU324) |> 
  #ticker maken
  rowwise() |>
  mutate(ticker = ticker_from_bloomberg_ticker(bloomberg_ticker),
         sector = "Staatsobligaties") |> 
  ungroup() |> 
  select(ticker, sector, t_curve = Maturity, KRD = Duration) |> 
  #Credits eronder
  bind_rows(
    SUA0_one_liner |> unnest(cols = KRD) |> select(ticker, sector, t_curve, KRD))


#benchmark obligaties met shares
staatsleningen_looptijd <-
  amounts_outstanding |> 
  filter(amount_outstanding > 0) |>
  rowwise() |>
  mutate(portfolio = "BM",
         mat_dat = bond_ticker_mat_dat(ticker),
         life_lastdate = (mat_dat - lastdate))
    
benchmark_shares_weights <-
  staatsleningen_looptijd |>
  filter(life_lastdate > years(1)) |>
  rename(shares = amount_outstanding) |> 
  left_join(bonds_full_prices_snapshot_date, by = "ticker") |> 
  ungroup() |> 
  mutate(value_eur = full_price * shares / 100,
         weight_pf = value_eur / sum(value_eur),
         weight_rm = weight_pf,
         sector = "Staatsobligaties") |> 
  select(portfolio, ticker, sector, shares, value_eur, weight_pf, weight_rm)

portfolios_shares_weights <-
  portfolios_tabel |> 
  filter(date == snapshot_date,
         RDRM == "RM") |>
  group_by(portfolio) |>
  mutate(weight_rm = weight / sum(weight)) |> 
  select(portfolio, ticker, sector, shares, value_eur, weight_pf = weight, weight_rm)

#pds voor alle pfs alle regels afzonderlijk
all_shares_weights_pds <-
  benchmark_shares_weights |> 
  bind_rows(portfolios_shares_weights) |> 
  select(portfolio, ticker, sector, shares, weight_pf, weight_rm) |> 
  group_by(portfolio, sector, ticker) |> 
  #partial durations per bond
  left_join(partial_durations_snapshot_date, by = c("ticker", "sector"),
            relationship = "many-to-many") |> 
  filter(sector != "Cash")

#pds voor alle pfs op rm level
all_shares_weights_pds_rm_level <-
  all_shares_weights_pds |> 
  mutate(wtd_KRD = weight_rm * KRD) |> 
  group_by(portfolio, sector, t_curve) |> 
  reframe(KRD = sum(wtd_KRD))

#pds voor alle pfs op pf level
all_shares_weights_pds_pf_level <-
  all_shares_weights_pds |> 
  mutate(wtd_KRD = weight_pf * KRD) |> 
  group_by(portfolio, sector, t_curve) |> 
  reframe(KRD = sum(wtd_KRD))

#overall duration voor alle pfs op rm level
all_shares_weights_dur_rm_level <-
  all_shares_weights_pds_rm_level |> 
  group_by(portfolio) |>
  reframe(duration = sum(KRD))

#overall duration voor alle pfs op pf level
all_shares_weights_dur_pf_level <-
  all_shares_weights_pds_pf_level |> 
  group_by(portfolio) |>
  reframe(duration = sum(KRD))          

partial_durations_snapshot_date_wide <- 
  partial_durations_snapshot_date |> 
  pivot_wider(names_from = t_curve, values_from = KRD) |> 
  select(-sector) |> 
  rename_with(~str_c("PD_", .)) |> 
  #corrigeren
  rename(ticker = PD_ticker)
```

```{r overzicht_duration_NL_staatsleningen}

#overzichtstabel benchmarkleningen, pds en duration
df_NL_staatsleningen_duration <- 
  amounts_outstanding |> 
  rename(outstanding = amount_outstanding) |>
  mutate(outstanding = outstanding/1e9) |>
  filter(outstanding > 0) |>  
  #een paar oude eruit, met de hand
  filter(!ticker %in% c("NL0_625")) |>
  #
  left_join(bonds_full_prices_snapshot_date, by = "ticker") |> select(-sector) |> 
  left_join(benchmark_shares_weights |> select(ticker, value_eur), by = "ticker") |> 
  rename(value_bm = value_eur) |>
  mutate(value_bm = ifelse(is.na(value_bm), 0, value_bm/1e9)) |> 
  #mutate(v = full_price * outstanding, diff = v - value_bm) |> 
  left_join(partial_durations_snapshot_date_wide, by = "ticker") |> 
  #betere namen geven
  mutate(dur = PD_0.5 + PD_1 + PD_2 + PD_3 + PD_5 + PD_7 + PD_10 + PD_20 + PD_30) |>
  rowwise() |> 
  mutate(afloopdatum = bond_ticker_mat_dat(ticker)) |> 
  ungroup() |>
  #op volgorde van duration
  arrange(afloopdatum) |> 
  mutate(weight = value_bm/sum(value_bm),
         wtd_dur = weight*dur,
         nr = as.character(1:n())) |> 
  select(nr, ticker, afloopdatum, outstanding, full_price, value_bm, PD_0.5:PD_30, dur, weight, wtd_dur)

  summary_row_df_NL_staatsleningen_duration <- 
    df_NL_staatsleningen_duration |> 
  summarise(nr = "",
            ticker = "Totaal", 
            afloopdatum = as.Date(""),
            outstanding = sum(outstanding), 
            full_price = 0,
            value_bm = sum(value_bm), 
            PD_0.5 = sum(weight*PD_0.5), PD_1 = sum(weight*PD_1), PD_2 = sum(weight*PD_2), PD_3 = sum(weight*PD_3), PD_5 = sum(weight*PD_5), PD_7 = sum(weight*PD_7), PD_10 = sum(weight*PD_10), PD_20 = sum(weight*PD_20), PD_30 = sum(weight*PD_30), 
            dur = sum(weight * dur), 
            weight = sum(weight), 
            wtd_dur = sum(wtd_dur))
  
overzicht_duration_NL_staatsleningen <- 
  bind_rows(summary_row_df_NL_staatsleningen_duration,
            df_NL_staatsleningen_duration) |> 
  mutate(weight = weight * 100)
  
```

### Duration

::: panel-tabset

#### Duration RM

```{r portfolio_krds_total_vs_bm_plot}

#nieuw plaatje

duration_pfs_vs_bm <-
  all_shares_weights_dur_rm_level |> 
  mutate(portfolio = factor(portfolio, levels = c("BM", portfolio_levels)),
         sector = "Staatsobligaties") |>
  left_join(portfolios_bms_colors, by = "portfolio") |>
  mutate(portfolio = factor(portfolio, levels = c("BM", portfolio_levels)),
         sector = factor(sector, levels = c("Credits", "Staatsobligaties"))) %>%
  ggplot() +
    geom_bar(aes(x = portfolio, y = duration, fill = color, alpha = sector), stat = "identity", position = "stack", col = bmgray) +
    geom_text(aes(x = portfolio, y = duration + 0.5, label = round(duration, 1)), size = 4, col = "gray30", fontface = 'bold', data = all_shares_weights_dur_rm_level) +
    scale_y_continuous(limits = c(0, 11), breaks = 1:10)+
    ggtitle(str_c("Duration modelportefeuilles en benchmark, ", snapshot_date_format)) +
    #labs(caption = str_c("duration van SUA0_GY is ", round(SUA0_GY_duration, 1) , " jaar")) +
    scale_fill_identity() +
    scale_alpha_manual(values = c(0.8, 0.4)) + # was scale_alpha_manual(values = c(0.8, 0.8))+ #zonder credits
    charts_custom_theme +
    theme(legend.position = "bottom") +
    guides(fill = "none")

duration_pfs_vs_bm
```

#### NL staatsleningen

```{r overzicht_staatsleningen}
  overzicht_duration_NL_staatsleningen |>
  select(nr, ticker, afloopdatum, outstanding, full_price, value_bm, weight, starts_with("PD"), dur) |> # View()
    gt() |>
    gt_cols_align() |> 
    fmt_number(columns = weight, decimals = 2) |> 
    fmt_number(columns = full_price, decimals = 3) |> 
    fmt_number(columns = outstanding, decimals = 3) |> 
    fmt_number(columns = value_bm, decimals = 3) |>
    fmt_number(columns = c(dur, starts_with("PD")), decimals = 2) |> 
    sub_zero(zero_text = " ") |> 
  #blanco summary row for column afloopddatum, anders NA
    tab_style(style = list(
      cell_text(color = "#e1e2e5")
      ),
    locations = cells_body(
      columns = afloopdatum,
      rows = 1
    )) |> 
    cols_align(
      align = "right",
      columns = "nr"
    ) |>
    opt_row_striping() |> 
    gt_first_row_bold() |> 
    tab_header(str_c("Duration NL staatsleningen per ", as.Date(snapshot_date) |> format("%d-%b-%Y"))) |>
    tab_footnote(
      footnote = str_c("Bron bloomberg voor outstanding, full price en PD's. Obligaties met de hand bijhouden in sheet_holdings")) |> 
    gt_font_padding_align() |>
    gt_container_scroll()

```

#### KRD's RM

```{r portfolio_vs_bm_krds_barchart}

# "Key Rate Durations portefeuilles en benchmark"
KRDs_pfs_vs_bm <-
  all_shares_weights_pds_rm_level %>%
  left_join(portfolios_bms_colors, by = "portfolio") |>
  mutate(portfolio = factor(portfolio, levels = c("BM", portfolio_levels))) %>%
  mutate(t_curve = as.character(t_curve)) %>%
  filter(t_curve!= 0) %>%
  mutate(t_curve = factor(t_curve, levels = c("0.5", "1", "2", "3", "5", "7", "10", "20", "30"))) %>%
  group_by(t_curve, portfolio, sector) |>
  ggplot(aes(x = t_curve)) +
  geom_bar(aes(y = KRD, fill = color, alpha = sector), col = bmgray, position = "stack",stat = "identity") +
  ggtitle(str_c("Key Rate Durations RM-deel modelportefeuilles en benchmark, ", snapshot_date_format)) +
  scale_fill_identity() +
  scale_alpha_manual(values = c(0.8, 0.4)) + #zonder credits  scale_alpha_manual(values = c(0.8, 0.8))
  facet_grid(~portfolio) +
  charts_custom_theme +
  theme(legend.position = "bottom",
        axis.text.x = element_text(angle = 90, vjust = 0.5, size = 9))

KRDs_pfs_vs_bm
```

#### KRD's O/U RM

```{r portfolio_krds_ou}

BM_KRDs <- 
  all_shares_weights_pds_rm_level |> 
  filter(portfolio == "BM") |> 
  rename(BM_KRD = KRD,
         BM = portfolio)

pf_KRDs <- 
  all_shares_weights_pds_rm_level |> 
  filter(portfolio != "BM")

pf_KRDs_ou <-
  pf_KRDs %>%
  left_join(BM_KRDs, by = "t_curve") %>%
  mutate(OU = KRD - BM_KRD) %>%
  select(t_curve, portfolio, OU) %>%
  mutate(t_curve = as.character(t_curve)) %>%
  filter(t_curve != 0) %>%
  mutate(t_curve = factor(t_curve, levels = c("0.5", "1", "2", "3", "5", "7", "10", "20", "30")))

```

```{r portfolio_krds_ou_barchart}

pf_KRDs_ou %>%
  group_by(t_curve, portfolio) %>%
  left_join(portfolios_bms_colors, by = "portfolio") |>
  mutate(t_curve = as.character(t_curve)) %>%
  mutate(t_curve = factor(t_curve, levels = c("0.5", "1", "2", "3", "5", "7", "10", "20", "30"))) %>%
  mutate(portfolio = factor(portfolio, levels = portfolio_levels)) %>%
  ggplot(aes(x = t_curve)) +
    geom_bar(aes(y = OU, fill = color), col = bmgray, position = "dodge", alpha = 0.8, stat = "identity") +
    ggtitle(str_c("Key Rate Durations o/u-weight RM-deel portefeuilles vs benchmark, ", snapshot_date_format)) +
    scale_fill_identity() +
    facet_grid(~portfolio) +
    charts_custom_theme +
    theme(legend.position = "bottom",
          axis.text.x = element_text(angle = 90, vjust = 0.5, size = 9))

```


#### Duration als % van BM

```{r pf_level_krds}

dur_bm <- all_shares_weights_dur_pf_level |> 
  filter(portfolio == "BM") |> 
  select(duration) |> 
  pull()

all_shares_weights_dur_pf_level |> 
  filter(portfolio != "BM") |> 
  rename(portefeuille = duration) |> 
  rowwise() |> 
  mutate(weight_rm_bm = 1 - BM_weight_RD(portfolio),
         BM = weight_rm_bm * dur_bm,
         OU = portefeuille - BM,
         pct = round(100*portefeuille/BM, 0)) |> 
  select(-weight_rm_bm) |>
  mutate(portfolio = factor(portfolio, levels = portfolio_levels)) |>
  arrange(portfolio) |> 
  gt() |> 
  gt_cols_align() |> 
  gt_portfolio_colors() |> 
  gt_delete_first_col_label() |> 
  fmt_number(columns = where(is.numeric), decimals = 1) |> 
  tab_header(str_c("Durations op portefeuilleniveau en als % van benchmark, ", snapshot_date_format)) |> 
  gt_font_padding_align() |> 
  gt_first_col_bold()

```
:::

### Historie looptijd en duration

::: panel-tabset
#### Looptijd - portefeuilleniveau

```{r wtd_av_lf_pfs}
#voor SUA0 zie SUA0_one_liner_looptijd_dur

portfolios_tabel_looptijd <-
  portfolios_tabel %>%
    filter(asset %in% c("Cash", "Obligaties"), 
           !portfolio %in% c("RD100", "VP100"),
           date >= start_date_sector_indices) %>%
    rowwise() %>%
    mutate(mat_dat = bond_ticker_mat_dat(ticker),
           looptijd = as.numeric((mat_dat - date)/365),
           portfolio = factor(portfolio, levels = portfolio_levels)) %>%
    group_by(portfolio, date) %>%
    mutate(looptijd = case_when(ticker == "CASH" ~ 0,
                                ticker == "EEXF_LN" ~ EEXF_LN_looptijd,
                                ticker == "HYG_UN" ~ HYG_UN_looptijd,
                                ticker == "EUNR_GY" ~ EUNR_GY_looptijd,
                                ticker == "EUNS_GY" ~ EUNS_GY_looptijd,
                                ticker == "SUA0_GY" ~ SUA0_looptijd,
                                TRUE  ~ looptijd),
           gewogen_looptijd_RM = looptijd * shares/sum(shares),
           gewogen_looptijd_pf = looptijd * weight) %>%
    summarise(gemiddelde_looptijd_RM = sum(gewogen_looptijd_RM),
              gemiddelde_looptijd_portfolio = sum(gewogen_looptijd_pf))

benega_looptijd <-
  benega_dur_en_mat_hist %>%
  select(date, BENEGA_looptijd)

pf_bm_portfolios_gewogen_looptijd <-
  portfolios_tabel_looptijd %>%
  left_join(benega_looptijd, by = "date") %>%
  rowwise() %>%
  mutate(bm_fi_wt = 1 - BM_weight_RD(portfolio),
         bm = bm_fi_wt * BENEGA_looptijd,
         gemiddelde_looptijd = gemiddelde_looptijd_portfolio,
         diff = gemiddelde_looptijd - bm) %>%
  select(date, portfolio, gemiddelde_looptijd, bm, diff) %>%
  pivot_longer(cols = c(gemiddelde_looptijd:diff)) %>%
  rename(pf_bm = name) %>%
  mutate(col = str_c(portfolio, "_", pf_bm),
         col = factor(col, levels = c("RD50_gemiddelde_looptijd", "RD50_bm", "RD50_diff",
                                      "DZ50_gemiddelde_looptijd", "DZ50_bm", "DZ50_diff",
                                      "VP50_gemiddelde_looptijd", "VP50_bm", "VP50_diff",
                                      "VD50_gemiddelde_looptijd", "VD50_bm", "VD50_diff",
                                      "RD30_gemiddelde_looptijd", "RD30_bm", "RD30_diff",
                                      "RD70_gemiddelde_looptijd", "RD70_bm", "RD70_diff")))

looptijd_custom <-
  list(
   geom_line(aes(col = col, linewidth = col), alpha = 0.8),
   geom_hline(yintercept = 0, alpha = 0.3, linewidth = 1),
   scale_color_manual(
     values = c(RD50green, bmgray, RD50green,
                DZ50blue, bmgray, DZ50blue,
                VP50green, bmgray, VP50green,
                VD50blue, bmgray, VD50blue,
                RD30green, bmgray, RD30green,
                RD70green, bmgray, RD70green)),
   scale_linewidth_manual(
      values = rep(c(1.5, 1.5, .5), 6)),
   scale_y_continuous(limits = c(-8, 12), breaks = c(-6, -4, -2, 0, 2, 4, 6, 8, 10, 12)),
   scale_x_date(date_breaks = "2 years", date_labels = "%Y"),
   expand_limits(x = lastdate + 200),
   labs(x = "", y = "jaar"),
   theme_bw(),
   theme(legend.position = "none"),
   facet_wrap(~portfolio)
  )

pf_bm_portfolios_gewogen_looptijd %>%
  ggplot(aes(x = date, y = value, group = pf_bm)) +
    ggtitle(str_c("Looptijd portefeuille vs benchmark, tot ", lastdate_format)) +
    labs(caption = str_c("looptijd van EUNS_GY en EUNR_GY was 3 jaar, SUA0_GY \n",
                         round(SUA0_looptijd, 1) , " jaar, cash 0 jaar, benchmark is BENEGA")) +
    looptijd_custom

```

#### Looptijd RM

```{r av_lf_pfs}

pf_bm_portfolios_looptijd <-
  portfolios_tabel_looptijd %>%
  left_join(benega_looptijd, by = "date") %>%
  # benega looptijd opvullen van eind 2013 tot eind 2016
  #fill(BENEGA_looptijd, .direction = "up") |> 
  #
  mutate(bm = BENEGA_looptijd,
         gemiddelde_looptijd = gemiddelde_looptijd_RM,
         diff = gemiddelde_looptijd - bm) %>%
  select(date, portfolio, gemiddelde_looptijd, bm, diff) %>%
  pivot_longer(cols = c(gemiddelde_looptijd:diff)) %>%
  rename(pf_bm = name) %>%
  mutate(col = str_c(portfolio, "_", pf_bm),
         col = factor(col, levels = c("RD50_gemiddelde_looptijd", "RD50_bm", "RD50_diff",
                                      "DZ50_gemiddelde_looptijd", "DZ50_bm", "DZ50_diff",
                                      "VP50_gemiddelde_looptijd", "VP50_bm", "VP50_diff",
                                      "VD50_gemiddelde_looptijd", "VD50_bm", "VD50_diff",
                                      "RD30_gemiddelde_looptijd", "RD30_bm", "RD30_diff",
                                      "RD70_gemiddelde_looptijd", "RD70_bm", "RD70_diff"))) |>
filter(!col %in% c("VP100_pf", "VP100_bm"))

pf_bm_portfolios_looptijd %>%
  ggplot(aes(x = date, y = value, group = pf_bm)) +
    ggtitle(str_c("Looptijd RM-deel portefeuille vs benchmark, tot ", lastdate_format)) +
    labs(caption = str_c("looptijd van EUNR_GY 5.5 jaar, EUNS_GY 3 jaar,
                         SUA0_GY ", round(SUA0_looptijd, 1) , " jaar, cash 0 jaar, benchmark is BENEGA")) +
    looptijd_custom

```

#### Duration - portefeuilleniveau

```{r mod_dur_pfs}

benega_mod_dur <-
  benega_dur_en_mat_hist %>%
  select(date, BENEGA_mod_dur)

#laatste extrapoleren naar snapshot_date

RM_tickers <- portfolios_tabel %>% filter(RDRM == "RM") %>% ungroup() %>% select(ticker) %>% unique()
RM_bond_tickers <- portfolios_tabel %>% filter(RDRM == "RM", type != "ETF", ticker != "CASH", !str_detect(ticker, "T1")) %>%
  ungroup() %>%
  select(ticker) %>% unique()
RM_etf_tickers <- portfolios_tabel %>% filter(RDRM == "RM", type == "ETF") %>% ungroup() %>% select(ticker) %>% unique()

#RM_tickers_mod_dur_hist_old <- read_rds(str_c(pad_deel1, "RM_tickers_mod_dur_hist.rds"))
ETF_RM_tickers_cash_mod_dur_hist <- 
 dates |> 
  mutate(EUNR_GY = EUNR_GY_duration, 
         EUNS_GY = EUNS_GY_duration, 
         SUA0_GY = SUA0_GY_duration, 
         EEXF_LN = EEXF_LN_duration, 
         HYG_UN = HYG_UN_duration, 
         CASH = 0) |> 
  pivot_longer(cols = c(RM_etf_tickers$ticker, "CASH")) |> 
  rename(ticker = name, dur = value)

RM_tickers_mod_dur_hist <- 
  #maandelijkse historie
  monthly_bdh_fields |> 
  filter(ticker %in% RM_bond_tickers$ticker, field == "DU011") |> 
  rename(dur = value) |> 
  select(date, ticker, dur) |> 
  bind_rows(
    #waarde op snapshot_date eronder plakken
    daily_bdh_fields_mtd |> 
    filter(ticker %in% RM_bond_tickers$ticker, field == "DU011") |> 
    rename(dur = value) |> 
    select(date, ticker, dur) |> filter(date == snapshot_date)) |> 
    #ETF_RM_tickers_cash_mod_dur_hist eronder
  bind_rows(ETF_RM_tickers_cash_mod_dur_hist)


benega_yield_kolom <- map_dfr(benega_dur_en_mat_hist$date, benega_date_yield)

pf_bm_portfolios_gewogen_mod_dur <-
  portfolios_tabel %>%
  filter(!portfolio %in% c("RD100", "VP100")) %>%
  mutate(portfolio = factor(portfolio, levels = portfolio_levels)) %>%
  left_join(RM_tickers_mod_dur_hist, by = c("date", "ticker")) %>%
  mutate(mod_dur = replace_na(dur, 0)) %>%
  group_by(portfolio, date) %>%
  summarize(portfolio_dur = weighted.mean(mod_dur, weight)) %>%
  left_join(benega_mod_dur, by = "date") %>%
  # benega mod dur opvullen van eind 2013 tot eind 2016
  #fill(BENEGA_mod_dur, .direction = "up") |> 
  #
  mutate(rm_bm_wt =
           case_when(portfolio == "RD70" ~ .3,
                     portfolio == "RD30" ~ .7,
                     TRUE ~ .5),
         bm = rm_bm_wt * BENEGA_mod_dur,
         diff = portfolio_dur - bm) %>%
  select(date, portfolio, portfolio_dur, bm, diff) %>%
  pivot_longer(portfolio_dur:diff) %>%
  rename(pf_bm = name) %>%
  mutate(col = str_c(portfolio, "_", pf_bm),
         col = factor(col, levels = c("RD50_portfolio_dur", "RD50_bm", "RD50_diff",
                                      "DZ50_portfolio_dur", "DZ50_bm", "DZ50_diff",
                                      "VP50_portfolio_dur", "VP50_bm", "VP50_diff",
                                      "VD50_portfolio_dur", "VD50_bm", "VD50_diff",
                                      "RD30_portfolio_dur", "RD30_bm", "RD30_diff",
                                      "RD70_portfolio_dur", "RD70_bm", "RD70_diff")))


pf_bm_portfolios_gewogen_mod_dur %>%
    ggplot(aes(x = date, y = value, group = pf_bm)) +
    ggtitle(str_c("Portefeuille gewogen duration vs benchmark, tot ", lastdate_format)) +
    labs(caption = str_c("duration van EUNS_GY was 3 jaar, EUNR_GY 5 jaar, SUA0_GY \n",
                         round(SUA0_GY_duration, 1) , " jaar, cash 0 jaar, benchmark is BENEGA")) +
    looptijd_custom
```


#### Duration RM

```{r mod_dur_pfs_rm}

pf_bm_rm_deel_mod_dur <-
  portfolios_tabel %>%
  filter(!portfolio %in% c("RD100", "VP100"), RDRM == "RM") %>%
  mutate(portfolio = factor(portfolio, levels = portfolio_levels)) %>%
  left_join(RM_tickers_mod_dur_hist, by = c("date", "ticker")) %>%
  mutate(mod_dur = replace_na(dur, 0)) %>%
  group_by(portfolio, date) %>%
  summarize(portfolio_dur = weighted.mean(mod_dur, weight)) %>%
  left_join(benega_mod_dur, by = "date") %>%
  rename(bm = BENEGA_mod_dur) %>%
  mutate(diff = portfolio_dur - bm) |>
  select(date, portfolio, portfolio_dur, bm, diff) |> 
  pivot_longer(portfolio_dur:diff) %>%
  rename(pf_bm = name) %>%
  mutate(col = str_c(portfolio, "_", pf_bm),
         col = factor(col, levels = c("RD50_portfolio_dur", "RD50_bm", "RD50_diff",
                                      "DZ50_portfolio_dur", "DZ50_bm", "DZ50_diff",
                                      "VP50_portfolio_dur", "VP50_bm", "VP50_diff",
                                      "VD50_portfolio_dur", "VD50_bm", "VD50_diff",
                                      "RD30_portfolio_dur", "RD30_bm", "RD30_diff",
                                      "RD70_portfolio_dur", "RD70_bm", "RD70_diff")))


pf_bm_rm_deel_mod_dur %>%
    ggplot(aes(x = date, y = value, group = pf_bm)) +
    geom_line() +
    ggtitle(str_c("Duration RM-deel portefeuille vs benchmark, tot ", lastdate_format)) +
    labs(caption = str_c("duration van EUNS_GY en EUNR_GY was 3 jaar, SUA0_GY \n",
                         round(SUA0_GY_duration, 1) , " jaar, cash 0 jaar, benchmark is BENEGA")) +
    looptijd_custom
```
:::

### Yield Curve

::: panel-tabset

#### sinds einde 2024

```{r curve_plaatje}

#plaatje
curves_data <- bind_rows(curve_hist_plus(snapshot_date),
                         curve_hist_plus(lastdate),
                         curve_hist_plus(last_ultimo_year),
                         ) %>%
  mutate(date = format(date, "%d-%b-%Y")) %>%
  filter(t_curve !=50) |>
  #voor indien snapshot_date = lastdate
  unique() |>
  mutate(date = factor(date, levels = rev(date |> unique())))

ggplot(data = curves_data, aes(x = t_curve, y = par_rate, group = date, linewidth = date))+
  geom_line(aes(alpha = date, ), col = bondspurple)+
  geom_point(aes(alpha = date), col = bondspurple)+
  ggtitle("Yield Curve Nederlandse Staatsobligaties") +
  scale_y_continuous(labels = scales::percent_format(accuracy = 1))+
  scale_alpha_manual(values = c(0.8, 0.85, 1)) +
  scale_linewidth_manual(values = c(1.8, 1.9, 3)) +
  labs(x = "", y = "", caption = ("ESTRON, GDBR1 en GNTHxY")) +
  geom_hline(yintercept = 0, alpha = 0.3)+
  theme_bw()+
  theme(legend.position = "bottom",
        legend.title = element_blank(),
        plot.title = element_text(hjust = 0.5),
        plot.subtitle = element_text(hjust = 0.5),
        plot.caption = element_text(hjust = 1))
```

#### historie sinds 2017

```{r curve_plaatje_si}

#plaatje
curves_data <- bind_rows(curve_hist_plus(snapshot_date),
                         curve_hist_plus(lastdate),
                         curve_hist_plus(last_ultimo_year),
                         curve_hist_plus(last_ultimo_year %m-% years(1)),
                         curve_hist_plus(last_ultimo_year %m-% years(2)),
                         curve_hist_plus(last_ultimo_year %m-% years(3)),
                         curve_hist_plus(last_ultimo_year %m-% years(4)),
                         curve_hist_plus(last_ultimo_year %m-% years(5)),
                         curve_hist_plus(last_ultimo_year %m-% years(6)),
                         curve_hist_plus(last_ultimo_year %m-% years(7))) %>%
  mutate(date = format(date, "%d-%b-%Y")) %>%
  filter(t_curve !=50) |>
  #voor indien snapshot_date = lastdate
  unique() |>
  mutate(date = factor(date, levels = rev(date |> unique())))

ggplot(data = curves_data, aes(x = t_curve, y = par_rate, group = date))+
  geom_line(aes(alpha = date, linewidth = date), col = bondspurple)+
  geom_point(aes(alpha = date), col = bondspurple)+
  ggtitle("Yield Curve Nederlandse Staatsobligaties") +
  scale_y_continuous(labels = scales::percent_format(accuracy = 1))+
  scale_alpha_manual(values = c(.01, 0.025, 0.075, 0.15, 0.2, 0.4, 0.6, 0.8, 0.85, 1)) +
  scale_linewidth_manual(values = c(0.1, 0.3, 0.5, 0.8, 1, 1.2, 1.5, 1.8, 1.9, 3)) +
  labs(x = "", y = "", caption = ("ESTRON, GDBR1 en GNTHxY")) +
  geom_hline(yintercept = 0, alpha = 0.3)+
  theme_bw()+
  theme(legend.position = "bottom",
        legend.title = element_blank(),
        plot.title = element_text(hjust = 0.5),
        plot.subtitle = element_text(hjust = 0.5),
        plot.caption = element_text(hjust = 1))
```

:::


## Regio's, landen, valuta

```{r country_region_weights}

#inlezen spreadsheet landen en regiogewichten ETF's
etf_region_country_currency_weights <-
  readxl::read_xlsx(holdings_file, sheet = "country_weights", skip = 0) %>%
  replace(is.na(.), 0) %>%
  mutate(
    region = factor(region, levels = region_levels),
    country = factor(country, levels = country_levels),
    currency = factor(currency, levels = currency_levels),
    currency_2 = factor(currency_2, levels = currency_2_levels)
  )

etf_country_weights <- etf_region_country_currency_weights %>% group_by(country) %>% summarize_at(vars(IWDA_NA:EUNR_GY), sum)
etf_region_weights <- etf_region_country_currency_weights %>% group_by(region) %>% summarize_at(vars(IWDA_NA:EUNR_GY), sum)
etf_currency_weights <- etf_region_country_currency_weights %>% group_by(currency) %>% summarize_at(vars(IWDA_NA:EUNR_GY), sum)
etf_currency_2_weights <- etf_region_country_currency_weights %>% group_by(currency_2) %>% summarize_at(vars(IWDA_NA:EUNR_GY), sum)

#landengewichten voor stocks (niet-ETF's)
stocks_cash_country_weights <-
  holdings %>%
  filter(type != "ETF") %>%
  select(ticker, country) %>%
  group_by(country) %>%
  mutate(weight = 1) %>%
  spread(ticker, weight) %>%
  replace(., is.na(.), 0)

#all country weights ..
all_country_weights <-
  etf_country_weights %>%
  left_join(stocks_cash_country_weights, by = "country") %>%
  replace(., is.na(.), 0)

#regiogewichten voor stocks (niet-ETF's)
stocks_cash_region_weights <-
  holdings %>%
  filter(type != "ETF") %>%
  select(ticker, region) %>%
  group_by(region) %>% mutate(weight = 1) %>%
  spread(ticker, weight) %>%
  replace(., is.na(.), 0)

#all region weights ..
all_region_weights <-
  etf_region_weights %>%
  left_join(stocks_cash_region_weights, by = "region") %>%
  replace(., is.na(.), 0)

#valutagewichten voor stocks (niet-ETF's)
stocks_cash_currency_weights <-
  holdings %>%
  filter(type != "ETF") %>%
  select(ticker, currency) %>%
  group_by(currency) %>% mutate(weight = 1) %>%
  spread(ticker, weight) %>%
  replace(., is.na(.), 0)

#all currency weights ..
all_currency_weights <-
  etf_currency_weights %>%
  left_join(stocks_cash_currency_weights, by = "currency") %>%
  replace(., is.na(.), 0)

#valutagroepen gewichten voor stocks (niet-ETF's)
stocks_cash_currency_2_weights <-
  holdings %>%
  filter(type != "ETF") %>%
  select(ticker, currency_2) %>%
  group_by(currency_2) %>% mutate(weight = 1) %>%
  spread(ticker, weight) %>%
  replace(., is.na(.), 0)

#all currency_2 weights ..
all_currency_2_weights <-
  etf_currency_2_weights %>%
  left_join(stocks_cash_currency_2_weights, by = "currency_2") %>%
  replace(., is.na(.), 0)

#etf update dates
etf_update_date <- function(etf) {
  update <- readxl::read_xlsx(holdings_file, sheet = "etf_update_dates_bronnen") %>%
    mutate(update = as.Date(update)) %>%
    filter(ticker == etf) %>%
    select(update) %>%
    pull() %>%
    format("%d-%b")
  str_c(etf, ":", update)
}

#etf sector weights
etf_sector_weights <- readxl::read_xlsx(holdings_file, sheet = "etf_sector_weights", skip = 0) %>%
  mutate(sector = factor(sector, levels = sector_levels)) %>%  replace(is.na(.), 0)

#sectorgewichten voor stocks (niet-ETF's) maw welke sector
stocks_cash_sector_weights <-
  holdings %>%
  filter(type != "ETF") %>%
  select(ticker, sector) %>%
  group_by(sector) %>% mutate(weight = 1) %>%
  spread(ticker, weight) %>%
  replace(., is.na(.), 0)

#all sector weights (ook van ind aandelen)
all_sector_weights <-
  etf_sector_weights %>%
  left_join(stocks_cash_sector_weights, by = "sector") %>%
  replace(., is.na(.), 0)

```

```{r tickers_sector_weights_hist}
#historische sectorgewichten maken uit huidige gewichten en sectorindices MXWO0..
#
MXWO_sector_indices_hist <- bm_MSCI_en_sector_indices_local %>% select(-MXWO) #historie van sectorindices local (USD)
MXWO_index_hist <- bm_MSCI_en_sector_indices_local %>% select(date, MXWO) #historie van MXWO index local (USD)

MXWO_sector_indices_hist_long <-
  MXWO_sector_indices_hist %>%
  pivot_longer(-date) %>%
  rename(sector_index = name,
         index_value = value) %>%
  mutate(sector_short = str_sub(sector_index, 6, 7))

MXWO_sector_indices_hist_long_lastdate <-
  MXWO_sector_indices_hist_long %>%
  filter(date == lastdate) %>%
  rename(index_value_lastdate = index_value) %>%
  select(sector_short, index_value_lastdate)

etf_sector_weights_long <-
  etf_sector_weights %>%
  rowwise() %>%
  mutate(sector_short = sector_long_to_short_name(sector)) %>%
  pivot_longer(-c(sector, sector_short)) %>%
  rename(weight_lastdate = value,
         ETF = name)

ETF_tickers_equities_sector_none <-
  holdings %>%
  filter(type == "ETF", asset == "Aandelen", !sector %in% sector_levels_RD) %>%
  select(ticker)

etf_sector_weights_hist <-
  MXWO_sector_indices_hist_long %>%
  left_join(MXWO_sector_indices_hist_long_lastdate, by = "sector_short") %>%
  left_join(MXWO_index_hist, by = "date") %>% 
  #nu overal de laatste gewichten ernaast (many-to-many)
  left_join(etf_sector_weights_long, by = "sector_short", relationship = "many-to-many") %>%
  #neemt gewicht op lastdate van sector in een ETF en vermenigvuldigt dat met de ratio sector_index op t/sector_index op lastdate
  mutate(weight = weight_lastdate * index_value/index_value_lastdate) %>%
  #telt niet helemaal op tot 1 hoe verder je terug gaat, dus ...
  group_by(date, ETF) %>%
  mutate(weight = weight/sum(weight)) %>%
  filter(ETF %in% ETF_tickers_equities_sector_none$ticker) %>%
  select(date, ETF, sector, weight) %>%
  ungroup()
```

```{r all_tickers_sector_weights}
#gedachtengang: doel is een long table met datum, ticker, sector en weight, voor alle etf's minus XDWH en WTCH en EUNS is hierboven een historische sectorsamenstelling geschat
#de rest (WTCH, XDWH, EUNS en de individuele tickers) heeft een statische samenstelling, maar ook die moeten in die long tabel komen

ticker_sector_weights_hist_date <- function(date) {
  all_sector_weights %>%
    select(-(IWDA_NA:IJR_US), WTCH_NA, XDWH_GY) %>%
    pivot_longer(-sector, names_to = "ticker", values_to = "weight") |>
    mutate(date = date)
}
#functie die een datum eraan plakt
ticker_sector_weights_hist <-
  map(unique(etf_sector_weights_hist$date), ticker_sector_weights_hist_date) %>%
  bind_rows() %>%
  select(date, ticker, sector, weight)
#en nu de bestaande etf_sector_weights_hist eraan plakken

ticker_sector_weights_hist <-
  bind_rows(etf_sector_weights_hist %>% rename(ticker = ETF),
            ticker_sector_weights_hist)

holdings_dates_long <-
  portfolios_tabel %>%
  left_join(holdings, by = "ticker") %>%
  #door de join ook de lege tickers erbij
  select(date, portfolio, ticker, shares)

pf_sector_weights_date <- function(portfolio = "VP100", asof_date = lastdate) {
  tickers <-
    holdings_dates_long %>%
    filter(date == asof_date, portfolio == !!portfolio, shares > 0) %>%
    ungroup() %>%
    select(ticker)
  ticker_sector_weights_hist %>%
    filter(date == asof_date, ticker %in% tickers$ticker) %>%
    left_join(pf_weights(portfolio, asof_date), by = "ticker") %>%
    mutate(weight = weight.x*weight.y) %>%
    group_by(sector) %>%
    summarise(weight = sum(weight))
}

mxwo_sector_weights_date <- function(asof_date = lastdate) {
  ticker_sector_weights_hist %>% filter(ticker == "IWDA_NA", date == asof_date) %>% select(sector, weight)
}

```

::: panel-tabset
```{r portfolio_country_region_weights}

BM_weight_RD <- function(portfolio, RDRM = "RDRM") {
  if (portfolio %in% c("RD100", "VP100")) {BM_weight_RD <- 1}
  else if (portfolio =="RD70") {BM_weight_RD <- 0.7}
  else if (portfolio == "RD30") {BM_weight_RD <- 0.3}
  else {BM_weight_RD <- 0.5}
  if(RDRM == "RD") {BM_weight_RD <- 1} else {BM_weight_RD <- BM_weight_RD}
  return(BM_weight_RD)
}

`%notin%` <- Negate(`%in%`)

pf_bm_ou_weights_tabel <- function(portfolio = "RD50" , item = "region", RDRM = "RDRM", asof_date = lastdate) {
  #tabel ophalen afh van "item"
  all_item_weights <- eval(sym(str_c("all_", item, "_weights"))) ##moet anders, om ook historisch te kunnen doen
  BM_weight_RD <- BM_weight_RD(portfolio, RDRM)
 #tickers en gewichten van RD of RDRM selectie uit de portefeuille
  pf_weights <- pf_portfolio(portfolio, asof_date) %>%
    {if (RDRM == "RD") filter(., RDRM == "RD") else filter(., RDRM == "RD" | RDRM == "RM")} %>% select(ticker, weight)
  all_item_weights <-
    all_item_weights %>% mutate(BM = IWDA_NA * BM_weight_RD + NL0_730 * (1 - BM_weight_RD)) #zomaar een bond
  #maak etf_item_weights met tickers en regio- landen- valutagewichten per ticker uit de holdings
  all_item_weights2 <- all_item_weights %>% select(all_of(item), pf_weights$ticker)
  for (symbol in pf_weights$ticker) {
    #zoek gewicht op van holding
    symbol_weight <- pf_weights %>% filter(ticker == symbol) %>% select(weight) %>% as.double()
    #vermenigvuldig dit gewicht met gewicht in regio, land, valuta, sector
    all_item_weights2 <- all_item_weights2 %>% mutate(!!sym(symbol) := !!sym(symbol) * symbol_weight)
  }
  #sommeer rijen
   all_item_weights2 %<>%
    #kolom weight met som van de rijen
    mutate(weight = rowSums(select(., -all_of(item)))) %>%
    mutate(weight = weight/sum(weight)) %>%
    select(all_of(item), weight) %>%
    #naast benchmark zetten
    left_join(select(all_item_weights, all_of(item), BM), by = item) %>%
    mutate(ou = weight-BM)
    #totaalrij toevoegen
    summarize(all_item_weights2, !!sym(item):= "Totaal", weight = sum(weight), BM = sum(BM), ou = sum(ou)) %>%
    bind_rows(all_item_weights2, .) %>%
    rename(!!(portfolio) := weight) %>%
    rename(!!str_c("BM_", (portfolio)):=BM) %>%
    rename(!!str_c("OU_", (portfolio)):=ou) %>%
    {if(RDRM == "RD") {filter(., !!sym(item) %notin% c("Staatsobligaties", "Credits", "Cash"))} else {filter(., !!sym(item) != "None")}}
}

bm_sector_weights_date <- function(asof_date = lastdate, BM_weight_RD = 1) {
  mxwo_sector_weights_date(asof_date) %>% mutate(weight = ifelse(sector == "Obligaties", (1-BM_weight_RD), weight * BM_weight_RD))
}

#voor historische sectorgewichten
pf_bm_ou_sector_weights_hist_tabel <- function(portfolio = "VP100", RDRM = "RDRM", asof_date = lastdate) {
  BM_weight_RD <- BM_weight_RD(portfolio, RDRM)
  pf_sector_weights <- pf_sector_weights_date(portfolio, asof_date)
  if(RDRM == "RD") {RM_weight_pf_adj <- pf_sector_weights %>% filter(!sector %in% c("Cash", "Staatsobligaties", "Credits")) %>% summarize(sum_RM = sum(weight)) %>% as.double()}
  else {RM_weight_pf_adj <-1}
  if(RDRM == "RD") {pf_sector_weights <- filter(pf_sector_weights, !sector %in% c("Cash", "Staatsobligaties", "Credits"))} else {pf_sector_weights <- pf_sector_weights}
  pf_sector_weights  %>% mutate(weight = weight/RM_weight_pf_adj) %>%
    left_join(bm_sector_weights_date(asof_date, BM_weight_RD), by = "sector") %>%
    mutate(OU = weight.x - weight.y) %>%
    rename(!!portfolio := weight.x) %>%
    rename(!!str_c("BM_", (portfolio)) := weight.y) %>%
    rename(!!str_c("OU_", (portfolio)) := OU) %>%
    mutate(sector = factor(sector, levels = sector_levels)) %>% arrange(sector)
}

#=====long formaat maken voor export
#sectoren
pf_bm_ou_sector_weights_long <- function(portfolio = "RD50", RDRM = "RD") {
  pf_bm_ou_sector_weights_hist_tabel(portfolio, RDRM) %>%
  rename("pf" := !!portfolio, "BM" = starts_with("BM"), "OU" = starts_with("OU")) |> 
    mutate(portfolio = portfolio) |> 
    select(portfolio, everything())
}
#regio's
pf_bm_ou_weights_tabel_long <- function(portfolio = "RD50", item = "region", RDRM = "RD", asof_date = lastdate) {
  pf_bm_ou_weights_tabel(portfolio = portfolio, item, RDRM, asof_date) %>%
    rename("pf" := !!portfolio, "BM" = starts_with("BM"), "OU" = starts_with("OU"))|> 
    mutate(portfolio = portfolio) |> 
    select(portfolio, everything())
}

#alle pfs onder elkaar voor export sectoren
pf_bm_ou_sector_weights_long_all <-
  map_dfr(portfolio_levels, pf_bm_ou_sector_weights_long) %>%
  mutate(date = as.Date(lastdate)) %>%
  select(date, portfolio, everything())

#alle pfs onder elkaar voor export regio's
pf_bm_ou_region_weights_long_all <-
  map_dfr(portfolio_levels, pf_bm_ou_weights_tabel_long, item = "region") %>%
  mutate(date = as.Date(lastdate)) %>%
  select(date, portfolio, everything())

#exporteren sectoren en regio's
if(bij_pp) {
  pf_bm_ou_sector_weights_long_all |> write_rds("/Users/pieter/Library/CloudStorage/OneDrive-Personal/R Projects/Beleggingsvoorstel/shiny/pf_bm_ou_sector_weights_long_all.rds")
  pf_bm_ou_region_weights_long_all |> write_rds("/Users/pieter/Library/CloudStorage/OneDrive-Personal/R Projects/Beleggingsvoorstel/shiny/pf_bm_ou_region_weights_long_all.rds")
}
```

```{r portfolio_country_region_weights_tabel_function}

tabel_portfolio_country_region_sector_weights <- function(item = "region", RDRM = "RDRM", asof_date = lastdate){
  map(portfolio_levels, pf_bm_ou_weights_tabel, item, RDRM, asof_date) %>%
    bind_cols() %>%
    select(1, where(is.numeric))
}

tabel_ou_portfolio_country_region_sector_weights <- function(item = "region", RDRM = "RDRM", asof_date = lastdate){
  map(portfolio_levels, pf_bm_ou_weights_tabel, item, RDRM, asof_date) %>%
    bind_cols() %>%
    rename(!!sym(item):= 1) %>%
    select(1, where(is.numeric))
}
```

```{r nice_country_etc_table}

nice_country_etc_table <- function(item = "country", RDRM = "RD", asof_date = snapshot_date) {
  #niet snapshot_date, want van bm's is deze ook alleen beschikbaar per ultimo's
  titelitem <-
    case_when(item == "country" ~ "Landen",
              item == "currency" ~ "Valuta",
              item == "currency_2" ~ "Valuta (groepen) ",
              item == "sector" ~ "Sector",
              item == "region" ~ "Regio")
  titelportefeuille <-
    case_when(RDRM == "RDRM" ~ "gehele",
              RDRM == "RD" ~ "RD-deel")
  tabel_portfolio_country_region_sector_weights(item = item, RDRM = RDRM, asof_date = asof_date) %>%
  mutate_if(is.numeric, ~round(.*100, 1)) %>%
  ungroup() |> 
  #
  rename_with(~str_c(., "_"), ends_with("0")) |>
  #
  gt() |> 
  gt_pfs_ou() |> 
  tab_header(str_c(titelitem, "gewichten (%) in ", titelportefeuille, " portefeuilles en benchmarks, ", format(asof_date, "%d-%b-%y"))) |> 
  gt_font_padding_align()
}
```

### Regiogewichten RD

```{r portfolio_region_weights_tabel}
nice_country_etc_table(item = "region", RDRM = "RD", asof_date = snapshot_date)

```

### Valuta (groepen) - portefeuilleniveau

```{r portfolio_currency_2_weights_tabel}
nice_country_etc_table(item = "currency_2", RDRM = "RDRM", asof_date = snapshot_date) %>%
  tab_footnote("USD (related): USD, CAD, AUD, HKD, SGD en NZD, EUR (related): EUR, DKK, SEK, Other: NOK en ILS")
```

### Landengewichten RD

```{r portfolio_country_weights_tabel}
nice_country_etc_table(item = "country", RDRM = "RD", asof_date = snapshot_date)
```

### ETF's

```{r etf_country_region_weights}

#VFEM eruit hier
etf_region_country_currency_weights_main <-
  etf_region_country_currency_weights %>%
  select(region, currency_2, currency, country, etf_levels) %>%
  arrange(region, currency_2, country, currency)

etf_region_country_currency_weights_total <-
  tribble(~region, ~currency_2, ~currency, ~country, "Totaal", "", "", "") %>%
  bind_cols(
    etf_region_country_currency_weights_main %>%
    summarize_if(is.numeric, sum))

etf_region_country_currency_weights_main %>%
  bind_rows(etf_region_country_currency_weights_total) %>%
  mutate_if(is.numeric, ~round(.*100, 2)) %>%
  rename(ccy = currency,
         ccy_group = currency_2) %>%
  ungroup() |> 
  #collapse rows oplossing
  mutate(row = row_number(), .by = c(region, ccy_group)) %>%
  mutate(across(c(region, ccy_group), ~ifelse(row == 1, ., ""))) %>%
  select(-row) |> 
  #einde collapse rows oplossing
  gt() |> 
  gt_cols_align() |> 
  fmt_number(columns = where(is.numeric), decimals = 1) |> 
  sub_zero(zero_text = " ") |> 
  opt_row_striping() |> 
  gt_last_row_bold() |> 
  gt_first_col_bold() |>  
  gt_delete_first_col_label() |> 
  gt_font_padding_align() |> 
  tab_header(str_c("Regio-, landen, valuta gewichten (%) Equity ETF's (datum updates zie voetnoot)")) |> 
  tab_footnote(str_c("Bron: ", etf_update_date("NTSCLBE_NA"), ", overige: bloomberg (BQL)"))
 
```
:::

## Sectoren

::: panel-tabset
#### RD-deel

```{r portfolios_rdrm_sector_weights_tabel}
nice_country_etc_table(item = "sector", RDRM = "RD")
```

#### Portefeuilleniveau

```{r portfolio_rdrm_sector_weights_tabel}
nice_country_etc_table(item = "sector", RDRM = "RDRM")
```

#### ETF's

```{r etf_sector_weights_tabel}

etf_sector_weights_main <-
  etf_sector_weights %>%
  filter(sector %in% sector_levels_RD)

etf_sector_weights_total <-
  tribble(~sector, "Totaal") %>%
  bind_cols(etf_sector_weights %>% summarise_if(is.numeric, sum))

etf_sector_weights_main %>%
  bind_rows(etf_sector_weights_total) %>%
  select(c(sector, etf_levels)) %>% #VFEM en VIG eruit
  mutate_if(is.numeric, ~round(.*100, 2)) %>%
  gt() |> 
  gt_cols_align() |> 
  fmt_number(columns = where(is.numeric), decimals = 1) |> 
  sub_zero(zero_text = " ") |> 
  opt_row_striping() |> 
  gt_last_row_bold() |> 
  gt_first_col_bold() |>  
  gt_delete_first_col_label() |> 
  tab_header(str_c("Sectorgewichten (%) Equity ETF's (datum updates zie voetnoot)")) |> 
  tab_footnote(str_c("Bron: ", etf_update_date("NTSCLBE_NA"), ", overige: bloomberg (BQL)")) |> 
  gt_font_padding_align() 
```

#### ETF's barchart

```{r etf_sector_weights_barchart}

etf_sector_weights_main %>%
  select(sector, etf_levels) %>%
  pivot_longer(values_to = "weight", cols = all_of(etf_levels)) %>%
  rename(ETF = name) %>%
  mutate(ETF = factor(ETF, levels = etf_levels)) %>%
 ggplot() +
  geom_col(aes(x = ETF, y = weight, fill = sector), alpha = 0.6, col = bmgray) +
  scale_y_continuous(labels = scales::percent_format(accuracy = 1)) +
  charts_custom_theme +
  theme(legend.position = "bottom") +
  theme(axis.text.x = element_text(angle = 90)) +
  labs(title = "Sectorgewichten ETF's") +
  theme(plot.caption = element_text(size = 5, hjust = 0)) +
  labs(caption = str_c("Bron: ", etf_update_date("NTSCLBE_NA"), ", overige: bloomberg (BQL)"))
```

```{r sector_RD_wts_pf_vs_bm_hist_vp_vf}

#sectorgewichten pf en bm op een datum voor een pf met de datum als kolom erbij
pf_bm_ou_sector_weights_hist_tabel_date <- function(portfolio = "VP100", RDRM = "RDRM", asof_date = lastdate) {
  pf_bm_ou_sector_weights_hist_tabel(portfolio, RDRM, asof_date) %>%
    mutate(date = asof_date, portfolio = portfolio)
}

#sectorgewichten pf en bm op alle data sinds start_attr
sector_RD_wts_pf_vs_bm_hist <- function(portfolio = "VP100", start_date = start_date_vp_vf) {
  valid_dates <- dates$date[dates$date >= start_date]
  map(valid_dates, ~ pf_bm_ou_sector_weights_hist_tabel_date(portfolio, RDRM = "RD", asof_date = .x)) %>%
    bind_rows() %>%
    rename(pf_wt = !!sym(portfolio), bm_wt = str_c("BM_", portfolio), OU_wt = str_c("OU_", portfolio)) %>%
    mutate(sector = factor(sector, levels = sector_levels_RD)) %>%
    select(date, portfolio, sector, pf_wt, bm_wt, OU_wt)
}
#sectorgewichten pf en bm op een reeks data voor vp en vf
sector_RD_wts_pf_vs_bm_hist_all_pfs <-
  map_dfr(portfolio_levels, sector_RD_wts_pf_vs_bm_hist)

# Error in `map()`:
# ℹ In index: 1.
# Caused by error in `map()`:
# ℹ In index: 1.
# Caused by error in `charToDate()`:
# ! character string is not in a standard unambiguous format
# Run `rlang::last_trace()` to see where the error occurred.
```

#### Historie sector O/U, RD

```{r sector_RD_wts_pf_vs_bm_hist_vp_chart}
#| fig-height: 9

sector_RD_wts_pf_vs_bm_hist_all_pfs %>%
  rowwise() %>%
  mutate(portfolio = factor(portfolio, levels = portfolio_levels),
         sector_abbr = abbreviate(sector),
         sector_abbr = factor(sector_abbr, levels = sector_levels_RD_abbr)) %>%
  group_by(portfolio, sector) %>%
  ggplot(aes(x = date, y = OU_wt)) +
  geom_line(aes(col = sector), linewidth = 1.2 , alpha = 0.6) +
  geom_hline(yintercept = 0, col = "grey60", linetype = "dashed") +
  scale_y_continuous(labels = scales::percent_format(accuracy = 1)) +
  scale_x_date(date_labels = "%y") +
  facet_grid(sector_abbr ~ portfolio) +
  labs(x = "", y = "") +
  theme_bw() +
  theme(legend.position = "none") +
  ggtitle("Sector O/U gewichten, RD-gedeelte")

```
:::

# Risk/return

## Return portefeuilles en benchmarks

::: panel-tabset
```{r portfolio_returns_vs_bm}
#HOOFDSTUK 2 - historische samenstelling portefeuilles
#BM returns maken

bm_returns_eur_long <-
  bm_prices_eur_long  %>%
  tq_transmute(mutate_fun = periodReturn, type = "arithmetic") %>%
  #eerste rij met nullen verwijderen
  #filter(date != min(dates$date)) %>%
  drop_na() #eerste datum van dailies geeft een NA return

bm_returns_eur <-
  bm_returns_eur_long %>%
  #weer horizontaal
  pivot_wider(names_from = ticker, values_from = monthly.returns)

#waarde pf in eur op maandeindes sinds eind 2017
pf_values_kolom <-
  portfolios_tabel |>
  group_by(date, portfolio) |>
  summarise(value_eur = sum(value_eur)) |>
  ungroup()

portfolio_values_kolom <-
  portfolios_tabel |>
  group_by(date, portfolio) |>
  summarise(value_eur = sum(value_eur)) |>
  ungroup()

#waarde pf RD in eur op maandeindes sinds eind 2017
pf_values_kolom_RD <-
  portfolios_tabel |>
  filter(RDRM == "RD") |> 
  group_by(date, portfolio) |>
  summarise(value_eur = sum(value_eur))

#waarde pf RM in eur op maandeindes sinds eind 2017
pf_values_kolom_RM <-
  portfolios_tabel |>
  filter(RDRM == "RM") |>
  group_by(date, portfolio) |>
  summarise(value_eur = sum(value_eur))

#waarde pf in eur op maandeindes sinds eind 2017 verdeeld over RD en RM (op basis van de AIRS files)
pf_values_kolommen_RDRM <-
  pf_values_kolom_RD |>
  rename(RD = value_eur) |>
  left_join(pf_values_kolom_RM, by = c("date", "portfolio"))|>
  rename(RM = value_eur) |>
  ungroup()

pf_benchmark_name <- function(portfolio = "VP100") {
    case_when(portfolio == "VP100" ~ "MSDEWIN",
              portfolio == "RD100" ~ "MSDEWIN",
              portfolio =="RD70" ~ "BM7030",
              portfolio == "RD30" ~ "BM3070",
              TRUE ~ "BM5050")
}

#pf vs bm returns, voor long ###doet niet aan DIETZ daarom alleen voor portefeuille als geheel
#voor performance van RD en RM apart zie pf_bm_returns_weights_kolommen_RDRM_Dietz_tabel
pf_vs_bm_returns_kolom <- function(portfolio = "VP100") {
  pf_name <- portfolio
  benchmark_name <- pf_benchmark_name(portfolio)
  benchmark_start_date <- bm_returns_eur_long$date[1]
  pf_start_date <- pf_values_kolom |> filter(portfolio == !!portfolio) |> pull(date) |> min()
  pf_values_kolom %>%
    filter(portfolio == !!portfolio) %>%
    mutate(pf_rt = value_eur/lag(value_eur) - 1) %>%
    select(date, pf_rt) %>%
    left_join(bm_returns_eur %>% select(date, all_of(benchmark_name)), by = "date") %>%
    rename(BM_rt = all_of(benchmark_name)) %>%
    filter(date >= max(pf_start_date, benchmark_start_date)) |>  #vanaf beschikbaarheid benchmarks
    mutate(BM_rt = ifelse(row_number() == 1, 0, BM_rt),
           pf_rt = ifelse(row_number() == 1, 0, pf_rt),
           portfolio = pf_name)# %>%
   # 
}

pf_vs_bm_index_kolom <- function(portfolio = "VP100", start_date = start_date_attr, end_date = snapshot_date) {
  pf_vs_bm_returns_kolom(portfolio = portfolio) %>%
    filter(date >= start_date,
           date <= end_date) %>%
    mutate(pf_rt = ifelse(date == min(.$date), 0, pf_rt),
           BM_rt = ifelse(date == min(.$date), 0, BM_rt),
           pf_index = cumprod(1 + pf_rt),
           BM_index = cumprod(1 + BM_rt)) %>%
    select(-c(pf_rt, BM_rt))
}

#charts met index pf en BM in
return_charts <- function(start_date = start_date_attr, end_date = snapshot_date, pfs = portfolio_levels) {
    map_dfr(pfs, pf_vs_bm_index_kolom, start_date = start_date, end_date = end_date) %>%
    mutate(pf_index = pf_index - 1,
           BM_index = BM_index - 1) %>%
    pivot_longer(cols = pf_index:BM_index, names_to = "pf_bm", values_to = "index") |>
    left_join(portfolios_colors, by = "portfolio") |>
    mutate(portfolio = factor(portfolio, levels = portfolio_levels),
           color = ifelse(pf_bm == "BM_index", bmgray, color),
           alpha = ifelse(pf_bm == "BM_index", .7, 1),
           linewidth = ifelse(pf_bm == "BM_index", 1, 2)) |>
  ggplot() +
    geom_line(aes(x = date, y = index, col = color, group = pf_bm, alpha = alpha, linewidth = linewidth))+
    scale_color_identity() +
    scale_alpha_identity() +
    scale_linewidth_identity() +
    scale_x_date(breaks = datum_breaks(start_date, end_date), date_labels = "%b-%y")  +
    scale_y_continuous(labels = scales::percent_format(accuracy = 1)) +
    labs(x = "", y = "") +
      ggtitle(str_c("Portefeuille vs benchmark van ", day(start_date),"-", month(start_date, label = TRUE),
                               "-", year(start_date), " t/m ", day(end_date),"-", month(end_date, label = TRUE), "-", year(end_date))) +
      facet_wrap(~portfolio, ncol = 8) +
      theme_bw() +
      theme(legend.position = "none",
            axis.text.x = element_text(angle = 90, vjust =.5),
            strip.text = element_text(size = if(length(pfs) == 1) 12 else 8),
            plot.title = element_text(hjust = 0.5))
}

return_barchart<- function(start_date = start_date_attr, end_date = snapshot_date, portfolio = "VP100") {
  pf_vs_bm_returns_kolom(portfolio = portfolio) %>%
    filter(date >= start_date,
           date <= end_date) %>%
    pivot_longer(cols = c(pf_rt, BM_rt), values_to = "return") |>   
    left_join(portfolios_colors, by = "portfolio") %>%
    mutate(portfolio = factor(portfolio, levels = portfolio_levels),
           color = ifelse(name == "BM_rt", bmgray, color),
           alpha = ifelse(name == "BM_rt", .7, 1),
           linewidth = ifelse(name == "BM_rt", 1, 2)) %>%
    ggplot() +
    geom_col(aes(x = date, y = return, group = name, fill = color, alpha = alpha), position = "dodge") +
    scale_fill_identity() +
    scale_alpha_identity() +
    scale_y_continuous(labels = scales::percent_format(accuracy = 1)) +
    labs(x = "", y = "") +
    ggtitle(str_c("Portefeuille ", pf, " vs benchmark van ", day(start_date),"-", month(start_date, label = TRUE),
                               "-", year(start_date), " t/m ", day(end_date),"-", month(end_date, label = TRUE), "-", year(end_date))) +
    theme_bw() +
    theme(legend.position = "none",
          axis.text.x = element_text(angle = 90, vjust =.5),
          plot.title = element_text(hjust = 0.5))
}

#wegschrijven return historie naar rds voor beleggingsvoorstel
return_history_si <- 
  map_dfr(portfolio_levels, pf_vs_bm_index_kolom, start_date = start_date_sector_indices) 
if(bij_pp) {
write_rds(return_history_si, "/Users/pieter/Library/CloudStorage/OneDrive-Personal/R Projects/Beleggingsvoorstel/shiny/return_history_si.rds")
}
```

### ytd

```{r portfolio_returns_vs_bm_ytd_ssd}

return_charts(start_date = last_ultimo_year, end_date = snapshot_date)
```

### mtd

```{r portfolio_returns_vs_bm_mtd_ssd}

return_charts(start_date = lastdate, end_date = snapshot_date)
```

### qtd

```{r portfolio_returns_vs_bm_qtd_ssd}

return_charts(start_date = last_quarter_end, end_date = snapshot_date)
```

### lm

```{r portfolio_returns_vs_bm_lm_ssd}

return_charts(start_date = next_to_lastdate, end_date = lastdate)
```

### lq

```{r portfolio_returns_vs_bm_lq}

return_charts(start_date = last_quarter_start, end_date = last_quarter_end)
```

### `r last_year`

```{r portfolio_returns_vs_bm_ytd_ld}

return_charts(start_date = next_to_last_ultimo_year, end_date = last_ultimo_year)
```

### `r last_year - 1`

```{r portfolio_returns_vs_bm_2023}

return_charts(start_date = next_to_last_ultimo_year2, end_date = next_to_last_ultimo_year)
```

### `r last_year - 2`

```{r portfolio_returns_vs_bm_2022}

return_charts(start_date = next_to_last_ultimo_year3, end_date = next_to_last_ultimo_year2)
```

### vanaf start VD50

```{r portfolio_returns_vs_bm_start_date_vd}
return_charts(start_date = start_date_vd, end_date = snapshot_date, pfs = c("DZ50", "RD100", "RD50","RD70", "RD30", "VP100", "VP50", "VD50"))
```

### vanaf start DZ50

```{r portfolio_returns_vs_bm_start_date_fd}
return_charts(start_date = start_date_fd, pfs = c("RD100", "RD50","RD70", "RD30", "VP100", "VP50", "DZ50")) 
```
### vanaf start VP

```{r portfolio_returns_vs_bm_start_date_vp_vf_si}
return_charts(start_date = start_date_vp_vf, pfs = c("RD100", "RD50","RD70", "RD30", "VP100", "VP50"))
```
### vanaf start RD50

```{r portfolio_returns_vs_bm_start_date_hz_st_ts_ff_si}
return_charts(start_date = start_date_sector_indices, pfs = c("RD100", "RD50","RD70", "RD30"))
```

### hele jaren vanaf 2014

```{r portfolio_returns_vs_bm_hele_jaren}

year_ends_incl_snapshotdate <- c(dates$date[month(dates$date) == 12 & day(dates$date) == 31], max(return_history_si$date))
  #c(map2(as.Date(start_date_sector_indices), lastdate, seq, "year"), as.Date(lastdate))

return_history_si |>
  mutate(month = month(date), year = year(date)) |>
  group_by(portfolio) |>
  filter(date %in% year_ends_incl_snapshotdate) |>
  mutate(jaar_rendement = pf_index/lag(pf_index) - 1, jaar_rendement_BM = BM_index/lag(BM_index) - 1) |>
  select(year, portfolio, jaar_rendement, jaar_rendement_BM) |>
  pivot_longer(names_to = "name", cols = starts_with("jaar")) |>
  mutate(portfolio = ifelse(str_detect(name, "BM"), str_c(portfolio, "_BM"), portfolio)) |>
  select(-name) |>
  pivot_wider(names_from = portfolio, values_from = value) |>
  select(jaar = year, 
         ends_with("50"), "BM50" = RD50_BM, 
         ends_with("RD30"), "BM30" = RD30_BM, 
         ends_with("RD70"), "BM70" = RD70_BM, 
         RD100, VP100, "BM100" = RD100_BM) |>
  filter(jaar > 2013) |>
  arrange(desc(jaar)) |>
  gt() |>
  fmt_percent(columns = -1, decimals = 1) |>
  tab_header(title = str_c("Jaarrendementen modelportefeuilles vs benchmarks t/m ", as.Date(max(return_history_si$date)))) |> 
  tab_spanner(label = " RD50 ", columns = c(ends_with("50"))) |>
  tab_spanner(label = " RD30 ", columns = c(ends_with("30"))) |>
  tab_spanner(label = " RD70 ", columns = c(ends_with("70"))) |>
  tab_spanner(label = " RD100 ", columns = c("RD100", "VP100", "BM100")) |>
  gt_cols_align() |>
  sub_zero(zero_text = " ") |>
  opt_row_striping() |>
  gt_first_col_bold() |>
  gt_delete_first_col_label() |>
  tab_footnote(str_c("Benchmark aandelen: t/m dec-2016 50% MSCI Europe met netto dividenden (M7EU)/ 50% MSCI World met netto dividenden (MSDEWIN), \n
  vanaf jan-2017 100% MSCI World met netto dividenden (MSDEWIN). Benchmark obligaties: 2014 BENEGA, daarna JPM.\n
  Maandelijks rebalanced t/m dec-2016, daarna dagelijks")) |>
  gt_font_padding_align() |>
  gt_col_pfs_colors()

```
:::

## Distributie van maandelijkse returns portefeuilles en benchmarks

```{r portfolio_bm_histo}

pf_bm_returns_si <-
  map_dfr(portfolio_levels, pf_vs_bm_returns_kolom) %>%
  left_join(portfolios_colors, by = "portfolio") %>%
  mutate(portfolio = factor(portfolio, levels = portfolio_levels)) %>%
  filter(!is.na(BM_rt)) |> #alleen vanaf het moment dat benchmark returns bekend zijn
  filter(date > min(date)) |> #eerste datum geeft nullen
  group_by(portfolio)

  #voor gebruik in returns distributie en rolling sd en te charts
portfolio_bm_histo <- function(start_date = start_date_attr, end_date = snapshot_date, portfolios = portfolio_levels) {
  pf_bm_returns_si %>%
      filter(date >= start_date,
         date <= end_date,
         portfolio %in% portfolios) |> 
  pivot_longer(cols = c(pf_rt, BM_rt), values_to = "returns") %>%
  mutate(fill = ifelse(name == "pf_rt", color, bmgray),
         alpha = ifelse(name == "pf_rt", .9, .5)) %>%
  ggplot(aes(x = returns, fill = fill, alpha = alpha)) +
    scale_fill_identity() +
    scale_alpha_identity() +
    geom_histogram(position = "dodge") +
    scale_x_continuous(labels = scales::percent_format(accuracy = 1), breaks = c(0, 10, 20)) +
    facet_wrap(~portfolio, ncol = 1) +
    ggtitle("Maandelijkse returns portefeuille en benchmark",
         subtitle = str_c("van ",  
                          day(start_date),"-", month(start_date, label = TRUE), "-", year(start_date), " t/m ",
                          day(end_date),"-", month(end_date, label = TRUE), "-", year(end_date))) +
  charts_custom_theme +
    theme(axis.text.x = element_text(size = if(length(portfolios) == 1) 12 else 6),
          strip.text = element_text(size = if(length(portfolios) == 1) 12 else 8),
          plot.title = element_text(hjust = 0.5))
}

portfolio_vs_bm_histo <- function(start_date = start_date_attr, end_date = snapshot_date, portfolios = portfolio_levels) {
  pf_bm_returns_si %>%
    mutate(pf_vs_bm = pf_rt - BM_rt) |> 
      filter(date >= start_date,
         date <= end_date,
         portfolio %in% portfolios) |> 
  pivot_longer(cols = c(pf_vs_bm), values_to = "rel_returns") %>%
  mutate(fill = color,
         alpha = .9) %>%
  ggplot(aes(x = rel_returns, fill = fill, alpha = alpha)) +
    scale_fill_identity() +
    scale_alpha_identity() +
    geom_histogram(position = "dodge") +
    scale_x_continuous(labels = scales::percent_format(accuracy = 1)) +
    scale_y_continuous(breaks = c(0, 10, 20)) +
    facet_wrap(~portfolio, ncol = 1) +
    ggtitle("Maandelijkse returns portefeuille vs. benchmark",
         subtitle = str_c("van ",  
                          day(start_date),"-", month(start_date, label = TRUE), "-", year(start_date), " t/m ",
                          day(end_date),"-", month(end_date, label = TRUE), "-", year(end_date))) +
  charts_custom_theme +
    theme(axis.text.x = element_text(size = if(length(portfolios) == 1) 12 else 6),
          strip.text = element_text(size = if(length(portfolios) == 1) 12 else 8),
          plot.title = element_text(hjust = 0.5))
}
```

::: panel-tabset
### Portefeuilles en benchmarks

```{r portfolio_bm_histogram}
#| fig-height: 9
#| 
portfolio_bm_histo(start_date = lastdate - years(5), end_date = lastdate, portfolios = portfolio_levels)
```

### Portefeuilles minus benchmarks

```{r portfolio_vs_bm_histogram}
#| fig-height: 9

portfolio_vs_bm_histo(start_date = lastdate - years(5), end_date = lastdate, portfolios = portfolio_levels)
```

### Portefeuilles minus benchmarks tijdlijn

```{r portfolio_vs_bm_tijdlijn}
#| fig-height: 9

portfolio_bm_tijdlijn <- function(start_date = start_date_attr, end_date = snapshot_date, portfolios = portfolio_levels) {
  pf_bm_returns_si |> 
  filter(date >= start_date,
         date <= end_date,
         portfolio %in% portfolios) |> 
  mutate(diff = pf_rt - BM_rt) |> 
  ggplot(aes(x=date, fill = color)) +
  geom_col(aes(y=diff)) +
  facet_wrap(~portfolio, ncol = 1) +
  scale_fill_identity() + 
  scale_x_date(breaks = datum_breaks(start_date = start_date_sector_indices, end_date = lastdate)) +
  scale_y_continuous(labels = scales::percent_format(accuracy = 1)) +
  theme(plot.title = element_text(hjust = 0.5)) + 
  ggtitle("Performance verschillen met de benchmark",
         subtitle = str_c("van ",  
                          day(start_date),"-", month(start_date, label = TRUE), "-", year(start_date), " t/m ",
                          day(end_date),"-", month(end_date, label = TRUE), "-", year(end_date))) +
  charts_custom_theme +
    theme(axis.text.x = element_text(size = if(length(portfolios) == 1) 12 else 6),
          strip.text = element_text(size = if(length(portfolios) == 1) 12 else 8),
          plot.title = element_text(hjust = 0.5))
}

portfolio_bm_tijdlijn()
```
:::

## Standaarddeviatie portefeuilles en benchmarks

```{r portfolio_stdev_vs_bm}
portfolio_stdev_vs_bm <- function(start_date = start_date_attr, end_date = snapshot_date, portfolios = portfolio_levels) {
  pf_bm_returns_si %>%
  filter(date >= start_date,
         date <= end_date,
         portfolio %in% portfolios) |> 
  reframe(pf = sd(pf_rt) * sqrt(12),
          bm = sd(BM_rt) * sqrt(12)) |> 
  left_join(portfolios_colors, by = "portfolio") |> 
  pivot_longer(cols = c(pf, bm), values_to = "standaarddeviatie") %>%
  mutate(portfolio = factor(portfolio, levels = portfolio_levels),
         name = factor(name, levels = c("pf", "bm")),
         fill = ifelse(name == "pf", color, bmgray),
         alpha = ifelse(name == "pf", .9, .5)) %>%
  ggplot(aes(x = name, y = standaarddeviatie, fill = fill, alpha = alpha)) +
    scale_fill_identity() +
    scale_alpha_identity() +
    geom_col(position = "dodge") +
    scale_y_continuous(labels = scales::percent_format(accuracy = 1)) +
    facet_wrap(~portfolio, ncol = 8) +
    ggtitle("Standaarddeviatie portefeuille en benchmark",
         subtitle = str_c("van ",  
                          day(start_date),"-", month(start_date, label = TRUE), "-", year(start_date), " t/m ",
                          day(end_date),"-", month(end_date, label = TRUE), "-", year(end_date))) +
    charts_custom_theme +
    theme(axis.text.x = element_text(size = if(length(portfolios) == 1) 12 else 6),
          strip.text = element_text(size = if(length(portfolios) == 1) 12 else 8),
          plot.title = element_text(hjust = 0.5))
}

portfolio_stdev_vs_bm(start_date = lastdate - years(5), end_date = lastdate, portfolios = portfolio_levels)
```

```{r data_voor_pf_bm_returns_sd_te_12_24}
pf_bm_returns_sd_te_12_24 <-
  pf_bm_returns_si %>%
  filter(date >= start_date_attr) %>%
  mutate(diff = pf_rt - BM_rt,
         te_12 = slide_dbl(diff, .f = sd, .before = 11, .complete = TRUE) * sqrt(12),
         te_24 = slide_dbl(diff, .f = sd, .before = 23, .complete = TRUE) * sqrt(12),
         pf_sd_12 = slide_dbl(pf_rt, .f = sd, .before = 11, .complete = TRUE) * sqrt(12),
         bm_sd_12 = slide_dbl(BM_rt, .f = sd, .before = 11, .complete = TRUE) * sqrt(12),
         pf_sd_24 = slide_dbl(pf_rt, .f = sd, .before = 23, .complete = TRUE) * sqrt(12),
         bm_sd_24 = slide_dbl(BM_rt, .f = sd, .before = 23, .complete = TRUE) * sqrt(12)) %>%
  select(-pf_rt, -BM_rt, -diff) %>%
  pivot_longer(cols = te_12:bm_sd_24, values_to = "standaarddeviatie") %>%
  mutate(portfolio = factor(portfolio, levels = portfolio_levels),
         name2 = str_sub(name, 1, 2),
         voor_kleur = str_c(portfolio, "_", name2),
         voor_kleur = factor(voor_kleur, levels =
                      c(c(rbind(str_c(portfolio_levels, "_", "pf"),
                                str_c(portfolio_levels, "_", "bm"))), #c(rbind wisselt af
                         str_c(portfolio_levels, "_", "te"))),
         name2 = ifelse(name2 == "pf", "portefeuille", ifelse(name2 == "bm", "benchmark", "te")),
         name2 = factor(name2, levels = c("portefeuille", "benchmark", "te")))
```

## Voortschrijdende standaarddeviaties

::: panel-tabset
### 12-maands

```{r portfolio_12_mrolling_sd_vs_bm}

max_sd_12 <- 
  pf_bm_returns_sd_te_12_24 %>% 
  ungroup() %>% 
  summarise(max = max(standaarddeviatie, na.rm = T)) %>% pull()
max_sd_12 <- 
  round(max_sd_12 + 0.01, 2)

pf_bm_returns_sd_te_12 <-
 pf_bm_returns_sd_te_12_24 %>%
   filter(str_detect(name, "sd_12")) %>%
   #code om geen dubbele benchmarks te tonen
   mutate(voor_kleur = 
            case_when(str_ends(voor_kleur, "RM50_bm") ~ "BM5050", 
                      str_ends(voor_kleur, "RM30_bm") ~ "BM7030",
                      str_ends(voor_kleur, "RM70_bm") ~ "BM3070",
                      str_ends(voor_kleur, "100_bm") ~ "MSDEWIN",
                      TRUE ~ voor_kleur),
          voor_kleur = str_remove(voor_kleur, "_pf"),
          color = ifelse(str_detect(name, "bm"), bmgray, color)) %>%
   filter(!(voor_kleur == "BM5050" & portfolio != "RD50"))
   #alleen RD50 bm

pf_bm_sd_12_roll <- function(start_date = start_date_attr, end_date = lastdate, portfolios = portfolio_levels) {
  pf_bm_returns_sd_te_12 %>%
    filter(date >= start_date,
           date <= end_date,
           portfolio %in% portfolios) |>
   ggplot(aes(x = date, y = standaarddeviatie, group = voor_kleur)) +
    geom_line(aes(colour = color), linewidth = 1.5) +
    scale_color_identity() +
    scale_x_date(limits = c(as.Date(start_date), as.Date(end_date) + 200), breaks = datum_breaks(start_date, end_date), date_labels = "%Y") +
    scale_y_continuous(labels = scales::percent_format(accuracy = 1), limits = c(0, max_sd_12)) +
    geom_dl(aes(x = date, y = standaarddeviatie, label = voor_kleur, color = color), 
            method = list(dl.trans(x = x + .4), cex = 1, "last.polygons")) +
    ggtitle("12-maands voortschrijdende standaarddeviatie") +
    charts_custom_theme
}

pf_bm_sd_12_roll()
```

```{r portfolio_12_mrolling_sd_vs_bm_single_pf_vp100}

max_sd_12 <- 
  pf_bm_returns_sd_te_12_24 %>% 
  ungroup() %>% 
  summarise(max = max(standaarddeviatie, na.rm = T)) %>% pull()
max_sd_12 <- 
  round(max_sd_12 + 0.01, 2)

pf_bm_returns_sd_te_12 <-
 pf_bm_returns_sd_te_12_24 %>%
   filter(str_detect(name, "sd_12")) %>%
   #code om geen dubbele benchmarks te tonen
   mutate(voor_kleur = 
            case_when(str_ends(voor_kleur, "RM50_bm") ~ "BM5050", 
                      str_ends(voor_kleur, "RM30_bm") ~ "BM7030",
                      str_ends(voor_kleur, "RM70_bm") ~ "BM3070",
                      str_ends(voor_kleur, "100_bm") ~ "MSDEWIN",
                      TRUE ~ voor_kleur),
          voor_kleur = str_remove(voor_kleur, "_pf"),
          color = ifelse(str_detect(name, "bm"), bmgray, color)) %>%
   filter(!(voor_kleur == "BM5050" & portfolio != "RD50"))
   #alleen RD50 bm
```

### 24-maands

```{r portfolio_24_mrolling_sd_vs_bm}
pf_bm_returns_sd_te_24 <-
 pf_bm_returns_sd_te_12_24 %>%
   filter(str_detect(name, "sd_24")) %>%
   #code om geen dubbele benchmarks te tonen
   mutate(voor_kleur = 
            case_when(str_ends(voor_kleur, "RM50_bm") ~ "BM5050", 
                      str_ends(voor_kleur, "RM30_bm") ~ "BM7030",
                      str_ends(voor_kleur, "RM70_bm") ~ "BM3070",
                      str_ends(voor_kleur, "100_bm") ~ "MSDEWIN",
                      TRUE ~ voor_kleur),
          voor_kleur = str_remove(voor_kleur, "_pf"),
          color = ifelse(str_detect(name, "bm"), bmgray, color))# %>%
   #filter(!(voor_kleur == "BM5050" & portfolio != "RD50"))
   #alleen RD50 bm hier

pf_bm_sd_24_roll <-function(start_date = start_date_attr, end_date = lastdate, portfolios = portfolio_levels) {
  # if(length(portfolios == 1)) {
  # df <- 
  #   pf_bm_returns_sd_te_24 %>%
  #   filter(date >= start_date,
  #          date <= end_date) |> 
  #   filter(voor_kleur %in% c(portfolios) | 
  #           str_detect(voor_kleur, str_c("BM", str_sub(portfolios, 3, 4))))
  # } 
  # else {
  df <- 
    pf_bm_returns_sd_te_24 %>%
    filter(date >= start_date,
           date <= end_date,
           portfolio %in% portfolios)
  #}
    
  df |> 
    ggplot(aes(x = date, y = standaarddeviatie, group = voor_kleur)) +
    geom_line(aes(colour = color), linewidth = 1.5) +
    scale_color_identity() +
    scale_x_date(limits = c(as.Date(start_date), as.Date(end_date) + 200), breaks = datum_breaks(start_date, end_date), date_labels = "%Y") +
    scale_y_continuous(labels = scales::percent_format(accuracy = 1), limits = c(0, max_sd_12)) +
    geom_dl(aes(x = date, y = standaarddeviatie, label = voor_kleur, color = color), 
            method = list(dl.trans(x = x + .4), cex = 1, "last.polygons")) +
    ggtitle("24-maands voortschrijdende standaarddeviatie") +
    charts_custom_theme
}

pf_bm_sd_24_roll(portfolios = portfolio_levels)
```
:::


```{r portfolio_12_mrolling_sd_vs_bm_single_pf_commissie}

risico_parameter_levels <- c(0.071,0.071,0.071,0.071, 0.047, 0.1, 0.145, 0.145)

risico_parameters <- tibble(
  portfolio = portfolio_levels,
  risico = risico_parameter_levels
)

portfolio_sd_parameters <- function(portfolio) {
  risico_parameters |> 
    filter(portfolio == !!portfolio) |> 
    pull(risico)
}

start_date_pfs <- function(portfolio) {
  case_when(portfolio == "VP100" ~ start_date_vp_vf,
            portfolio == "VP50" ~ start_date_vp_vf,
            portfolio == "VD50" ~ start_date_vd,
            portfolio == "DZ50" ~ start_date_fd,
            TRUE ~ start_date_attr)
}

pf_bm_sd_12_roll_single_pf_commissie <- function(portfolio = "VP100") {
  start_date <- start_date_pfs(portfolio)
  caption <- if(str_detect(portfolio, "100")) {
    str_c("*) standaarddeviatie aandelen van ", percent(portfolio_sd_parameters(portfolio), accuracy = 0.1), ".")
  } else {
    str_c("*) een standaarddeviatie van aandelen en Nederlandse staatsobligaties van resp. 14.5% en 4% en\n een onderlinge correlatie van -0.2 geeft een standaarddeviatie van de portefeuille van ", percent(portfolio_sd_parameters(portfolio), accuracy = 0.1), ".")
  }
  
  pf_bm_returns_sd_te_12 %>%
    filter(date >= start_date,
           date <= lastdate,
           portfolio == !!portfolio) |>
   ggplot(aes(x = date, y = standaarddeviatie, group = voor_kleur)) +
    geom_line(aes(colour = color), linewidth = 1.5) +
    scale_color_identity() +
    scale_x_date(limits = c(as.Date(start_date), as.Date(lastdate) + 200), breaks = datum_breaks(start_date, lastdate), date_labels = "%Y") +
    scale_y_continuous(labels = scales::percent_format(accuracy = 1), limits = c(0, max_sd_12)) +
    geom_dl(aes(x = date, y = standaarddeviatie, label = voor_kleur, color = color), 
            method = list(dl.trans(x = x + .4), cex = 1, "last.polygons")) +
    ggtitle(str_c("12-maands voortschrijdende standaarddeviatie van modelportefeuille ", portfolio, "\nen de benchmark vs. de commissie parameters *)")) +
            labs(caption = caption) +
    charts_custom_theme +
    theme(plot.title = element_text(hjust = 0.5, size = 12)) +
    annotate('segment', 
             x = start_date, 
             xend = lastdate, 
             y = portfolio_sd_parameters(portfolio), 
             yend = portfolio_sd_parameters(portfolio), 
             linewidth = 2, alpha = 0.5, color = "#007bc7") +
    annotate('text', label = "commissie *)",
             x = start_date + 10,
             y = portfolio_sd_parameters(portfolio) + 0.01,
             hjust = 0, vjust = 0.5, size = 3, alpha = 0.9, color = "#007bc7")
}
```


## 12-maands voortschrijdende standaarddeviatie per modelportefeuille vs. commmissie parameters

::: panel-tabset

### `r portfolio_levels[1]`

```{r portfolio_12_mrolling_sd_vs_bm_en_commissie_single_pf1}
#| warning: false

pf_bm_sd_12_roll_single_pf_commissie(portfolio = portfolio_levels[1])
```

### `r portfolio_levels[2]`

```{r portfolio_12_mrolling_sd_vs_bm_en_commissie_single_pf2}
#| warning: false

pf_bm_sd_12_roll_single_pf_commissie(portfolio = portfolio_levels[2])
```

### `r portfolio_levels[3]`

```{r portfolio_12_mrolling_sd_vs_bm_en_commissie_single_pf3}
#| warning: false

pf_bm_sd_12_roll_single_pf_commissie(portfolio = portfolio_levels[3])
```

### `r portfolio_levels[4]`

```{r portfolio_12_mrolling_sd_vs_bm_en_commissie_single_pf4}
#| warning: false

pf_bm_sd_12_roll_single_pf_commissie(portfolio = portfolio_levels[4])
```

### `r portfolio_levels[5]`

```{r portfolio_12_mrolling_sd_vs_bm_en_commissie_single_pf5}
#| warning: false

pf_bm_sd_12_roll_single_pf_commissie(portfolio = portfolio_levels[5])
```

### `r portfolio_levels[6]`

```{r portfolio_12_mrolling_sd_vs_bm_en_commissie_single_pf6}
#| warning: false

pf_bm_sd_12_roll_single_pf_commissie(portfolio = portfolio_levels[6])
```

### `r portfolio_levels[7]`

```{r portfolio_12_mrolling_sd_vs_bm_en_commissie_single_pf7}
#| warning: false

pf_bm_sd_12_roll_single_pf_commissie(portfolio = portfolio_levels[7])
```

### `r portfolio_levels[8]`

```{r portfolio_12_mrolling_sd_vs_bm_en_commissie_single_pf8}
#| warning: false

pf_bm_sd_12_roll_single_pf_commissie(portfolio = portfolio_levels[8])
```

:::


## Voortschrijdende tracking errors

::: panel-tabset
### 12-maands


```{r portfolio_12_mrolling_te}

max_te_12 <- pf_bm_returns_sd_te_12_24 %>% filter(name == "te_12") %>% ungroup() %>% summarise(max = max(standaarddeviatie, na.rm = T)) %>% pull()
max_te_12 <- round(max_te_12 + 0.01, 2)

pf_te_12_roll <-function(start_date = start_date_attr, end_date = lastdate, portfolios = portfolio_levels) {
  pf_bm_returns_sd_te_12_24 %>%
    filter(date >= start_date,
           date <= end_date,
           portfolio %in% portfolios,
           str_detect(name, "te_12")) %>%
  ggplot(aes(x = date, y = standaarddeviatie)) +
    geom_line(aes(col = portfolio), alpha = 0.8, linewidth = 1.5) +
    scale_color_manual(values = portfolio_colors) +
    geom_dl(aes(x = date, y = standaarddeviatie, label = portfolio, color = portfolio), 
            method = list(dl.trans(x = x + .4), cex = 1, "last.polygons")) +
    scale_x_date(limits = c(as.Date(start_date), as.Date(end_date) + 200), breaks = datum_breaks(start_date, end_date), date_labels = "%Y") +
    scale_y_continuous(labels = scales::percent_format(accuracy = 1), limits = c(0, max_te_12)) +
    expand_limits(x = lastdate + 200) +
    ggtitle("12-maands voortschrijdende tracking error") +
    charts_custom_theme
}

pf_te_12_roll()
```

### 24-maands

```{r portfolio_24_mrolling_te}

pf_te_24_roll <-function(start_date = start_date_attr, end_date = lastdate, portfolios = portfolio_levels) {
  pf_bm_returns_sd_te_12_24 %>%
    filter(date >= start_date,
           date <= end_date,
           portfolio %in% portfolios,
           str_detect(name, "te_24")) %>%
  ggplot(aes(x = date, y = standaarddeviatie)) +
    geom_line(aes(col = portfolio), alpha = 0.8, linewidth = 1.5) +
    scale_color_manual(values = portfolio_colors) +
    geom_dl(aes(x = date, y = standaarddeviatie, label = portfolio, color= portfolio), 
            method = list(dl.trans(x = x + .4), cex = 1, "last.polygons")) +
    scale_x_date(limits = c(as.Date(start_date), as.Date(end_date) + 200), breaks = datum_breaks(start_date, end_date), date_labels = "%Y") +
    scale_y_continuous(labels = scales::percent_format(accuracy = 1), limits = c(0, max_te_12)) +
    expand_limits(x = lastdate + 200) +
    ggtitle("24-maands voortschrijdende tracking error") +
    charts_custom_theme
}

pf_te_24_roll()
```
:::

## Risk/return portefeuille vs benchmark

```{r pf_bm_statistics_tabel}

pf_bm_statistics <- function(portfolio) {
 basis <- pf_vs_bm_returns_kolom(portfolio) |>
  mutate(diff = pf_rt - BM_rt)

  tabel1 <- basis |>
   summarise(portfolio = head(portfolio, 1),
            start = min(date),
            maanden = round(length(date)),
            min_pf = min(pf_rt),
            min_BM = min(BM_rt),
            max_pf = max(pf_rt),
            max_BM = max(BM_rt),
            sd_pf = sd(pf_rt) * sqrt(12),
            sd_BM = sd(BM_rt) * sqrt(12),
            te = sd(diff) * sqrt(12))

  tabel2 <- basis |>
    reframe(pf_rt = (cumprod(1 + pf_rt) - 1) %>% tail(1),
            BM_rt = (cumprod(1 + BM_rt) - 1) %>% tail(1),
            er = (cumprod(1 + diff) - 1) %>% tail(1))

  tabel1 |> bind_cols(tabel2) |>
    mutate(pf_rt = (1 + pf_rt)^(12/maanden) - 1,
           BM_rt = (1 + BM_rt)^(12/maanden) - 1,
           er = (1 + er)^(12/maanden) - 1,
           ir = er/te)
  }

risk_return_tabel <-
  map_dfr(portfolio_levels, pf_bm_statistics) %>%
  select(portfolio, start, maanden, min_pf, min_BM, max_pf, max_BM, sd_pf, sd_BM, pf_rt, BM_rt, er, te, ir) |>
  mutate(across(-c(portfolio, start, maanden, ir), ~times_100_round2(.))) |>
  gt() |> 
  cols_label(contains("pf") ~ " pf",
             contains("BM") ~ "BM") |> 
  tab_spanner(columns = 4:5, label = "minimum") |> 
  tab_spanner(columns = 6:7, label = "maximum") |> 
  tab_spanner(columns = 8:9, label = "std dev") |> 
  tab_spanner(columns = 10:11, label = "return") |> 
  gt_add_dividers_right(columns = c(3, 5, 7, 9, 11)) |> 
  gt_cols_align() |> 
  opt_row_striping() |> 
  fmt_number(decimals = 1, columns = everything()) |> 
  fmt_number(decimals = 0, columns = maanden) |> 
  gt_font_padding_align() |> 
  gt_portfolio_colors() |>
  gt_first_col_bold() |>
  gt_delete_first_col_label() |> 
  tab_header(str_c("Risk/return  modelportefeuilles (%), ", lastdate_format)) |> 
  tab_footnote(str_c("Op jaarbasis, behalve maandelijkse min en max, information ratio is er/te"))
 

risk_return_tabel
```

## Risk/return individuele holdings, Portefeuilles en Benchmarks

```{r all_tickers_types}

all_tickers_types <-
  bind_rows(eur_tickers, usd_tickers, chf_tickers, gbp_tickers) %>%
  add_row(ticker= "MXWO0EN", type = "BM", sector = "Energy") %>%
  add_row(ticker= "MXWO0MT", type = "BM", sector = "Materials") %>%
  add_row(ticker= "MXWO0IN", type = "BM", sector = "Industrials") %>%
  add_row(ticker= "MXWO0CD", type = "BM", sector = "Consumer Discretionary") %>%
  add_row(ticker= "MXWO0CS", type = "BM", sector = "Consumer Staples") %>%
  add_row(ticker= "MXWO0HC", type = "BM", sector = "Health Care") %>%
  add_row(ticker= "MXWO0FN", type = "BM", sector = "Financials") %>%
  add_row(ticker= "MXWO0IT", type = "BM", sector = "Information Technology") %>%
  add_row(ticker= "MXWO0TC", type = "BM", sector = "Communication Services") %>%
  add_row(ticker= "MXWO0UT", type = "BM", sector = "Utilities") %>%
  add_row(ticker= "MXWO0RE", type = "BM", sector = "Real Estate") %>%
  add_row(ticker= "BM7030", type = "BM", sector = "None") %>%
  add_row(ticker= "BM5050", type = "BM", sector = "None") %>%
  add_row(ticker= "BM3070", type = "BM", sector = "None") %>%
  add_row(ticker= "BENEGA", type = "BM", sector = "None") %>%
  add_row(ticker= "JPM", type = "BM", sector = "None") %>%
  add_row(ticker= "SPX", type = "BM", sector = "None") %>%
  add_row(ticker= "SXXP", type = "BM", sector = "None") %>%
  add_row(ticker= "MSDEWIN", type = "BM", sector = "None") %>%
  add_row(ticker= "NDWUHC", type = "BM", sector = "Health Care") %>%
  ungroup() |> 
  mutate(type = factor(type, levels = type_levels)) %>%
  mutate(sector = factor(sector, levels = sector_levels))
```

```{r return_per_ticker_stocks_chart}
# 
current_tickers <-
  portfolios_tabel %>%
  filter(date == lastdate) %>%
  ungroup() %>%
  select(ticker) %>%
  unique()

current_tickers_ri_re_eur_long <-
  all_prices_eur %>%
  select(c(date, all_of(current_tickers$ticker), NTSCLAE_NA)) |>
  mutate(across(c(all_of(current_tickers$ticker), NTSCLAE_NA), ~.x/lag(.x) - 1)) |>
  slice_tail(n = 62) |> slice_head(n = 61) |>
  mutate(LEAD_GY = ifelse(is.na(LEAD_GY), SPY5_GY, LEAD_GY),
         SPPY_GY = ifelse(is.na(SPPY_GY), SPY5_GY, SPPY_GY),
         NTSCLBE_NA = ifelse(is.na(NTSCLBE_NA), NTSCLAE_NA, NTSCLBE_NA)) |>
  pivot_longer(-date) %>%
  rename(ticker = name) |>
  filter(ticker %in% current_tickers$ticker) %>%
  group_by(ticker) %>%
  summarize(return = mean(value) * 12,
            stdev = sd(value) * sqrt(12)) %>%
  filter(!is.na(return)) |>
  left_join(all_tickers_types %>% select(ticker, type), by = "ticker") %>%
  filter(!is.na(return), type != "BM")

current_tickers_ri_re_eur_long %>%
  left_join(types_levels_colors, by = "type") |>
  ggplot() +
    geom_point(aes(x = stdev, y = return), color = "black", size = 2.5) +
    geom_label_repel(aes(label = ticker, x = stdev, y = return, fill = color),
                     alpha = .8, fontface = 'bold', color = 'white', segment.colour = "darkgray", size = 2.5) +
    scale_y_continuous(labels = percent_format(accuracy = 1), limits = c(-.10, 0.325)) +
    scale_x_continuous(labels = percent_format(accuracy = 1), limits = c(0, 0.325)) +
    scale_fill_identity() +
    ggtitle("Risico/Rendement individuele aandelen en ETF's",
            subtitle = str_c("maandcijfers van Jul-2017 t/m ", lastdate |> format("%b-%Y"), ", op jaarbasis")) +
    charts_custom_theme +
      labs(x = "risico (standaarddeviatie)",
           y = "rendement",
           caption = "")

```

```{r risk_return_per_portfolio_expost_vanaf_30062017}

pf_bm_risk_return_expost_vanaf_06302017 <-
  map_dfr(c("RD50", "VP50","RD70", "RD30", "RD100", "VP100"), pf_vs_bm_index_kolom) |> 
  filter(date >= start_date_vp_vf) |> 
  pivot_longer(-c(date, portfolio)) |> 
  group_by(portfolio, name) |> 
  mutate(value = value/lag(value) - 1) |> 
  filter(date != min(date)) |> 
  reframe(return = mean(value) * 12, 
          stdev = sd(value) * sqrt(12)) |> 
  mutate(portfolio = factor(portfolio, levels = c(portfolio_levels, "BM3070", "BM5050", "BM7030", "MSDEWIN"))) %>%
  #handwerk
  mutate(portfolio = case_when(name == "BM_index" & portfolio == "RD50" ~ "BM5050",
                               name == "BM_index" & portfolio == "VP50" ~ "BM5050",
                               name == "BM_index" & portfolio == "RD30" ~ "BM3070",
                               name == "BM_index" & portfolio == "RD70" ~ "BM7030",
                               name == "BM_index" & portfolio == "VP100" ~ "MSDEWIN", 
                               name == "BM_index" & portfolio == "RD100" ~ "MSDEWIN", 
                               TRUE ~ portfolio)) |>
  left_join(portfolios_bms_colors, by = "portfolio") |> 
  select(-name) |> 
  #BM5050 maar 1 keer
  group_by(portfolio) |> 
  slice_head(n = 1)

#JPM hieraan toevoegen
JPM_row <- 
  all_prices_eur |> 
  select(date, JPM) |> 
  mutate(JPM_return = JPM/lag(JPM) - 1) |> 
  filter(date > start_date_vp_vf) |> 
  reframe(return = mean(JPM_return), stdev = sd(JPM_return) * sqrt(12)) |> 
  mutate(portfolio = "JPM", color = bmgray) |> 
  select(portfolio, return, stdev, color)

pf_bm_risk_return_expost_vanaf_06302017 |>
  bind_rows(JPM_row) |>
  ggplot() +
  geom_point(aes(x = stdev, y =return), color= "black", size = 2.5) +
  geom_label_repel(aes(label = portfolio, x = stdev, y = return, fill = color),
                   alpha =.8, fontface = 'bold', color = 'white', segment.colour = "darkgray", size = 2.5) +
  scale_y_continuous(labels = percent_format(accuracy = 1), limits = c(-0.01, 0.2)) +
  scale_x_continuous(labels = percent_format(accuracy = 1), limits = c(0, 0.2)) +
  scale_fill_identity() +
  ggtitle("Risico/rendement portefeuilles en benchmarks",
            subtitle = str_c("maandcijfers van Jul-2017 t/m ", lastdate |> format("%b-%Y"), ", op jaarbasis")) +
  charts_custom_theme +
  labs(x = "risico (standaarddeviatie)", 
       y = "rendement",
       caption = "samengestelde benchmarks met dagelijkse rebalancing")

```

# Risk/return - huidige samenstelling (ex-ante)

## Risk/return Posities, Portefeuilles en Benchmarks

```{r te_bets_in_pf_tabel}

#pf_weight, weight van een ticker in een pf op lastdate
pf_weight <- function(portfolio = "RD50", ticker = "AAPL_UW", asof_date = lastdate) {
 weight <- 
   portfolios_tabel |> 
   filter(date == asof_date, 
          portfolio == !!portfolio, 
          ticker == !!ticker) |> 
   pull(weight)
  if(length(weight) == 1) {weight} else {0}
}

scenario_tickers <- 
  pf_weights(portfolio = "RD50") |> 
  bind_rows(pf_weights(portfolio = "DZ50")) |> 
  select(ticker) %>% unique() |> 
  add_row(ticker = c("MSDEWIN", "JPM"))
#in sheet 'landengewichten_calc' van holdings file in excel benaderd welke gewichtn in IWDA, SPY en SXXP leiden tot de uiteindelijke regiobets zoals berekend in de paragraaf hierboven
pf_weights_Regio_only <- function(portfolio) {
  tribble(~ticker, ~weight,
         "MSDEWIN", (BM_weight_RD(portfolio) - pf_weight(portfolio, "SXXPIEX_GY")) - pf_weight(portfolio, "SPY5_GY") - pf_weight(portfolio, "LEAD_GY") - pf_weight(portfolio, "SPPY_GY"),
         "SPY5_GY", pf_weight(portfolio, "SPY5_GY"),
         "SXXPIEX_GY", pf_weight(portfolio, "SXXPIEX_GY"),
         "LEAD_GY", pf_weight(portfolio, "LEAD_GY"),
         "SPPY_GY", pf_weight(portfolio, "SPPY_GY"),
         "JPM", 1 - BM_weight_RD(portfolio)) %>%
  full_join(scenario_tickers, by = "ticker") %>% 
  mutate(weight = replace_na(weight, 0))
}

pf_weights_ETF_only <- function(portfolio, ETF) {
  tribble(~ticker, ~weight,
          "MSDEWIN", BM_weight_RD(portfolio) - pf_weight(portfolio, ETF),
           ETF, pf_weight(portfolio, ETF),
           "JPM", 1 - BM_weight_RD(portfolio)) %>%
  full_join(scenario_tickers, by = "ticker") %>% mutate(weight = replace_na(weight, 0))
}

pf_weights_RM_only <- function(portfolio) {
  BM_wt_RD <- BM_weight_RD(portfolio)
  weight_rm <- case_when(portfolio == "RD50" ~ pf_weight_rm(portfolio = "RD50"),
                         portfolio == "DZ50" ~ pf_weight_rm(portfolio = "DZ50"),
                         portfolio == "RD30" ~ pf_weight_rm(portfolio = "RD30"),
                         portfolio == "RD70" ~ pf_weight_rm(portfolio ="RD70")
                         )

weights_RM_only <-
  tribble(~ticker, ~weight,
         "MSDEWIN", BM_wt_RD) |>
  bind_rows(
    pf_portfolio(portfolio) |>
    filter(ticker %in% RM_tickers$ticker) |>
    select(ticker, weight))

  weights_RM_only |>
  mutate(weight = ifelse(ticker != "MSDEWIN", weight/weight_rm * (1-BM_wt_RD), weight)) |>
  full_join(scenario_tickers, by = "ticker") %>%
  mutate(weight = replace_na(weight, 0))
}

pf_weights_Alloc_only <- function(portfolio) {
  tribble(~ticker, ~weight,
           "MSDEWIN", 1 - pf_weight_rm(portfolio),
           "JPM", pf_weight_rm(portfolio)) %>%
  full_join(scenario_tickers, by = "ticker") %>%
    mutate(weight = replace_na(weight, 0))
}

bm_weights <- function(portfolio) {
  tribble(~ticker, ~weight,
            "MSDEWIN", BM_weight_RD(portfolio),
            "JPM", 1 - BM_weight_RD(portfolio)) %>%
  full_join(scenario_tickers, by = "ticker") %>%
    mutate(weight = replace_na(weight, 0))
}

```

```{r pf_bets_tabel_calc}

all_current_tickers <- 
  portfolios_tabel |> 
  filter(date == lastdate, 
         portfolio %in% portfolio_levels[-which(portfolio_levels %in% portfolio_levels_vlieger)]) |> 
  ungroup() |> 
  select(ticker) |> 
  unique() |> pull()

ad_hoc_sorteer_levels <- 
  c("MSDEWIN", "JPM", "IWDA_NA", "SPY5_GY", "SPPY_GY", "MWOP_GY", "LEAD_GY", "SXXPIEX_GY", 
    "WTCH_NA", "XDWH_GY", "NTSCLBE_NA", RM_tickers$ticker, "totaal", "te" )

pf_bets_tabel <- function(portfolio = "RD50") {
  bm_weights(portfolio) |> rename(benchmark = weight) |>
  full_join(pf_weights(portfolio), by = "ticker") |> rename(pf_wt = weight) |>
  full_join(pf_weights_Alloc_only(portfolio), by = "ticker") |> rename(Allocatie = weight) |>
  full_join(pf_weights_RM_only(portfolio), by = "ticker") |> rename(RM = weight) |>
  full_join(pf_weights_Regio_only(portfolio), by = "ticker") |>  rename(Regio = weight) |>
  full_join(pf_weights_ETF_only(portfolio, "XDWH_GY"), by = "ticker") |> rename(XDWH_GY = weight) |>
  full_join(pf_weights_ETF_only(portfolio, "WTCH_NA"), by = "ticker") |> rename(WTCH_NA = weight) |>
  full_join(pf_weights_ETF_only(portfolio, "NTSCLBE_NA"), by = "ticker") |> rename(NTSCLBE_NA = weight) |>
  mutate(across(-ticker, ~replace_na(., 0))) |>
  mutate(portfolio = portfolio) |> 
  select(portfolio, everything()) |>
  arrange(ticker)
}

all_pf_bets_tabel <-
  map_dfr(portfolio_levels[-which(portfolio_levels %in% c("RD100", portfolio_levels_vlieger))], pf_bets_tabel) |>
  group_by(portfolio)

pf_bets_totalen <-
  all_pf_bets_tabel |>
  summarise(across(where(is.numeric), ~sum(.x))) |> 
  mutate(ticker = "totaal") |>
  select(portfolio, ticker, everything())
```

```{r keyr_rates_maken_for_pdur, warning = FALSE}
#key rates maken for pdur (aansluitend op die van bloomberg)
key_rates_for_pdur <-
  all_prices_local_long %>%
  pivot_wider(values_from = PX_LAST, names_from = ticker) %>%
  select(date, EONIA:GNTH30YR) %>%
  #EONIA wordt NA dan ESTRON, combineer in ON
  mutate(ON = ifelse(is.na(EONIA), ESTRON, EONIA)) %>%
  #EONIA en ESTRON eruit
  select(-c(EONIA, ESTRON)) %>%
  select(date, ON, everything()) %>%
  mutate(GNTH05YR = (ON + GDBR1)/2,
         GNTH20YR = GNTH10YR + (GNTH30YR - GNTH10YR)/2)

#key rates for pdur long met delta key rates
key_rates_for_pdur_long <-
  key_rates_for_pdur |> 
  pivot_longer(-date, names_to = "rate", values_to = "value") |> 
  mutate(t_curve = case_when(rate == "GNTH05YR" ~ 0.5,
                             rate == "GDBR1" ~ 1,
                             rate == "GNTH2YR" ~ 2,
                             rate == "GNTH3YR" ~ 3,
                             rate == "GNTH5YR" ~ 5,
                             rate == "GNTH7YR" ~ 7,
                             rate == "GNTH10YR" ~ 10,
                             rate == "GNTH20YR" ~ 20,
                             rate == "GNTH30YR" ~ 30)) |> 
  arrange(date, t_curve) |> 
  filter(!is.na(t_curve)) |> 
  select(date, t_curve, key_rate = value) |> 
  mutate(key_rate = key_rate/100) |> 
  group_by(t_curve) |>
  mutate(d_key_rate = key_rate - lag(key_rate))
```

```{r dP_proxy_RM_bond_tickers, warning = FALSE}
#bond tickers RM - voor berekening proxy dP's mbv huidige pdur's
RM_bond_tickers_lastdate <- 
  portfolios_tabel |>
  ungroup() |> 
  filter(date == max(date), RDRM == "RM", ticker != "CASH") |> 
  select(ticker) |> 
  unique()

#huidige pdurs voor de RM bond tickers
partial_durations_for_join <-
  partial_durations |> unnest(cols = "DU324") |> 
  select(-inhoud) |> 
  rename(t_curve = Maturity, pdur = Duration) |> 
  ungroup() |> 
  filter(ticker %in% RM_bond_tickers_lastdate$ticker)
  
#dP_proxy mbv huidige pdurs's en historische delta key rates
dP_proxy_RM_bond_tickers_lastdate <- 
  key_rates_for_pdur_long |> 
  left_join(partial_durations_for_join, by = "t_curve", relationship = "many-to-many") |> 
  arrange(date, ticker, t_curve) |> 
  mutate(dP_proxy = -pdur * d_key_rate) |> 
  group_by(date, ticker) |> 
  reframe(dP_proxy = sum(dP_proxy))

#wijde tabel
dP_proxy_RM_bond_tickers_lastdate_wide <-
  #om naast de rest te hangen hieronder
  dP_proxy_RM_bond_tickers_lastdate |> 
  pivot_wider(names_from = ticker, values_from = dP_proxy)

```

```{r dP_proxy_ALL_tickers_lastdate_5j, warning = FALSE}
ALL_tickers_lastdate_xRM <- 
  portfolios_tabel |>
  ungroup() |> 
  filter(date == max(date), !ticker %in% RM_bond_tickers_lastdate$ticker) |> 
  select(ticker) |> 
  unique()

proxy_tickers_for_history <- 
  c("NTSCLAE_NA", 
    #NTSCLBE_NA vervangen door NTSCLAE_NA voor 2020-12-31,
    "SPY5_GY",
    #LEAD_GY en SPPY_GY vervangen door SPY5_GY voor resp. 2020-12-31 en 2019-12-31
    "MXWOESL5"
    #MWOP_GY vervangen door zijn index, MXWOESL5
    )

tickers_to_remove <- 
  c("NTSCLAE_NA")
  #dispensible tickers

bm_tickers <- 
  c("MSDEWIN", "JPM", "BM7030", "BM5050", "BM3070")
  #benchmark tickers

#dP maken van alles ex RM_bond_tickers_lastdate
dP_proxy_ALL_tickers_lastdate_xRM_wide <- 
  all_prices_eur_long |> 
  #alle actuele tickers en proxy tickers (NTSCLAE_NA voor NTSCLBE_NA) voor 5 j historie
  filter(ticker %in% c(ALL_tickers_lastdate_xRM$ticker, proxy_tickers_for_history, bm_tickers)) |> 
  group_by(ticker) |> 
  mutate(dP_proxy = price_eur/lag(price_eur) - 1) |> 
  select(date, ticker, dP_proxy) |> 
  #pivot voor inbrengen proxy
  pivot_wider(names_from = ticker, values_from = dP_proxy) |>
  #proxy maken
  mutate(NTSCLBE_NA = ifelse(is.na(NTSCLBE_NA), NTSCLAE_NA, NTSCLBE_NA),
         #NTSCLBE_NA vervangen door NTSCLAE_NA voor 2020-12-31
         LEAD_GY = ifelse(is.na(LEAD_GY), SPY5_GY, LEAD_GY),
         SPPY_GY = ifelse(is.na(SPPY_GY), SPY5_GY, SPPY_GY),
         #LEAD_GY en SPPY_GY vervangen door SPY5_GY voor resp. 2020-12-31 en 2019-12-31
         MWOP_GY = ifelse(is.na(MWOP_GY), MXWOESL5, MWOP_GY)) |> 
         #MWOP_GY vervangen door zijn index, MXWOESL5
  select(-all_of(tickers_to_remove))

dP_proxy_ALL_tickers_lastdate_5j <-
  dP_proxy_ALL_tickers_lastdate_xRM_wide |>
  left_join(dP_proxy_RM_bond_tickers_lastdate_wide, by = "date") |> 
  #5 jaar historie maken
  tail(61) |> 
  #laatste regel is de snapshot date
  slice(-n())

#probeer
all_returns_eur <-
  dP_proxy_ALL_tickers_lastdate_xRM_wide

all_returns_eur_long <- 
  all_returns_eur |> 
  pivot_longer(-date) |> 
  rename(ticker = name,
         monthly.returns = value) |>
  filter(!is.na(monthly.returns))
#einde probeer
```

```{r cov_matrix, warning = FALSE}
#cov_matrix
cov_matrix <- 
  dP_proxy_ALL_tickers_lastdate_5j |> 
  select(-date) |> 
  cov()

all_current_tickers <- 
  dP_proxy_ALL_tickers_lastdate_5j |> 
  select(-date) |> 
  names() |> 
  as_tibble() |> 
  rename(ticker = value)

sd_te_pf_xa <- function(portfolio = "VP100") {
  weights <-
    all_current_tickers |> 
    left_join(pf_weights(portfolio, asof_date = snapshot_date), by = "ticker") |> 
    mutate(weight = ifelse(is.na(weight), 0, weight))
  
  xs_weights <- 
    weights |>
    mutate(weight = ifelse(ticker == "MSDEWIN", 
                           - BM_weight_RD(portfolio), weight),
           weight = ifelse(ticker == "JPM", 
                           - (1 - BM_weight_RD(portfolio)), weight))
  
  weights_vector <- as.vector(weights$weight)
  t_weights_vector <- as.vector(t(weights_vector))
  
  xs_weights_vector <- as.vector(xs_weights$weight)
  t_xs_weights_vector <- as.vector(t(xs_weights_vector))
  
  var <- weights_vector %*% cov_matrix %*% t_weights_vector
  te <- sqrt(xs_weights_vector %*% cov_matrix %*% t_xs_weights_vector)
  
  tibble(portfolio = portfolio, sd_pf = sqrt(as.double(var)* 12), te = sqrt(12) * as.double((te)))
}

sd_te_bms <-
  dP_proxy_ALL_tickers_lastdate_5j |> 
  select(date, all_of(bm_tickers)) |> 
  pivot_longer(-date) |>
  rename(benchmark = name) |>
  group_by(benchmark) |>
  reframe(sd_bms = sd(value)*sqrt(12))

portfolio_levels_sd_te_xa <- 
  map_dfr(portfolio_levels, sd_te_pf_xa) |> 
  rowwise() |>
  mutate(portfolio = portfolio,
         benchmark = pf_benchmark_name(portfolio),
         portfolio = factor(portfolio, levels = portfolio_levels))
#         portfolio = "")

standaarddeviaties <-
  portfolio_levels_sd_te_xa |> 
  left_join(sd_te_bms, by = "benchmark") |>
  pivot_longer(cols = c(sd_pf, sd_bms), names_to = "pf_bm", values_to = "standaarddeviatie") %>%
  left_join(portfolios_colors, by = "portfolio") |>
  mutate(color = ifelse(pf_bm == "sd_bms", bmgray, color),
         pf_of_bm = str_sub(pf_bm, 4, 5)) |> 
  mutate(standaarddeviatie = standaarddeviatie,
         portfolio = factor(portfolio, levels = portfolio_levels),
         pf_of_bm = factor(pf_of_bm, levels = c("pf", "bm")))

chart_standaarddeviaties <-
  standaarddeviaties |>          
  ggplot() +
  geom_col(aes(x = pf_of_bm, y = standaarddeviatie, fill = color), alpha = .8, position = "dodge") +
  scale_fill_identity() +
  scale_y_continuous(labels = scales::percent_format(accuracy = 1)) +
  facet_wrap(~portfolio, ncol = 8) +
  ggtitle("Standaarddeviaties",
          subtitle = str_c("5 jaar maandcijfers t/m ", lastdate_format, ", op jaarbasis, in EUR, huidige samenstelling")) +
  charts_custom_theme +
  theme(axis.text.x = element_text(size = 6))
```


## Standaarddeviaties

```{r chart_standaarddeviaties, warning = FALSE}
chart_standaarddeviaties
```

## Tracking Errors

```{r tracking_errors_portfolio_levels, warning = FALSE}
portfolio_levels_sd_te_xa |>
  select(portfolio, te) |>
  ungroup() |>
  ggplot(aes(x = " ", y = te, fill = portfolio), alpha = .8)+
  geom_col() +
  facet_wrap(~portfolio, ncol = 8) +
  scale_fill_manual(values = portfolio_colors) +
  scale_y_continuous(labels = scales::percent_format(accuracy = 1)) +
  ggtitle("Tracking Errors",
          subtitle = str_c("5 jaar maandcijfers t/m ", lastdate_format, ", in EUR, huidige samenstelling")) +
  charts_custom_theme

```


```{r pf_bets_tes, warning = FALSE}

all_pf_bets_xs_weights_tabel_long <- 
  all_pf_bets_tabel |> 
  #xs is minus de benchmark
  mutate(across(benchmark:NTSCLBE_NA, ~ .x - benchmark)) |> 
  pivot_longer(-c(portfolio, ticker)) |> 
  rename(bet = name, xs_weight = value)


  #functie voor te's partieel
te_bet_pf_xa <- function(portfolio = "RD50", bet = "Allocatie") {
  xs_weights <- 
    #alle tickers anders non-conformable arguments
    all_current_tickers |> 
    left_join(
      all_pf_bets_xs_weights_tabel_long |> filter(portfolio == !!portfolio, bet == !!bet),
      by = "ticker") |> 
    mutate(xs_weight = ifelse(is.na(xs_weight), 0, xs_weight)) |> 
    select(ticker, xs_weight)
  
  xs_weights_vector <- as.vector(xs_weights$xs_weight)
  t_xs_weights_vector <- t(as.vector(xs_weights$xs_weight))
  
  te <- sqrt(t_xs_weights_vector %*% cov_matrix %*% xs_weights_vector) |> as.double()
  
  tibble(portfolio = !!portfolio, positie = !!bet, te = sqrt(12) * as.double(te))
}

posities_te_tabel <-
  map_dfr(portfolio_levels_ETFs, bet = "pf_wt", te_bet_pf_xa) |> bind_rows(
  map_dfr(portfolio_levels_ETFs, bet = "RM", te_bet_pf_xa)) |> bind_rows(
  map_dfr(portfolio_levels_ETFs, bet = "Allocatie", te_bet_pf_xa)) |> bind_rows(
  map_dfr(portfolio_levels_ETFs, bet = "Regio", te_bet_pf_xa)) |> bind_rows(
  map_dfr(portfolio_levels_ETFs, bet = "XDWH_GY", te_bet_pf_xa)) |> bind_rows(
  map_dfr(portfolio_levels_ETFs, bet = "WTCH_NA", te_bet_pf_xa)) |> bind_rows(
  map_dfr(portfolio_levels_ETFs, bet = "NTSCLBE_NA", te_bet_pf_xa)) |> 
  left_join(portfolios_colors, by = "portfolio") |>
  mutate(portfolio = factor(portfolio, levels = portfolio_levels),
         positie = ifelse(positie == "pf_wt", "totaal", positie),
         positie = factor(positie, levels = c("totaal", "Allocatie", "RM", "Regio", "XDWH_GY", "WTCH_NA", "NTSCLBE_NA")),
         x = ifelse(positie == "totaal", "portfolio t/e", "posities t/e")) 


#tabel om de oude te vervangen in de overzichtstabellen met posities en t/e's
pf_bets_tes <-
  posities_te_tabel |> 
  select(-c(color, x)) |> 
  pivot_wider(names_from = positie, values_from = te) |> 
  mutate(ticker = "te", benchmark = 0) |>  
  rename(pf_wt = totaal) |> 
  select(portfolio, ticker, benchmark, pf_wt, Allocatie, everything())

```


```{r all_pf_bets_tes_totalen_tabel}

all_pf_bets_tes_totalen_tabel <-
  all_pf_bets_tabel |>
  bind_rows(pf_bets_totalen) |>
  bind_rows(pf_bets_tes) |>
  mutate(ticker = factor(ticker, levels = ad_hoc_sorteer_levels)) |>
  arrange(portfolio, ticker)
```

### Afzonderlijke posities

```{r te_bets_in_5050_chart}

pf_bets_bar <- function(portfolio = "RD50") {
    all_pf_bets_tes_totalen_tabel %>%
    filter(portfolio == !!portfolio) %>%
    mutate(Allocatie = Allocatie - benchmark,
           RM = RM - benchmark,
           Regio = Regio - benchmark,
           XDWH_GY = XDWH_GY - benchmark,
           WTCH_NA = WTCH_NA - benchmark,
           NTSCLBE_NA = NTSCLBE_NA - benchmark) %>%
    select(portfolio, ticker, Allocatie, RM, Regio, XDWH_GY, WTCH_NA, NTSCLBE_NA) %>%
    pivot_longer(cols = Allocatie:NTSCLBE_NA, names_to = "positie", values_to = "pct") |>
    mutate(pct = ifelse(abs(pct) < 0.00000001, 0, pct)) |> 
    filter(pct!= 0, ticker != "te") %>%
    mutate(positie = factor(positie, levels = c("Allocatie", "RM", "Regio", "XDWH_GY", "WTCH_NA", "NTSCLBE_NA"))) %>%
    left_join(all_tickers_types, by = "ticker") %>%
    left_join(types_levels_colors, by = "type") |>
  ggplot(aes(x = ticker, y = pct, fill = color)) +
    geom_col(position = "dodge", alpha = .8)+
    facet_wrap(~positie, scales = "free_x", ncol = 6)+
      scale_y_continuous(labels = scales::percent_format(accuracy = 1), limits = c(-.8, .38), breaks = c(-.7, -.5, -.3, 0, .3)) +
      scale_fill_identity() +
      ggtitle(portfolio) +
      charts_custom_theme +
      theme(legend.position = "bottom",
            axis.text.x = element_text(size = 8, angle = 90, hjust = .5))
}
```

::: panel-tabset
#### `r portfolio_levels[1]`

```{r te_bets_in_5050_te_chart_afz_en_geheel_ff}

pf_bets_bar("RD50")
```

#### `r portfolio_levels[2]`

```{r te_bets_in_5050_te_chart_afz_en_geheel_fd}

pf_bets_bar("DZ50") 
```

#### `r portfolio_levels[5]`

```{r te_bets_in_5050_te_chart_afz_en_geheel_ts}

pf_bets_bar("RD30") 
```

#### `r portfolio_levels[6]`

```{r te_bets_in_5050_te_chart_afz_en_geheel_st}

pf_bets_bar("RD70")
```
:::

### Deel-t/e's van afzonderlijke posities vs. benchmark

```{r pf_bets_tabel_nice}

pf_bets_tabel_nice <- function(portfolio = "RD50") {
  tabel <-
      all_pf_bets_tes_totalen_tabel %>%
      filter(portfolio == !!portfolio) %>%
      mutate(across(is.numeric, ~times_100_round2(.))) %>%
      ungroup() |>
      select(-portfolio)
  tabel |>
    gt() |> 
    gt_cols_align() |> 
    fmt_number(decimals = 1, columns = everything()) |> 
    fmt_number(decimals = 0, columns = benchmark) |> 
    opt_row_striping() |> 
    gt_first_col_bold() |> 
    gt_font_padding_align() |> 
    sub_zero(columns = everything(), zero_text = " ") |> 
    gt_last_row_bold() |> 
    tab_header(str_c("Gewichten en t/e's van afzonderlijke posities in ", portfolio, ", ", lastdate_format)) |> 
   tab_footnote(str_c("t/e o.b.v. 5 jaar maandcijfers t/m ", lastdate_format, ", in EUR, huidige samenstelling"))
}
```

::: panel-tabset
#### `r portfolio_levels[1]`

```{r te_tabel_afz_en_geheel_ff}

pf_bets_tabel_nice("RD50")

```

#### `r portfolio_levels[2]`

```{r te_tabel_afz_en_geheel_fd}

pf_bets_tabel_nice("DZ50")
```

#### `r portfolio_levels[5]`

```{r te_tabel_afz_en_geheel_ts}

pf_bets_tabel_nice("RD30")
```

#### `r portfolio_levels[6]`

```{r te_tabel_afz_en_geheel_st}

pf_bets_tabel_nice("RD70")
```
:::

### Portefeuille t/e en van alle posities afzonderlijk

```{r te_bets_in_5050_te_chart_afz_en_geheel2}

all_pf_bets_tes_totalen_tabel %>%
  filter(ticker == "te", !portfolio == "RD100") %>%
  left_join(portfolios_colors, by = "portfolio") |>
  mutate(portfolio = factor(portfolio, levels = portfolio_levels)) %>%
  pivot_longer(pf_wt:NTSCLBE_NA, names_to = "positie", values_to = "pct") |>
  mutate(positie = ifelse(positie == "pf_wt", "totaal", positie),
         positie = factor(positie, levels = c("totaal", "RM", "Allocatie", "Regio", "XDWH_GY", "WTCH_NA", "NTSCLBE_NA")),
         x = ifelse(positie == "totaal", "portfolio t/e", "posities t/e")) %>%
  ggplot(aes(x = x, y = pct, fill = color), position = "stack") +
    scale_fill_identity() +
    geom_bar(stat = "identity", alpha = 0.8, col = "gray80") +
    geom_text(aes(label = positie), position = position_stack(vjust = 0.5), col = "gray20", size = 2.5) +
    ggtitle(str_c("t/e van portefeuille en voor de huidige, afzonderlijke posities"),
          subtitle = str_c("5 jaar maandcijfers t/m ", lastdate_format, ", in EUR, huidige samenstelling")) +
    scale_y_continuous(labels = scales::percent_format(accuracy = 1)) +
    facet_wrap(~portfolio, ncol = 4) +
  charts_custom_theme +
  theme(axis.text.x = element_text(angle = 90, vjust =.5))

```

```{r transacties_RDRM_en_sector}

#tabel met alle holdings in kolommen over alle data inclusief nullen
holdings_dates <- 
  holdings_dates_long %>%
  pivot_wider(names_from = ticker, values_from = shares) %>%
  mutate(across(is.numeric, ~replace(., is.na(.), 0)))

#long tabel met alle holdings over alle data inclusief nullen
holdings_dates_long <-
   holdings_dates %>%
   pivot_longer(-c(date, portfolio), names_to = "ticker", values_to = "shares")

#tabel met inflows agv transacties - midden van de maand en gemiddelde koersen
inflows_RD_eur <-
  holdings_dates_long %>%
  group_by(portfolio, ticker) %>%
  left_join(all_prices_eur_long, by = c("ticker", "date")) %>%
  #hier full price van obligaties gebruiken ipv de trr indices
  mutate(price_eur_lag = lag(price_eur), d_shares = shares - lag(shares)) %>%
  #inflow is het gemiddelde van begin en eindkoers, tenzij begin niet beschikbaar is
  #inflow is positief bij kopen, negatief bij verkopen
  mutate(inflow_eur = ifelse(is.na(price_eur_lag), d_shares * price_eur, d_shares * (price_eur + price_eur_lag)/2)) %>%
  #naast holding gegevens als RDRM en sector zetten
  left_join(holdings, by = "ticker") %>%
  #RM tranacties blijven altijd binnen RM dus niet meenemen
  #CASH idem, is hetzij coupon (blijft in RD), hetzij dividend, wat separaat wordt meegenomen
  filter(d_shares != 0, ticker != "CASH", RDRM == "RD") %>%
  #ALCON, VIATRIS, SIEMENS ENERGY zijn geen allocatie, wel de verkoop
  #spinoffs
  filter(!(ticker %in% c("ALC_SE", "VTRS_UW", "ENR_GY") & d_shares > 0))

#inflows eur per date agv transacties, voor gebruik in RDRM attributie
inflows_RD_eur_per_date <-
  inflows_RD_eur %>%
  group_by(date, portfolio, RDRM) %>%
  summarise(inflow_RD_eur = sum(inflow_eur)) |> 
  #NA's 0
  mutate(inflow_RD_eur = ifelse(is.na(inflow_RD_eur), 0, inflow_RD_eur))

```

```{r div_yields_VM_inlezen}
#dividend yield:
#benchmark overall: netto dividenden na belasting (MSDEWIN)
#benchmark sectoren: MXWO... indices uit Bloomberg zijn ex-dividend. Deze worden hier netto dividenden gemaakt mbv dividend yields per sector (us en eu mkt cap gewogen) uit vliegermodel, rekening houdend met een div_tax impliciet gelijk aan msdewin, zie MSDEWIN_sector_returns_EUR_hist).
#portefeuille attributie RDRM overall: dividenden meegenomen na [0]% belasting, voor alle holdings. Dividend van ind stocks uit blbrg, voor etf's veondersteld a la de s&p, behalve voor niet-dividend betalende ETF's zoals IWDA).
#portefeuille sector attributie: overall dividend wordt al meegenomen in de RDRM verdeling, daarom hier alleen herverdeling tussen sectoren: zet voor alle benchmark sectoren de dividend yield naast de gemiddelde dividend yield op die datum, neem dat verschil voor correctie.

#dividend yields per sector, mkt cap gewogen
VM_div_yld_sectors <-
  read.csv(str_c(pad_deel1, "VM_div_yld_sectors.csv")) %>%
  as_tibble() %>%
  mutate(date = as.Date(date)) %>%
  select(-X) %>%
  rename(sector = GICS_SECTOR_NAME) %>%
  filter(!is.na(sector), !sector == "#N/A Invalid Security") |> 
  #rare data Materials in juli 2022
  mutate(div_yld = ifelse(sector == "Materials" & date == "2022-07-25", 3.93, div_yld))

#tabellen met tickers etc en alle data om later in te vulen
dates_sectors <- all_prices_eur %>% select(date) %>% mutate(sector = list(sector_levels_RD)) %>% unnest(cols = c(sector))

#dividend yields per sector, mkt cap gewogen op de goede date
VM_div_yld_sectors_est <-
  VM_div_yld_sectors %>%
  group_by(sector) %>% 
  filter(!is.na(sector)) %>%
  full_join(dates_sectors %>% filter(date >= min(VM_div_yld_sectors$date)), by = c("date", "sector")) %>%
  arrange(date, sector) %>%
  #eerst na.locf naar beneden
  mutate(div_yld = na.locf(div_yld)) %>%
  full_join(dates_sectors %>% filter(date >= start_date_attr), by = c("date", "sector")) %>%
  arrange(date, sector) %>%
  #dan na.locf naar boven
  mutate(div_yld = na.locf(div_yld, fromLast = TRUE)) %>%
  #right_join(all_prices_local %>% filter(date >= start_date_attr) %>% select(date), by = "date") %>%
  mutate(div_yld = div_yld/100) %>%
  ungroup() %>%
  mutate(sector = factor(sector, levels = sector_levels_RD)) %>%
  #
  #nu nog alleen op de goede data
  right_join(dates_sectors, by = c("sector", "date")) |> 
  #
  arrange(date, sector)
  

```

```{r div_inlezen}
#voor individeuele aandelen: dividends uit blbrg

#div per portfolio per datum per sector per ticker, gebruik in sector attributie
div_EUR_portfolios_per_date_per_sector_per_ticker <-
  portfolios_tabel %>%
  left_join(dividends_EUR_month_end, by = c("date", "ticker")) %>%
  mutate(div_EUR_net = ifelse(is.na(div_EUR_net), 0, div_EUR_net),
         div_EUR_net_pf = shares * div_EUR_net) %>%
  group_by(date, portfolio, sector, ticker) %>%
  summarize(div_EUR_net_pf = sum(div_EUR_net_pf))

#per ticker trr maken (met echte netto div) voor gebruik in individuele aandelen attributie
all_trr_eur_long <-
  all_prices_eur_long %>%
  filter(date >= start_date_attr) %>%
  left_join(dividends_EUR_month_end, by = c("date", "ticker")) %>%
  mutate(div_EUR_net = replace_na(div_EUR_net, 0),
         price_eur_plus_div = price_eur + div_EUR_net,
         trr = price_eur_plus_div/lag(price_eur) - 1) %>%
  select(date, ticker, trr)

```

```{r adjusted_values_RDRM_input_Dietz}

#many to many voorkomen
pf_bm_returns_tabellen_maken <- function(portfolio) {
  dates |> mutate(portfolio = portfolio, benchmark = pf_benchmark_name(portfolio)) |> 
  left_join(bm_returns_eur_long |> rename(benchmark = ticker), by = c("benchmark", "date")) |> 
  rename(BM_rt = monthly.returns)
}

pf_bm_returns_tabel <-
  map_dfr(portfolio_levels, pf_bm_returns_tabellen_maken) 

pf_values_kolommen_div_RDRM_input_Dietz_tabel <-
    pf_values_kolommen_RDRM |>
    #werkelijke dividends per portefeuille en datum, voor correctie waarde RD tov RM
    #dit geeft alleen de geaggregeerde dividenden voor RD, niet per sector.
    left_join(div_EUR_portfolios_per_date_incl_snapshot_date, by = c("date", "portfolio")) %>%
    #inflows agv transacties voor input modified dietz
    left_join(inflows_RD_eur_per_date, by = c("date", "portfolio")) %>%
    group_by(portfolio) |>
    select(-RDRM) %>%
    mutate(inflow_RD_eur = replace_na(inflow_RD_eur, 0),
           inflow_RD_eur_min_div_EUR_net = inflow_RD_eur - div_EUR_net, #hier is inflow dus transacties en dividend samen
           RD_start = lag(RD),
           RD_end = RD,
           RM_start = lag(RM),
           RM_end = RM) %>%
    select(date, portfolio, RD_start, RD_end, RM_start, RM_end, inflow_RD_eur, div_EUR_net, inflow_RD_eur_min_div_EUR_net)

pf_bm_returns_weights_kolommen_RDRM_Dietz_tabel <-
  pf_values_kolommen_div_RDRM_input_Dietz_tabel %>%
  group_by(portfolio) |>
  mutate(pf_rt_RD = (RD_end - RD_start - inflow_RD_eur_min_div_EUR_net)/(RD_start + inflow_RD_eur_min_div_EUR_net/2),
         pf_rt_RM = (RM_end - RM_start + inflow_RD_eur_min_div_EUR_net)/(RM_start - inflow_RD_eur_min_div_EUR_net/2)) %>%
  left_join(pf_values_kolom, by = c("date", "portfolio")) %>%
  mutate(pf_rt = value_eur/lag(value_eur) - 1,
#         pf_wt_RD = RD_end/value_eur, (RD_start + inflow_RD_eur_min_div_EUR_net/2)/lag(value_eur),
#         pf_wt_RM = RM_end/value_eur, (RM_start - inflow_RD_eur_min_div_EUR_net/2)/lag(value_eur)) %>%
         pf_wt_RD = (RD_start + inflow_RD_eur_min_div_EUR_net/2)/lag(value_eur),
         pf_wt_RM = (RM_start - inflow_RD_eur_min_div_EUR_net/2)/lag(value_eur)) %>%
  left_join(bm_returns_eur |> select(date, MSDEWIN, JPM), by = "date") %>%
  mutate(BM_rt_RD = MSDEWIN,
         BM_rt_RM = ifelse(portfolio %in% c("VP100", "RD100"), NA, JPM)) |>
  mutate(BM_wt_RD = case_when(portfolio %in% c("VP100", "RD100") ~ 1,
                              str_detect(portfolio, "RD70") ~ 0.7,
                              str_detect(portfolio, "RD30") ~ 0.3,
                              str_detect(portfolio, "50") ~ 0.5),
         BM_wt_RM = 1 - BM_wt_RD) %>%
  left_join(pf_bm_returns_tabel, by = c("date", "portfolio")) |>
  #VP100 uitzonderingen maken
  mutate(pf_rt_RD = ifelse(portfolio %in% c("VP100", "RD100"), pf_rt / (1 - pf_wt_RM), pf_rt_RD),
         pf_rt_RM = ifelse(portfolio %in% c("VP100", "RD100"), 0, pf_rt_RM)) %>%
  mutate(er = (1+pf_rt)/(1+BM_rt)-1) %>%
  ungroup() |>
  #verder alleen weights en returns nodig
  select(date, portfolio, pf_wt_RD, BM_wt_RD, pf_wt_RM, BM_wt_RM, 
         pf_rt, BM_rt, er, pf_rt_RD, BM_rt_RD, pf_rt_RM, BM_rt_RM)

```

```{r attributie_RDRM_bacon_simple}

attr_tabellen_RDRM_simple <-
  #tabel voor de hele periode
  pf_bm_returns_weights_kolommen_RDRM_Dietz_tabel %>%
  #filteren op datum alles beschikbaar???
  group_by(portfolio) |>
  mutate(#NA maken op eerste datum
         BM_rt = ifelse(date == min(date), NA, BM_rt),
         BM_rt_RD = ifelse(date == min(date), NA, BM_rt_RD),
         BM_rt_RM = ifelse(date == min(date), NA, BM_rt_RM),
         #A1 Attribution Methodology
         #semi-notional returns (som wi bi)
         #bs = pf_wt_RD * BM_rt_RD + pf_wt_RM * BM_rt_RM,
         #bij VP100 en RD100 bs aanpassen bij gebrek aan BM_rt_RM
         bs = ifelse(portfolio %in% c("RD100", "VP100"), 
                     pf_wt_RD * BM_rt_RD, 
                     pf_wt_RD * BM_rt_RD + pf_wt_RM * BM_rt_RM),
         #relative performance
         er = (1 + pf_rt)/(1 + BM_rt) - 1,
         #A2 Stock Selection
         sel_ff_RD = pf_wt_RD * ((1+pf_rt_RD)/(1+BM_rt_RD)-1) * (1+BM_rt_RD)/(1+bs),
         sel_ff_RM = pf_wt_RM * ((1+pf_rt_RM)/(1+BM_rt_RM)-1) * (1+BM_rt_RM)/(1+bs),
         #bij VP100 selectie-effect RM is nul
         sel_ff_RM = ifelse(portfolio %in% c("RD100", "VP100"), 0, sel_ff_RM),
         #bij VP100 selectie-effect RM samenvoegen onder selectie-effect RD
         sel_ff_RD = ifelse(portfolio %in% c("RD100", "VP100"), sel_ff_RD + sel_ff_RM, sel_ff_RD),
         sel_ff = (1 + pf_rt)/(1 + bs) - 1,
         #A3 asset Allocation
         #all_ff kan pas beginnen na de eerste maand met waarneming, daarom
         all_ff = (1 + bs)/(1 + BM_rt) - 1) |>
         #NA's vervangen door nullen
         mutate(across(c(contains("_rt"), contains("_ff"), "er", "bs"), ~replace_na(., 0))) |>
         #compounding through time
         mutate(
           pf_rt_cum = cumprod(1 + pf_rt) - 1,
           pf_rt_RD_cum = cumprod(1 + pf_rt_RD) - 1,
           pf_rt_RM_cum = cumprod(1 + pf_rt_RM) - 1,
           BM_rt_cum = cumprod(1 + BM_rt) - 1,
           BM_rt_RD_cum = cumprod(1 + BM_rt_RD) - 1,
           BM_rt_RM_cum = cumprod(1 + BM_rt_RM) - 1,
           er_cum = cumprod(1 + er) - 1,
           sel_ff_RD_cum = cumprod(1 + sel_ff_RD) - 1,
           sel_ff_RM_cum = cumprod(1 + sel_ff_RM) - 1,
           all_ff_cum = cumprod(1 + all_ff) - 1) |>
  ungroup()

attr_tabel_RDRM_simple <- function(portfolio = "VP100", start_date = start_date_sector_indices, end_date = snapshot_date) {
  #tabel voor een separate periode, haalt gegevens uit grote tabel
  attr_tabellen_RDRM_simple |>
    filter(portfolio == !!portfolio, date >= start_date, date <= end_date) %>%
    mutate(
         #eerste regel op 0 zetten
         across(c(contains("_rt"), "er", contains("_ff")),
                ~ if_else(row_number() == 1, 0, .)),
         #kolommen vervangen door cum vanaf start_date
         BM_rt_cum = cumprod(1 + BM_rt) - 1,
         pf_rt_cum = cumprod(1 + pf_rt) - 1,
         pf_rt_RD_cum = cumprod(1 + pf_rt_RD) - 1,
         pf_rt_RM_cum = cumprod(1 + pf_rt_RM) - 1,
         BM_rt_RD_cum = cumprod(1 + BM_rt_RD) - 1,
         BM_rt_RM_cum = cumprod(1 + BM_rt_RM) - 1,
         er_cum = cumprod(1 + er) - 1,
         sel_ff_RD_cum = cumprod(1 + sel_ff_RD) - 1,
         sel_ff_RM_cum = cumprod(1 + sel_ff_RM) - 1,
         all_ff_cum = cumprod(1 + all_ff) - 1)
}
```

```{r attributie_RDRM_bacon_simple_nice}
#mooie tabel voor een portefeuille van de hele historie
attr_tabel_RDRM_simple_nice <- function(portfolio = "VP100", start_date = start_date_sector_indices, end_date = lastdate) {
  attr_tabellen_RDRM_simple %>%
    filter(portfolio == !!portfolio, date >= start_date, date <= end_date) %>%
    filter(date > min(.$date)) %>%
    arrange(desc(date)) %>% #laatste maanden bovenaan
    mutate(date = str_c(month(as.Date(date), label = TRUE), "-", year(as.Date(date)))) %>%
    select(date, pf_wt_RD, pf_wt_RM, pf_rt_RD, pf_rt_RM, pf_rt, BM_rt_RD, BM_rt_RM, BM_rt, er, all_ff, sel_ff_RD, sel_ff_RM) %>%
  mutate_at(vars(-date), ~ (.*100)) |> 
  gt(id = "one") |> #id ivm container scroll css
  tab_options(table.width = 850) |> 
  fmt_number(decimals = 1, columns = everything()) |> 
  tab_spanner(columns = 2:3, label = "startgewicht") |> 
  tab_spanner(columns = 4:6, label = "portefeuille return") |> 
  tab_spanner(columns = 7:9, label = "benchmark return") |> 
  tab_spanner(columns = 10:13, label = "attributie") |> 
  tab_style(locations = cells_body(columns = c(6, 9, 10, 11, 12, 13)), 
            style = list(cell_text(weight = "bold"))) |> 
  gt_add_dividers_right(columns = c(1, 3, 6, 9, 10)) |> 
  gt_cols_label_attr() |> 
  gt_data_colors(columns = 10:13) |> 
  gt_delete_first_col_label() |> 
  gt_first_col_bold() |> 
  sub_zero(zero_text = " ") |> #vervangen van nullen
  tab_header(str_c("Attributie RDRM per maand, van ", format(start_date, "%d-%b-%Y"), " t/m ", 
                   format(end_date, "%d-%b-%Y"), ", ", portfolio)) %>%
  gt_font_padding_align() |> 
  gt_container_scroll() 
}

```

## Fama-French factoren RD-gedeelte

::: panel-tabset

### RD-gedeelte

```{r Fama_French}

#fama french 
#http://mba.tuck.dartmouth.edu/pages/faculty/ken.french/data_library.html#Developed
#bovenste csv file, 3 factors, monthly

Developed_3_Factors <- 
  read_csv(paste0(pad_deel1, "Developed_3_Factors.csv"), skip = 6, show_col_types = FALSE) %>%
  mutate_at(.vars = c(2, 3, 4, 5), ~as.double(.)) %>%
  rename(date = 1) %>%
  #er zit nog een tabel onder met alleen hele jaartallen
  mutate(str_length1 = str_length(date)) |> 
  filter(str_length1 == 6) |> 
  select(-str_length1) |>
  #
  mutate(date = ymd(parse_date_time(date, "%Y/%m")),
         date = lubridate::rollback(date + months(1)))
```

```{r Fama_French_RD}
#| fig-height: 5

#portefeuille returns en de MSCI World returns in USD
tabel_voor_FF <-
  attr_tabellen_RDRM_simple %>%
  filter(date >= start_date_attr) |> 
  filter(portfolio != "VD50") |> #deze portefeuille heeft niet genoeg waarnemingen
  select(date, portfolio, pf_rt_RD) %>%
  group_by(portfolio) %>%
  mutate(portfolio = factor(portfolio, levels = portfolio_levels)) %>%
  left_join(all_prices_local %>% select(date, EURUSD_ECB), by = "date") %>%
  mutate(EUR_return_vs_USD = EURUSD_ECB/lag(EURUSD_ECB) - 1) %>%
  left_join(Developed_3_Factors, by = "date") %>%
  mutate(MKT_RF = `Mkt-RF`/100,
         SMB = SMB/100,
         HML = HML/100,
         RF = RF/100,
         R_excess = round((1 + pf_rt_RD)*(1 + EUR_return_vs_USD) - 1 - RF, 4)) %>%
  select(date, portfolio, R_excess, MKT_RF, SMB, HML) %>%
  filter(!is.na(R_excess))

tabel_voor_FF %>%
  nest() %>%
  mutate(fit = map(data, ~ lm(R_excess ~ MKT_RF + SMB + HML, data = .)),
         tidied = map(fit, tidy, conf.int = T, conf.level = 0.95)) %>%
  unnest(tidied) %>%
  rename(beta = estimate) %>%
  filter(term != "(Intercept)") %>%
ggplot(aes(x = term, y = beta, shape = term, color = term)) +
  facet_wrap(~portfolio, ncol = 7) +
  geom_hline(yintercept = 0, col = "grey60", linetype = "dashed") +
  geom_point() +
  geom_errorbar(aes(ymin = conf.low, ymax = conf.high))+
  scale_y_continuous(limits = c(-0.6, 1.25), breaks = seq(-0.5, 1.25, 0.25)) +
  scale_color_manual(values = c(usred, RD50green, euroblue)) +
  labs(title = "Fama French (Developed Markets) factor coëfficienten",
       subtitle = str_c("RD-deel portefeuilles, van ", format(min(tabel_voor_FF$date), "%d-%b-%Y"), " tot ", format(max(tabel_voor_FF$date), "%d-%b-%Y")),
       x = "",
       y = "",
       caption = "coefficienten met hun 95% conf interval van de regressie van de returns minus de Risk Free Rate op de drie factoren\n
       bron factor data: Fama French, factor returns naar EUR vertaald, data vanaf jan-17
       MKT_RF = de marktreturn minus risk free return (beta),
       HML = Hoge minus Lage Book/Price (value effect),
       SMB = Small minus Big (small cap effect)") +
  theme_bw() +
  theme(plot.title = element_text(hjust = 0.5),
        plot.subtitle = element_text(hjust = 0.5),
        plot.caption = element_text(hjust = 0),
        legend.position = "none",
        axis.text.x = element_text(size = 8, angle = 90, hjust = .5))


```

### 24-m voortschrijdend

```{r Fama_French_rolling}
#| fig-height: 5

window <- 24

rolling_lm <-
  rollify(.f = function(R_excess, MKT_RF, SMB, HML) {
    lm(R_excess ~ MKT_RF + SMB + HML)
  }, window = window, unlist = FALSE)

tabel_voor_FF_rolling_betas <-
 tabel_voor_FF %>%
  mutate(rolling_ff = rolling_lm(R_excess, MKT_RF, SMB, HML)) %>%
  #tidy kan niet overweg met lgl
  filter(!is.na(rolling_ff)) |>
  mutate(tidied = map(rolling_ff, tidy, conf.int = TRUE)) |>
  unnest(cols = tidied) %>%
  slice(-1:-window-1) %>%
  select(date, portfolio, term, estimate, conf.low, conf.high) %>%
  filter(term!= "(Intercept)") %>%
  rename(beta = estimate, factor = term) %>%
  group_by(portfolio, factor)

tabel_voor_FF_rolling_betas %>%
  ggplot(aes(x = date, y = beta, color = factor)) +
  geom_line() +
  facet_wrap(~portfolio, ncol = 7) +
  theme_bw() +
  labs(title = "24-m voortschrijdende Fama French (Developed Markets) factor coëfficienten",
       subtitle = str_c("RD-deel portefeuilles, van ", min(tabel_voor_FF$date), " tot ", max(tabel_voor_FF$date)),
       x = "",
       y = "",
       caption = "voortschrijdende 24-maands coëfficienten van de regressie van de returns minus de Risk Free Rate op de drie factoren\n
       bron factor data: Fama French, factor returns naar EUR vertaald, data vanaf jan-17
       MKT_RF = de marktreturn minus risk free return (beta),
       HML = Hoge minus Lage Book/Price (value effect),
       SMB = Small minus Big (small cap effect)") +
  scale_y_continuous(limits = c(-0.5, 1.25), breaks = seq(-0.5, 1.25, 0.25)) +
  scale_color_manual(values = c(usred, RD50green, euroblue)) +
  theme(plot.title = element_text(hjust = 0.5),
        plot.subtitle = element_text(hjust = 0.5),
        plot.caption = element_text(hjust = 0),
        legend.position = "bottom",
        legend.title = element_blank(),
        axis.text.x = element_text(size = 8, angle = 90, hjust = .5))

```

### MSCI World en -sectoren

```{r Fama_French_msci_sectoren}
#| fig-height: 8

bm_MSCI_en_sector_indices_eur_long |> 
  group_by(ticker) |>  
  mutate(monthly.returns = PX_LAST/lag(PX_LAST) - 1) |> 
  filter(date > min(date)) |> 
  rowwise() %>%
  mutate(sector = ifelse(ticker == "MXWO", "MSCI World", sector_short_RD_to_long_name(str_sub(ticker, str_length(ticker) - 1, str_length(ticker))))) %>%
  group_by(sector) %>%
  mutate(sector = factor(sector, levels = c("MSCI World", sector_levels_RD))) %>%
  left_join(all_prices_local %>% select(date, EURUSD_ECB), by = "date") %>%
    mutate(EUR_return_vs_USD = EURUSD_ECB/lag(EURUSD_ECB) - 1) %>%
  left_join(Developed_3_Factors, by = "date") %>%
    mutate(MKT_RF = `Mkt-RF`/100,
           SMB = SMB/100,
           HML = HML/100,
           RF = RF/100,
           R_excess = round((1 + monthly.returns)*(1 + EUR_return_vs_USD) - 1 - RF, 4)) %>%
  group_by(sector) %>%
    select(date, sector, R_excess, MKT_RF, SMB, HML) %>%
    nest() %>%
  mutate(fit = map(data, ~ lm(R_excess ~ MKT_RF + SMB + HML, data = .)),
         tidied = map(fit, tidy, conf.int = T, conf.level = 0.95)) %>%
    unnest(tidied) %>%
    rename(beta = estimate) %>%
    filter(term != "(Intercept)") %>%
  ggplot(aes(x=term, y=beta, shape = term, color = term)) +
    facet_wrap(~sector, ncol =6) +
    geom_point() +
    geom_hline(yintercept = 0, col = "grey60", linetype = "dashed") +
    geom_errorbar(aes(ymin=conf.low, ymax = conf.high))+
    scale_y_continuous(breaks = seq(-0.5, 1.25, 0.25)) +
    scale_color_manual(values = c(usred, RD50green, euroblue)) +
    labs(title = "Fama French (Developed Markets) factor coëfficienten",
         subtitle = "MSCI World sectoren",
         x="",
         y="",
         caption = "coefficienten met hun 95% conf interval van de regressie van de returns minus de Risk Free Rate op de drie factoren\n
           bron factor data: Fama French, factor returns naar EUR vertaald, data vanaf feb-12
           MKT_RF = de marktreturn minus risk free return (beta),
           HML = Hoge minus Lage Book/Price (value effect),
           SMB = Small minus Big (small cap effect)") +
    theme_bw()+
    theme(plot.title = element_text(hjust=0.5),
          plot.subtitle = element_text(hjust=0.5),
          plot.caption = element_text(hjust=0),
          legend.position = "none")

```
:::

# Performance attributie

## Performance attributie - RDRM Allocatie - Selectie

```{r attr_pfs_simple_RDRM}

attr_tabel_RDRM_simple_summary <- function(portfolio = "VP100", start_date = start_date_attr, end_date = snapshot_date) {
  #summary voor een portefeuille
  attr_tabel_RDRM_simple(portfolio, start_date, end_date) %>%
    filter(date > start_date) %>%
    mutate(pf_av_wt_RD = cumsum(pf_wt_RD)/seq_along(pf_wt_RD),
           pf_av_wt_RM = cumsum(pf_wt_RM)/seq_along(pf_wt_RM)) %>% filter(date == end_date) %>%
    select(portfolio, pf_av_wt_RD, pf_av_wt_RM, pf_rt_RD_cum, pf_rt_RM_cum, pf_rt_cum, BM_rt_RD_cum, BM_rt_RM_cum, BM_rt_cum, er_cum, all_ff_cum, sel_ff_RD_cum, sel_ff_RM_cum) %>%
    rename_at(vars(contains("_cum")), ~str_replace(., "_cum", ""))
}

attr_tabel_RDRM_simple_summaries <- function(start_date = start_date_attr, end_date = snapshot_date) {
  #summaries voor alle portefeuilles onder elkaar
  
    # if(start_date < start_date_vp_vf)   pfs_todo <- {c("RD50", "RD30","RD70")}
    # else if(start_date >= start_date_vp_vf & start_date < start_date_fd) pfs_todo <- {c("RD50", "VP50", "RD30","RD70", "VP100")}
    # else if(start_date >= start_date_fd & start_date < start_date_vd) pfs_todo <- {c("RD50", "DZ50", "VP50", "RD30","RD70", "VP100")}
    # else pfs_todo <- portfolio_levels
  
  map(portfolio_levels, attr_tabel_RDRM_simple_summary, start_date = start_date, end_date = end_date) %>%
    bind_rows %>% as_tibble() %>%
    rowwise() %>%
    filter(!is.na(pf_av_wt_RD))
}
```

```{r attr_pfs_simple_RDRM_nice}
attr_tabel_RDRM_simple_summaries_nice <- function(start_date = start_date_attr, end_date = snapshot_date, portfolios = portfolio_levels) {
 attributie_tabel_nice <- 
  attr_tabel_RDRM_simple_summaries(start_date, end_date) %>%
  filter(portfolio %in% portfolios) %>%
  select(portfolio, everything()) %>%
  mutate_at(vars(-portfolio), ~ (.*100)) |> 
  gt() |> 
  gt_cols_label_attr() |> 
  fmt_number(decimals = 1, columns = everything()) |> 
  tab_spanner(columns = 2:3, label = "startgewicht", id = "wt") |>  
  tab_spanner(columns = 4:6, label = "portefeuille return") |> 
  tab_spanner(columns = 7:9, label = "benchmark return") |> 
  tab_spanner(columns = 10:13, label = "attributie") |> 
  tab_style(locations = cells_body(columns = c(6, 9, 10, 11, 12, 13)), 
            style = list(cell_text(weight = "bold"))) |> 
  gt_add_dividers_right(columns = c(1, 3, 6, 9, 10)) |> 
  gt_data_colors(columns = 10:13) |> 
  gt_delete_first_col_label() |> 
  opt_row_striping() |> 
  gt_cols_align() |> 
  gt_first_col_bold() |> 
  sub_zero(zero_text = " ") |> 
  gt_font_padding_align() |> 
  gt_portfolio_colors() |>
  tab_header(str_c("Attributie RDRM, van ", format(as.Date(start_date), "%d-%b-%Y"), " t/m ", format(as.Date(end_date), "%d-%b-%Y"))) |> 
  tab_options(table.width = 850)

  if(difftime(end_date, start_date) |> as.integer() > 31) {
    attributie_tabel_nice <- 
      attributie_tabel_nice |> 
      tab_footnote("De attributie is cumulatief op maandbasis en maakt gebruik van maandelijkse startgewichten. De in deze tabel vermelde gewichten zijn gemiddeld over de hele periode.",
      locations = cells_column_spanners(spanners = "wt"))
  } 
   if(end_date > start_date) {
     attributie_tabel_nice
   } else {
        tribble(~x, str_c("geen maandgevens na ", format(end_date, "%d-%b"))) |> rename(" " = x) |> gt()   
   }
 }
```

### Performance attributie - RDRM Allocatie - Selectie

::: panel-tabset
#### ytd

```{r attr_pfs_ytd}

attr_tabel_RDRM_simple_summaries_nice(start_date = last_ultimo_year, end_date = snapshot_date)
```
#### qtd

```{r attr_pfs_qtd}
attr_tabel_RDRM_simple_summaries_nice(start_date = last_quarter_end, end_date = snapshot_date)
```

#### mtd

```{r attr_pfs_mtd}
attr_tabel_RDRM_simple_summaries_nice(start_date = lastdate, end_date = snapshot_date)
```

<!-- #### ytd t/m lq -->

<!-- ```{r attr_pfs_ytd_last_month} -->

<!-- attr_tabel_RDRM_simple_summaries_nice(start_date = last_ultimo_year, end_date = lastdate) -->

<!-- ``` -->

#### lm

```{r attr_pfs_last_month}
attr_tabel_RDRM_simple_summaries_nice(start_date = next_to_lastdate, end_date = lastdate) 
```

#### lq

```{r attr_pfs_lq}
attr_tabel_RDRM_simple_summaries_nice(start_date = last_quarter_start, end_date = last_quarter_end)
```

#### `r last_year`

```{r attr_pfs_ly}
attr_tabel_RDRM_simple_summaries_nice(start_date = next_to_last_ultimo_year, end_date = last_ultimo_year)
```
#### `r last_year - 1`

```{r attr_pfs_ly2}
attr_tabel_RDRM_simple_summaries_nice(start_date = next_to_last_ultimo_year2, end_date = next_to_last_ultimo_year)
```

#### `r last_year - 2`

```{r attr_pfs_ly3}
attr_tabel_RDRM_simple_summaries_nice(start_date = next_to_last_ultimo_year3, end_date = next_to_last_ultimo_year2)
```
#### `r last_year - 3`

```{r attr_pfs_ly4}
attr_tabel_RDRM_simple_summaries_nice(start_date = next_to_last_ultimo_year4, end_date = next_to_last_ultimo_year3)
```

#### vanaf start VD50

```{r attr_pfs_si_vd}
attr_tabel_RDRM_simple_summaries_nice(start_date = start_date_vd, end_date = snapshot_date)
```

#### vanaf start DZ50

```{r attr_pfs_si_fd}
attr_tabel_RDRM_simple_summaries_nice(start_date = start_date_fd, end_date = snapshot_date)
```

#### vanaf start VP

```{r attr_pfs_si_vp_vf}
attr_tabel_RDRM_simple_summaries_nice(start_date = start_date_vp_vf, end_date = snapshot_date)
```

#### vanaf start RD50

```{r attr_pfs_si}

attr_tabel_RDRM_simple_summaries_nice(start_date = start_date_sector_indices, end_date = snapshot_date)
```
:::

### Cumulatieve RDRM attributie-effecten

```{r attr_RDRM_graphs_functie}

chart_attr_effecten_RDRM <- function(start_date = start_date_vp_vf, end_date = snapshot_date) {
  #alle_pfs
  attr_tabellen <- map_dfr(portfolio_levels, attr_tabel_RDRM_simple, start_date, end_date) 
  #allen de beschikbare voor de gehele periode
  pfs <- attr_tabellen |> group_by(portfolio) |> tally() |> filter(n == max(n)) |> pull(portfolio)
  attr_tabellen |> 
    filter(portfolio %in% pfs) |> 
  select(portfolio, date, er_cum, all_ff_cum, sel_ff_RD_cum, sel_ff_RM_cum) %>%
    rename_at(vars(-date), ~str_remove(., "_cum")) %>%
  pivot_longer(-c(date, portfolio), names_to  = "ff") %>%
  mutate(portfolio = factor(portfolio, levels = portfolio_levels),
         ff = factor(ff, levels = c("er", "all_ff", "sel_ff_RD", "sel_ff_RM"))) %>%
  ggplot(aes(x = date, y = value, group = ff, col = ff, linewidth = ff, fill = ff)) +
  geom_line(alpha = 0.8) +
  geom_hline(yintercept = 0, col = "grey60", linetype = "dashed") +
  scale_color_manual(values = c(RD30green, euroblue, usred, bondspurple)) +
  scale_linewidth_manual(values = c(2, 1, 1, 1)) +
  scale_y_continuous(labels = scales::percent_format(accuracy = 0.1)) +
  scale_x_date(date_labels = "%b-%y", breaks = datum_breaks(start_date, end_date)) +
  ggtitle(str_c("Cumulatieve RDRM attributie-effecten, van ", format(as.Date(start_date), "%d-%b-%Y"), " t/m ", format(as.Date(end_date), "%d-%b-%Y"))) +
  labs(x = "", y = "") +
    facet_wrap(~portfolio, ncol = 8) +
    theme_bw() +
    theme(legend.position = "bottom") +
    theme(legend.title = element_blank()) +
    theme(axis.text.x = element_text(angle = 90, vjust = .5),
    strip.text = element_text(size = if(length(pfs) == 1) 12 else 8),
    plot.title = element_text(hjust = 0.5))
}
```

::: panel-tabset
#### ytd

```{r attr_RDRM_graphs_ytd}

chart_attr_effecten_RDRM(start_date = last_ultimo_year, end_date = snapshot_date) #+
```

#### qtd

```{r attr_RDRM_graphs_qtd}

chart_attr_effecten_RDRM(start_date = last_quarter_end, end_date = snapshot_date) 
```

#### mtd

```{r attr_RDRM_graphs_mtd}

chart_attr_effecten_RDRM(start_date = lastdate, end_date = snapshot_date) 
```

#### lm

```{r attr_RDRM_graphs_lm}

chart_attr_effecten_RDRM(start_date = next_to_lastdate, end_date = lastdate) 
```

#### lq

```{r attr_RDRM_graphs_lq}

chart_attr_effecten_RDRM(start_date = last_quarter_start, end_date = last_quarter_end) 
```

#### `r last_year`

```{r attr_RDRM_graphs_ly}

chart_attr_effecten_RDRM(start_date = next_to_last_ultimo_year, end_date = last_ultimo_year) 
```

#### `r last_year - 1`

```{r attr_RDRM_graphs_ly2}

chart_attr_effecten_RDRM(start_date = next_to_last_ultimo_year2, end_date = next_to_last_ultimo_year)
```

#### vanaf start VD50

```{r attr_RDRM_graphs_start_date_vd}

chart_attr_effecten_RDRM(start_date = start_date_vd, end_date = snapshot_date)
```

#### vanaf start DZ50

```{r attr_RDRM_graphs_start_date_fd}

chart_attr_effecten_RDRM(start_date = start_date_fd, end_date = snapshot_date)
```

#### vanaf start VP

```{r attr_RDRM_graphs_start_date_vp_vf}

chart_attr_effecten_RDRM(start_date = start_date_vp_vf, end_date = snapshot_date)
```
#### vanaf start RD50

```{r attr_RDRM_graphs_start_date_sector_indices}

chart_attr_effecten_RDRM(start_date = start_date_sector_indices, end_date = snapshot_date)
```

:::

### Hele historie t/m `r format(snapshot_date, "%d-%b-%y")`, per maand per modelportefeuille

::: panel-tabset
#### `r portfolio_levels[1]`

```{r attr_maand_ff}

attr_tabel_RDRM_simple_nice(portfolio = "RD50", start_date = start_date_sector_indices, end_date = snapshot_date)
```

#### `r portfolio_levels[2]`

```{r attr_maand_fd}

attr_tabel_RDRM_simple_nice("DZ50", start_date_fd, snapshot_date)
```

#### `r portfolio_levels[3]`

```{r attr_maand_vf}

attr_tabel_RDRM_simple_nice("VP50", start_date_vp_vf, snapshot_date)
```

#### `r portfolio_levels[4]`

```{r attr_maand_vd}
attr_tabel_RDRM_simple_nice("VD50", start_date_vd, snapshot_date)
```

#### `r portfolio_levels[5]`

```{r attr_maand_ts}

attr_tabel_RDRM_simple_nice("RD30", start_date_sector_indices, snapshot_date)
```

#### `r portfolio_levels[6]`

```{r attr_maand_st}

attr_tabel_RDRM_simple_nice("RD70", start_date_sector_indices, snapshot_date)
```

#### `r portfolio_levels[7]`

```{r attr_maand_hz}

attr_tabel_RDRM_simple_nice("RD100", start_date_sector_indices, snapshot_date)
```
#### `r portfolio_levels[8]`

```{r attr_maand_vp}

attr_tabel_RDRM_simple_nice("VP100", start_date_vp_vf, snapshot_date)
```
:::

```{r sector_indices_msci_net_eur}

MXWO_sector_indices_excl_div_EUR_hist <-
  bm_prices_eur %>%
  select(date, all_of(msci_sector_tickers)) %>%
  rename_at(vars(-date), ~str_remove(., "MXWO0")) %>%
  rename_at(vars(-date), ~sector_short_RD_to_long_name(.)) %>%
  mutate(across(-date, ~ifelse(date == start_date_sector_indices, 0, (.x/lag(.x) - 1))),
         across(-date, ~(cumprod(1 + .))*100)) |>
  pivot_longer(-date, names_to = "sector", values_to = "index") |>
  mutate(sector = factor(sector, levels = sector_levels_RD),
         incl_or_excl = "excl")
```

```{r sectorgewichten}
#sectorgewichten
IWDA_sector_weights_hist <-
  etf_sector_weights_hist %>%
  filter(ETF == "IWDA_NA", !sector %in% c("Staatsobligaties", "Cash", "Credits")) %>%
  mutate(sector = factor(sector, levels = sector_levels_RD))
```

```{r sectoren_bruto_indices_maken}

MSDEWIN_sector_returns_EUR_hist <-
  bm_prices_eur %>%
    select(date, starts_with("MXWO0")) %>%
    pivot_longer(-date, names_to = "ticker", values_to = "index") |>
    left_join(sector_levels_RD_ticker_name, by = "ticker") |>
    select(date, sector, index) |>
    #sector returns aangepast voor div yield sector us_eu tov div yield us_eu gemiddeld
    #toepassen als ook de portefeuille holdings worden aangepast voor dividenden
    full_join(VM_div_yld_sectors_est, by = c("sector", "date")) %>%
    group_by(sector) %>%
    fill(div_yld, .direction = 'up') %>%
    mutate(bm_rt = (index/lag(index) - 1 + lag(div_yld)/12)) %>%
    select(date, sector, bm_rt) %>%
    mutate(sector = factor(sector, levels = sector_levels_RD))

#aanpassen zo dat de gewogen "bottom up" return gelijk is aan de MSDEWIN
#1) verschillen tussen de hierboven berekende sectorrendementen gewogen (bottom-up) en de MSDEWIN
MSDEWIN_returns_vs_wtd_sector_returns_diff <-
  MSDEWIN_sector_returns_EUR_hist %>%
  left_join(IWDA_sector_weights_hist, by = c("date", "sector")) %>%
  select(-ETF) %>%
  rename(bm_wt = weight) %>%
  left_join(all_returns_eur %>% select(date, MSDEWIN), by = "date") %>%
  group_by(date) %>%
  mutate(wtd_bm_rt = bm_wt * bm_rt) %>%
  reframe(date = date,
            MSDEWIN = MSDEWIN,
            bm_rt_bottomup = sum(wtd_bm_rt)) %>%
  select(date, MSDEWIN, bm_rt_bottomup) %>%
  mutate(diff = bm_rt_bottomup - MSDEWIN) %>%
  select(date, bm_rt_bottomup, MSDEWIN, diff) %>%
  group_by(date) |>
  unique() #maar een diff per datum nodig

#2) ken dat verschil naar rato toe aan de sectoren (bm_rt's)
MSDEWIN_sector_returns_EUR_hist_adj <-
  IWDA_sector_weights_hist %>% 
  #filter(date >= "2014-12-31") |> 
  filter(date >= start_date_sector_indices) |> 
  left_join(MSDEWIN_sector_returns_EUR_hist, by = c("date", "sector")) %>%
  left_join(MSDEWIN_returns_vs_wtd_sector_returns_diff, by = "date") %>%
  rename(bm_wt = weight) %>%
  group_by(date) %>%
  #aanpassing van b/u zo dat het aansluit bij t/d
  mutate(bm_rt_wtd = bm_rt * bm_wt,
         diff_wtd = bm_wt * diff,
         bm_rt_wtd_adj = bm_rt_wtd - diff_wtd,
         bm_rt_adj =  bm_rt_wtd_adj/bm_wt) %>%
  #daar gaat ie - aanpassing zo dat bottum up optelt tot top down
  #uitgangspunt is top down is ok en verandert niet, en gewichten veranderen ook niet
  select(-bm_rt) %>%
  rename(bm_rt = bm_rt_adj) %>%
  select(date, sector, bm_rt) %>%
  arrange(date, sector)
  # #om te kijken welke verschillen er overblijven:

  # MSDEWIN_sector_returns_EUR_hist_adj %>%
  # left_join(IWDA_sector_weights_hist, by = c("date", "sector")) %>%
  # select(-ETF) %>%
  # rename(bm_wt = weight) %>%
  #  summarize(bm_rt = weighted.mean(bm_rt, bm_wt)) %>%
  # left_join(MSDEWIN_trr, by = "date") %>%
  # mutate(diff_rest = bm_rt - MSDEWIN_trr)

#check ziet er goed uit
#zelfde later doen voor de aansluiting portefeuille pf returns RD en de sectorgewogen pf returns RD

#indices maken van MSDEWIN_sector_returns_EUR_hist_adj
MSDEWIN_sector_indices_incl_div_EUR_hist_adj <-
  MSDEWIN_sector_returns_EUR_hist_adj %>%
  group_by(sector) %>%
  mutate(bm_rt = ifelse(date == min(date), 0, bm_rt),
         index = cumprod(1 + bm_rt),
         index = 100 * index,
         incl_or_excl = "incl") %>%
  select(-bm_rt) %>%
  mutate(sector = factor(sector, levels = sector_levels_RD))

```

```{r in_en_ex_samenvoegen}
MSCI_sector_indices_in_en_ex_EUR_hist <-
  MXWO_sector_indices_excl_div_EUR_hist %>%
  bind_rows(MSDEWIN_sector_indices_incl_div_EUR_hist_adj) %>%
  mutate(group = str_c(sector, "_", incl_or_excl)) %>%
  arrange(sector, date) %>%
  group_by(sector)
```

```{r div_EUR_net_per_portfolio_date_sector}
#dividends per datum per portefeuille per sector
div_EUR_net_per_portfolio_date_sector <-
  div_EUR_portfolios_per_date_per_sector_per_ticker %>% #zoals eerder gedefinieerd
  #alleen vp en vf en RD sectoren
  filter(portfolio %in% portfolio_levels_vlieger, sector %in% sector_levels_RD) %>%
  group_by(portfolio, date, sector) %>%
  summarize(div_EUR_net_pf_sector = sum(div_EUR_net_pf))
```

```{r avg_div_per_date_per_pf}
#dividends kunnen begin en eindwaarden sectoren niet beinvloeden,
#dus 1) berekenen dividend per sector per pf per datum, zie div_EUR_net_per_portfolio_date_sector hierboven
avg_div_per_date_per_pf <-
  div_EUR_net_per_portfolio_date_sector %>%
  summarise(avg_div_EUR_net_pf_sector = mean(div_EUR_net_pf_sector))
#dan 2) dividend per sector per datum per pf t.o.v. gemiddelde daarvan per datum per pf, zodat het sommeert tot nul per datum per portefeuille
sector_div_EUR_vs_avg <-
  div_EUR_net_per_portfolio_date_sector %>%
  left_join(avg_div_per_date_per_pf, by = c("date", "portfolio")) %>%
  mutate(sector_div_EUR_vs_avg = div_EUR_net_pf_sector - avg_div_EUR_net_pf_sector)
  #laatste kolom sommeert tot nul per pf per dat
```

```{r inflows_RD_eur_per_sector_per_date}
#inflows eur per sector per date agv transacties binnen RD, voor gebruik in sector attributie
inflows_RD_eur_per_sector_per_date <-
  inflows_RD_eur %>%
  select(date, ticker, portfolio, inflow_eur) |>
  left_join(ticker_sector_weights_hist |> filter(sector %in% sector_levels_RD),
            by = c("date", "ticker"),
            relationship = "many-to-many") %>%
  mutate(inflow_sector_eur = weight * inflow_eur) %>%
  group_by(date, portfolio, sector) %>%
  summarize(inflow_sector_eur = sum(inflow_sector_eur)) %>%
  mutate(sector = factor(sector, levels = sector_levels_RD))

```

```{r inflows_RD_en_div_eur_per_sector_per_date}
#inflows eur per sector per date agv transacties binnen RD, voor gebruik in sector attributie, met dividenden erbij
inflows_RD_en_div_eur_per_sector_per_date <-
  sector_div_EUR_vs_avg %>%
  left_join(inflows_RD_eur_per_sector_per_date, by = c("sector", "date", "portfolio")) %>%
  mutate(inflow_sector_eur = replace_na(inflow_sector_eur, 0),
         #dividend inflow vs gemiddelde met plusteken ##??(positieve inflow gaat ten koste van return, negatieve komt ten goede)
         inflow_sector_eur_incl_div = inflow_sector_eur + sector_div_EUR_vs_avg)
```

```{r attr_pfs_pf_bm_sector_wgts_returns_eur}
#berekening sector returns portefeuilles
pf_bm_sector_wgts_returns_eur <- function(portfolio = "VP100", end_date = lastdate) {
  #sectorgewichten pf en bm historisch per datum
    start_date <- case_when(!!portfolio == "VD50" ~ start_date_vd, 
                            !!portfolio == "VP50" ~ start_date_vp_vf, 
                            !!portfolio == "VP100" ~ start_date_vp_vf)
  sector_RD_wts_pf_vs_bm_hist_all_pfs %>%
    filter(portfolio == !!portfolio, date >= start_date, date <= end_date) %>%
  #naast de voor dividenden en RD naar en van RM transacties gecorrigeerde start en eind bedragen zetten
  left_join(pf_values_kolommen_div_RDRM_input_Dietz_tabel, by = c("portfolio", "date")) %>%
  group_by(sector) %>%
  #bedragen per sector maken start en eind
  mutate(RD_sector_start = RD_start * lag(pf_wt),
         RD_sector_end = RD_end * pf_wt) %>%
  #bedragen transacties intrasector correctie ophalen
  left_join(inflows_RD_en_div_eur_per_sector_per_date %>% filter(portfolio == !!portfolio), by = c("sector", "date", "portfolio")) %>%
  mutate(
  #returns berekenen met end en start en correctie voor inflow
  pf_rt = ifelse(pf_wt == 0, 0, 
                 (RD_sector_end - RD_sector_start - inflow_sector_eur_incl_div)/(RD_sector_start + inflow_sector_eur_incl_div/2))) %>%
  #benchmark sector returns ernaast
  left_join(MSDEWIN_sector_returns_EUR_hist_adj, by = c("date", "sector")) %>%
  #benchmark returns erbij
  left_join(all_returns_eur %>% select(date, MSDEWIN), by = "date") %>%
  #waar nulgewicht is van de sector komt een NA, deze vervangen door bm_rt
  mutate(pf_rt = ifelse(is.na(pf_rt), bm_rt, pf_rt)) %>%
  filter(date > start_date) %>%
  #NA's bij utilities div
  mutate(across(is.numeric, ~replace_na(.x, 0)))
}

tabellen_pfs_bm_sector_wgts_returns_eur <-
  map(portfolio_levels_vlieger, pf_bm_sector_wgts_returns_eur, end_date = snapshot_date) %>%
  bind_rows()

#berekening sector returns portefeuilles - andere benadering, met trrs' per ticker

#hier pf_rt's zodanig aanpassen dat het gewogen uitkomt op pf_rt_RD
#1) verschillen tussen de met de pf sectorgewichten gewogen sectorrendementen en de pf_rt_RD
vp_vf_vd_pf_returns_vs_wtd_sector_returns_diff <-
  pf_bm_returns_weights_kolommen_RDRM_Dietz_tabel %>%
  filter(portfolio == "VP100" | portfolio == "VP50" | portfolio == "VD50") %>%
  select(date, portfolio, pf_rt_RD) %>%
  left_join(tabellen_pfs_bm_sector_wgts_returns_eur, by = c("date", "portfolio")) %>%
  group_by(portfolio, date) %>%
  mutate(n = n(),
         wtd_pf_rt = pf_rt * pf_wt) %>%
  reframe(date = date, portfolio = portfolio, pf_rt_RD = pf_rt_RD, wtd_pf_rt = weighted.mean(pf_rt, pf_wt),
            diff = wtd_pf_rt - pf_rt_RD) %>%
  select(date, portfolio, pf_rt_RD, diff) %>%
  group_by(portfolio, date) |>
  unique()
#2) ken dat verschil naar rato toe aan de sectoren (pf_rt's)
tabellen_pfs_bm_sector_wgts_returns_eur_adj <-
  tabellen_pfs_bm_sector_wgts_returns_eur %>%
  left_join(vp_vf_vd_pf_returns_vs_wtd_sector_returns_diff, by = c("date", "portfolio")) %>%
  group_by(date, portfolio) %>%
  #aanpassing van b/u zo dat het aansluit bij t/d
  mutate(pf_rt_wtd = pf_rt * pf_wt,
         diff_wtd = pf_wt * diff,
         pf_rt_wtd_adj = pf_rt_wtd - diff_wtd,
         #lege sectorgewichten geven Nan's, deze vervangen door 0
         pf_rt_adj =  ifelse(is.infinite(pf_rt_wtd_adj/pf_wt) | pf_rt_wtd_adj == 0, 0, pf_rt_wtd_adj/pf_wt)) %>% #aanpassing voor vd 
  #daar gaat ie - aanpassing zo dat bottum up optelt tot top down
  #uitgangspunt is top down is ok en verandert niet, en gewichten veranderen ook niet
  select(-pf_rt) %>%
  rename(pf_rt = pf_rt_adj) %>%
  arrange(portfolio, date, sector)
  # #om te kijken welke verschillen er overblijven:
  diff_rest <-
   tabellen_pfs_bm_sector_wgts_returns_eur_adj %>%
   reframe(pf_rt2 = weighted.mean(pf_rt, pf_wt)) %>%
   left_join(pf_bm_returns_weights_kolommen_RDRM_Dietz_tabel, by = c("date", "portfolio")) %>%
   mutate(diff_rest = pf_rt2 - pf_rt_RD) %>%
   select(date, portfolio, pf_rt_RD, diff_rest) |>
   group_by(date, portfolio)

```

```{r attr_tabel_sector_bs_Ae_Se}
#semi-notional returns sectorbasis op RD-portefeuille niveau, per MAAND
attr_tabel_sector_bs_Ae_Se <- function(portfolio = "VP100", end_date = snapshot_date) {
    #tabellen_pfs_bm_sector_wgts_returns_eur %>% #met pf_rt's
    start_date <- case_when(!!portfolio == "VD50" ~ start_date_vd, 
                            !!portfolio == "VP50" ~ start_date_vp_vf, 
                            !!portfolio == "VP100" ~ start_date_vp_vf)
    
    tabellen_pfs_bm_sector_wgts_returns_eur_adj %>% #met pf_rt's die wegen tot pf_rt_RD
    filter(portfolio == !!portfolio, date > start_date) %>%
    mutate(bs = pf_wt * bm_rt) %>% # wi * Bi
    group_by(date) %>%
    summarise(Bs = sum(bs)) %>% #per maand een Bs ("semi-notional fund")
    #hoofdletter voor portfolio level)
    left_join(attr_tabel_RDRM_simple(portfolio, start_date, end_date) %>% select(date, pf_rt_RD, BM_rt_RD), by = "date") %>%
    mutate(All_ff = (1 + Bs)/(1 + BM_rt_RD) -1) %>%
    #naast pf_rt_RD zetten voor overall calc Sel_ff
    #nu Sel_ff berekenen, pf erbij voor map
    mutate(portfolio = portfolio,
           Sel_ff = (1 + pf_rt_RD)/(1 + Bs) - 1,
           er = (1 + pf_rt_RD)/(1 + BM_rt_RD) - 1)
}
```

```{r attr_tabellen_sector_bs_Ae_Se}

#tabel voor alle maanden en pf's, Bs, BM_rt_RD, All_ff, pf_rt_RD, Sel_ff, er
attr_tabellen_pfs_sector_Bs_Ae_Se <-
  map_dfr(portfolio_levels_vlieger, attr_tabel_sector_bs_Ae_Se) %>% select(date, portfolio, everything())

#tabel voor alle maanden en sectoren pf's, Bs, BM_rt_RD, All_ff, pf_rt_RD, Sel_ff, er
attr_tabellen_pfs_bm_sector_wgts_returns_bs_Ae_Se <-
  tabellen_pfs_bm_sector_wgts_returns_eur_adj %>%
  left_join(attr_tabellen_pfs_sector_Bs_Ae_Se, by = c("date", "portfolio")) %>%
  group_by(date, sector) %>%
  mutate(sel_ff = ifelse(pf_wt == 0, 0, pf_wt * ((1+pf_rt)/(1+bm_rt)-1)*((1+bm_rt)/(1+Bs))), #voor vd extra ifelse
         all_ff = (pf_wt - bm_wt) * ((1+bm_rt)/(1+BM_rt_RD) -1),
         wtd_pf_rt = pf_wt * pf_rt,
         wtd_bm_rt = bm_wt * bm_rt,
         sector = factor(sector, levels = sector_levels))

#rt en ff per maand per pf
rt_en_ff_per_maand_per_pf <-
  attr_tabellen_pfs_bm_sector_wgts_returns_bs_Ae_Se %>%
  group_by(portfolio, date) %>%
  reframe(all_ff = sum(all_ff), sel_ff = sum(sel_ff), pf_rt = sum(wtd_pf_rt), bm_rt = sum(wtd_bm_rt)) |>
  group_by(portfolio)

#cum ff per sector per pf van tot
ff_cum_per_sector_van_tot <- function(portfolio = "VP100", start_date = start_date_vp_vf, end_date = lastdate) {
  
  tabel <-
    attr_tabellen_pfs_bm_sector_wgts_returns_bs_Ae_Se %>%
      filter(portfolio == !!portfolio, date > start_date, date <= end_date) %>%
      group_by(sector) %>%
      reframe(date = date,
              sector = sector,
              pf_av_wt = cummean(pf_wt),
              bm_av_wt = cummean(bm_wt),
              av_ou_wt = pf_av_wt - bm_av_wt,
              pf_rt = cumprod(pf_rt + 1) - 1, #voor de show
              bm_rt = cumprod(bm_rt + 1) - 1, #voor de show
              all_ff = cumsum(all_ff),
              sel_ff = cumsum(sel_ff)) %>%
      filter(date == end_date) %>%
      select(-date)

    pf_en_bm_rt <-
      attr_tabellen_pfs_sector_Bs_Ae_Se %>%
      filter(portfolio == !!portfolio, date > start_date, date <= end_date) %>%
      reframe(pf_rt_RD = cumprod(pf_rt_RD + 1) - 1,
              BM_rt_RD = cumprod(BM_rt_RD + 1) - 1) %>%
              tail(1)

    wts_en_ff <-
      tabel %>%
      ungroup() %>%
      reframe(sector = "",
              pf_av_wt = sum(pf_av_wt),
              bm_av_wt = sum(bm_av_wt),
              av_ou_wt = sum(av_ou_wt),
              all_ff = sum(all_ff),
              sel_ff = sum(sel_ff))

    summary <- bind_cols(pf_en_bm_rt, wts_en_ff) %>%
      select(sector, pf_av_wt, bm_av_wt, av_ou_wt, pf_rt_RD, BM_rt_RD, all_ff, sel_ff ) %>%
      rename(pf_rt = pf_rt_RD, bm_rt = BM_rt_RD)

    bind_rows(tabel, summary)
}
```

```{r attr_tabel_sector_summary_nice}
attr_tabel_sector_summary_nice <- function(portfolio = "VP100", start_date = start_date_attr, end_date = lastdate) {
   attributie_tabel_nice <- 
    ff_cum_per_sector_van_tot(portfolio, start_date, end_date) %>%
    mutate_at(vars(-sector), ~ (.*100)) |> 
  gt() |> 
  fmt_number(decimals = 1, columns = everything()) |> 
  tab_spanner(columns = 2:4, label = "startgewicht", id = "wt") |>  
  tab_spanner(columns = 5:6, label = "return") |> 
  tab_spanner(columns = 7:8, label = "attributie") |> 
  tab_style(locations = cells_body(columns = c(4, 7, 8)), 
            style = list(cell_text(weight = "bold"))) |> 
  gt_add_dividers_right(columns = c(1, 4, 6)) |> 
  gt_cols_label_attr() |>
  gt_data_colors(columns = c(4, 7, 8)) |> 
  gt_delete_first_col_label() |> 
  gt_cols_align() |> 
  gt_first_col_bold() |> 
  sub_zero(zero_text = " ") |> 
  opt_row_striping() |> 
  gt_font_padding_align() |> 
  gt_last_row_bold() |> 
  tab_header(str_c("Attributie sectoren, van ", format(as.Date(start_date), "%d-%b-%Y"), " t/m ", format(as.Date(end_date), "%d-%b-%Y"), ", ", portfolio)) |> 
  tab_options(table.width = 850)
   
  if(difftime(end_date, start_date) |> as.integer() > 31) {
    attributie_tabel_nice <- 
      attributie_tabel_nice |> 
      tab_footnote("De attributie is cumulatief op maandbasis en maakt gebruik van maandelijkse startgewichten. De in deze tabel vermelde gewichten zijn gemiddeld over de hele periode.",
          locations = cells_column_spanners(spanners = "wt"))}

     if(end_date > start_date) {
       attributie_tabel_nice
      } else {
        tribble(~x, str_c("geen maandgevens na ", format(end_date, "%d-%b"))) |> rename(" " = x) |> gt()   
      }
}
```

## Performance attributie RD-gedeelte - VP100, VP50 en VD50

```{r hulpfuncties_per_op_ind_aandelen}

MSDEWIN_trr <-
  all_returns_eur_long %>%
  filter(ticker == "MSDEWIN") %>%
  rename(MSDEWIN_trr = monthly.returns) %>%
  ungroup() |>
  select(-ticker)

# default kleuren functie van stackoverflow geplukt 
ggplotColours <- function(n = 6, h = c(0, 360) + 15) {
  if ((diff(h) %% 360) < 1) h[2] <- h[2] - 360/n
  hcl(h = (seq(h[1], h[2], length = n)), c = 100, l = 65)
}

MSDEWIN_perf <- function(start_date = start_date_attr, end_date = snapshot_date) {
  all_prices_eur_long %>%
    filter(ticker == "MSDEWIN", date == start_date | date == end_date) %>%
    mutate(return = price_eur/lag(price_eur)-1) %>%
    ungroup() %>%
    select(return) %>%
    tail(1) %>%
    as.double()
}

MSDEWIN_streep <- function(aantal_bars, start_date = start_date_attr, end_date = snapshot_date) {
  # Return a data frame for geom_segment, only for the first facet (name = "trr")
  data.frame(
    name = factor("trr", levels = c("trr", "wtd_op")),
    x = 0.55,
    xend = aantal_bars + 1 - 0.55,
    y = MSDEWIN_perf(start_date, end_date),
    yend = MSDEWIN_perf(start_date, end_date)
  )
}

# default kleuren voor 11 levels: ggplotColours(n = 11)
# tabel van maken default kleuren voor 11 levels
sectors_colors <- 
  sector_levels_RD |> 
  as_tibble() |> 
  rename(ticker = value) |> 
  mutate(fill = ggplotColours(n = 11))
```

### Performance individuele aandelen VP100 en bijdrage aan performance RD

```{r gewicht_tickers_in_bm_historie__chunk_uit_attr_vp100}
#| column: page
#| warning: false

#mee
mag7_tickers <- rev(c("AMZN_UW","TSLA_UW", "AAPL_UW", "NVDA_UW",  "MSFT_UW", "GOOGL_UW", "META_UW"))
mag7_fills <- c("#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")

mag7_tickers_fills <-
   tibble(ticker = mag7_tickers, fill = mag7_fills) |> 
   mutate(ticker = factor(ticker, levels = mag7_tickers))

small_cap_tickers <- c("NTSCLBE_NA", "IJR_US")
andere_etfs <- c("IJPA_NA", small_cap_tickers, "VFEM_NA")

single_stocks_tickers <- 
  holdings |> 
  filter(str_detect(type, "Stock"),
         !ticker %in% c("RDSA_NA", "DSM_NA")) |> 
  pull(ticker)

single_stocks_tickers_ex_mag7 <- 
  single_stocks_tickers[-which(single_stocks_tickers %in% mag7_tickers)]

tickers_fills <- 
  holdings |> 
  left_join(sectors_colors, by = c("sector" = "ticker")) |> 
  filter(ticker %in% c(single_stocks_tickers, andere_etfs)) |> 
  left_join(mag7_tickers_fills |> rename(fil = fill), by = "ticker") |> 
  mutate(fill = ifelse(is.na(fil), fill, fil),
         fill = case_when(
           ticker == "IJPA_NA" ~ "white",
           ticker %in% small_cap_tickers ~ "brown",
           ticker == "VFEM_NA" ~ "red",
           TRUE ~ fill
         )) |>
      #VFEM_NA 
  mutate(fill = ifelse(is.na(fill), "gray", fill)) |>
  add_row(ticker = "MSDEWIN", fill = "gray", sector = "None") |>
  add_row(ticker = "Totaal", fill = usred, sector = "None") |>
  add_row(ticker = "Overige", fill = "gray", sector = "None") |>
  add_row(ticker = "Mag7", fill = "orange", sector = "None") |>
  add_row(ticker = "Andere aandelen", fill = ba_color, sector = "None") |>
  add_row(ticker = "Andere ETFs", fill = etforange, sector = "None") |> 
  
  select(ticker, sector, fill) |> 
  ungroup() |>
  mutate(sector = factor(sector, levels = sector_levels)) |> 
  arrange(sector, ticker)

ticker_levels <- tickers_fills$ticker
#mee

#mee
koersen_snapshot_date <-daily_bdh_fields_mtd |> 
  filter(date == snapshot_date, field == "PX_LAST")

#mee
wisselkoersen_snapshot_date <- 
  daily_bdh_fields_mtd |> 
  filter(str_starts(ticker, "EUR"), date == snapshot_date) |> 
  mutate(ticker = str_remove(ticker, "_USD"),
         ticker = str_sub(ticker, 4, 6)) |> 
  rename(CRNCY = ticker) |> 
  select(CRNCY, wisselkoers = value) |> 
  add_row(CRNCY = "EUR", wisselkoers = 1)

#mee
market_caps_eur_snapshot_date <-
  market_caps |> 
  left_join(currencies, by = c("ticker")) |> 
  left_join(koersen_snapshot_date, by = c("ticker")) |> 
  left_join(wisselkoersen_snapshot_date, by = "CRNCY") |> 
  mutate(market_cap_eur = market_caps / wisselkoers) |> 
  select(date, ticker, market_cap_eur) |>
  filter(!is.na(market_cap_eur))

#mee
ticker_market_cap_snapshot_date <- function(ticker) {
  market_caps_eur_snapshot_date |> 
  filter(ticker == !!ticker, date == snapshot_date) |> 
  pull(market_cap_eur)
}

#mee
wt_sector_in_MSDEWIN_snapshot_date <- function(sector) {
  ticker_sector_weights_hist |> 
  filter(ticker == "IWDA_NA", sector == !!sector, date == snapshot_date) |> 
  pull(weight)
}

#mee
japan_wgt_snapshot_date <- 
  etf_country_weights |> 
  filter(country == "Japan") |> 
  pull(IWDA_NA)

#mee
wt_tickers_in_ETF_snapshot_date <- function(ETF = "WTCH_NA") {
   #twee gevallen: wereld(IWDA_NA) en sector (slechts twee: XDWH_GY en WTCH_NA)
  if(ETF == "IWDA_NA") {
    market_caps_eur_snapshot_date |> 
      #geen market cap van NTSCLBE_NA 
      add_row(date = snapshot_date, ticker = "NTSCLBE_NA", market_cap_eur = 0) |> #heeft toch geen gewicht in bm
      #
    left_join(holdings, by = "ticker") |> filter(ticker %in% c(single_stocks_tickers, andere_etfs)) |> 
    mutate(wt_tickers_in_ETF_snapshot_date = market_cap_eur/ticker_market_cap_snapshot_date("MSDEWIN"),
           wt_tickers_in_ETF_snapshot_date = ifelse(is.na(wt_tickers_in_ETF_snapshot_date), 0, wt_tickers_in_ETF_snapshot_date),
           wt_tickers_in_ETF_snapshot_date = ifelse(ticker == "IJPA_NA", japan_wgt_snapshot_date, wt_tickers_in_ETF_snapshot_date),
           wt_tickers_in_ETF_snapshot_date = ifelse(ticker %in% c("NTSCLBE_NA", "IJR_US", "VFEM_NA"), 0, wt_tickers_in_ETF_snapshot_date))
  } else {
   sector <- 
     holdings |> filter(ticker == ETF) |> pull(sector)
   #mkt cap opzoeken
   market_caps_eur_snapshot_date |> 
   left_join(holdings, by = "ticker") |>
   #ind aandelen mkt caps
   filter(ticker %in% c(single_stocks_tickers, andere_etfs)) |>
   #gewicht uitrekenen op basis van market cap
   mutate(wt_tickers_in_ETF_snapshot_date = 
            ifelse(sector == !!sector, 
                   market_cap_eur/(ticker_market_cap_snapshot_date("MSDEWIN") * wt_sector_in_MSDEWIN_snapshot_date(sector = !!sector)), 0))
  }
}

#mee
IWDA_NA_trr <- MSDEWIN_trr |> rename(IWDA_NA_trr = MSDEWIN_trr)
WTCH_NA_trr <- all_trr_eur_long |> filter(ticker == "WTCH_NA") |> ungroup() |>  select(date, WTCH_NA_trr = trr)
XDWH_GY_trr <- all_trr_eur_long |> filter(ticker == "XDWH_GY") |> ungroup() |>  select(date, XDWH_GY_trr = trr)
IJPA_NA_trr <- all_trr_eur_long |> filter(ticker == "IJPA_NA") |> ungroup() |>  select(date, IJPA_NA_trr = trr)
NTSCLBE_NA_trr <- all_trr_eur_long |> filter(ticker == "NTSCLBE_NA") |> ungroup() |>  select(date, NTSCLBE_NA_trr = trr)
IJR_US_trr <- all_trr_eur_long |> filter(ticker == "IJR_US") |> ungroup() |>  select(date, IJR_US_trr = trr)
VFEM_NA_trr <- all_trr_eur_long |> filter(ticker == "VFEM_NA") |> ungroup() |>  select(date, VFEM_NA_trr = trr)

#mee
wt_hist_tickers_in_ETF <- function(ETF = "IWDA_NA") {
  all_trr_eur_long |> 
  left_join(get(str_c(ETF, "_trr")), by = "date") |> 
  #left_join(get(str_c("wt_hist_tickers_in_", ETF, "_snapshot_date")), by = c("date", "ticker")) |> 
  left_join(wt_tickers_in_ETF_snapshot_date(ETF = ETF), by = c("date", "ticker")) |> 
  filter(ticker %in% c(single_stocks_tickers, andere_etfs)) |> 
  arrange(desc(date)) |> 
  group_by(ticker) |> 
  # fill(!!sym(str_c("wt_hist_tickers_in_", ETF, "_snapshot_date")), .direction = "down") |>
   fill(wt_tickers_in_ETF_snapshot_date, .direction = "down") |>
     mutate(adjustment = (1 + trr) / (1 + !!sym(str_c(ETF, "_trr"))),
            cum_adjustment = cumprod(adjustment),
            wt_hist_tickers_in_ETF = ifelse(date == snapshot_date, wt_tickers_in_ETF_snapshot_date,
                            wt_tickers_in_ETF_snapshot_date/cum_adjustment),
            ETF = !!ETF) |> 
    select(date, ETF, ticker, wt_hist_tickers_in_ETF)
}

#mee
wt_hist_ETF_in_portfolio <- function(portfolio = "VP100", ETF = "SPY5_GY") {
  dates |> 
  mutate(!!sym(ETF) := 0, portfolio = !!portfolio) |> 
  left_join(portfolios_tabel, by = c("date", "portfolio")) |> 
   mutate(!!sym(ETF) := ifelse(ticker == !!ETF, weight, 0)) |> 
   select(date, portfolio, !!sym(ETF)) |>
   group_by(date) |>
   arrange(desc(!!sym(ETF))) |>
   slice(1) 
}

#mee
wt_hist_tickers_from_naam <- function(portfolio = "VP100") {
  #namen in portefeuille en gewicht
  portfolios_tabel |> filter(portfolio == !!portfolio) |> 
    filter(ticker %in% c(single_stocks_tickers, andere_etfs)) |> 
    mutate(from = "naam") |> 
    select(date, portfolio, ticker, weight, from)
}

#mee
wt_hist_tickers_from_ETF <- function(portfolio = "VP100", ETF = "WTCH_NA") {
  wt_hist_tickers_in_ETF(ETF = ETF) |> 
    left_join(wt_hist_ETF_in_portfolio(portfolio = portfolio, ETF = ETF), by = c("date")) |> 
    mutate(weight = wt_hist_tickers_in_ETF * !!sym(ETF), from = ETF) |> 
    select(date, portfolio, ticker, weight, from)
} 

#mee
wt_hist_tickers_in_RD_portfolio <- function(portfolio = "VP100") {
    pf_wt_RD_tabel <- 
    attr_tabellen_RDRM_simple |> 
    filter(portfolio == !!portfolio) |> 
    select(date, portfolio, pf_wt_RD) |> 
    #eerste datum is NA - oplossing is neem volgende datum
    mutate(pf_wt_RD_temp = lead(pf_wt_RD),
           pf_wt_RD = ifelse(is.na(pf_wt_RD), pf_wt_RD_temp, pf_wt_RD)) |> 
    select(-pf_wt_RD_temp)
    
    #gewicht van tickers in portefeuille via de naam zelf
    wt_hist_tickers_from_naam(portfolio = portfolio) |> 
    #gewicht van tickers in portefeuille via de ETF's
    bind_rows(wt_hist_tickers_from_ETF(portfolio = portfolio, ETF = "WTCH_NA")) |> 
    bind_rows(wt_hist_tickers_from_ETF(portfolio = portfolio, ETF = "XDWH_GY")) |> 
    #pf_wt_RD ernaast
    left_join(pf_wt_RD_tabel, by = c("date", "portfolio")) |> 
    #gewicht in RD berekenen
    mutate(wt_in_RD = weight/pf_wt_RD,
           wt_in_RD = ifelse(is.na(wt_in_RD), 0, wt_in_RD)) |>
    select(date, portfolio, ticker, from, wt_in_RD)
}

#mee
wt_hist_tickers_in_bm <- 
  wt_hist_tickers_in_ETF(ETF = "IWDA_NA") |> 
  rename(wt_in_bm = wt_hist_tickers_in_ETF) |> 
  #kolom ETF is verwarrend
  select(-ETF)

#mee
sel_ff_tabel_ind_aandelen <- function(portfolio = "VP100") {
  #tabel met sel_ff in RD per periode per ticker voor portfolio
  #ex_WTCH en XDWH, IJPA wel en Small Cap ETF's
  wt_hist_tickers_in_RD_portfolio(portfolio = portfolio) |> 
  group_by(date, ticker, portfolio) |> 
  #gewicht ETF en naam bij elkaar optellen
  reframe(wt_in_RD = sum(wt_in_RD, na.rm = TRUE)) |> 
  group_by(ticker) |> 
  #gewicht in bm ernaast, ETF kolom eruit, is verwarrend
  left_join(wt_hist_tickers_in_bm, by = c("ticker", "date")) |> 
  #ou gewicht
  mutate(OU = wt_in_RD - wt_in_bm) |> 
  #trr's tickers en bm en ernaast
  left_join(all_trr_eur_long, by = c("date", "ticker")) |> 
  left_join(MSDEWIN_trr, by = c("date")) |> 
  filter(date >= start_date_vp_vf) |> 
  #sel-ff berekenen per ticker per periode
  mutate(sel_ff = ifelse(date == start_date_vp_vf, 0, 
                         lag(OU) * ((1+trr)/(1+MSDEWIN_trr) - 1))) |> 
  select(date, portfolio, ticker, wt_in_RD, wt_in_bm, OU, trr, MSDEWIN_trr, sel_ff)
}

#mee
sel_ff_RD_tabel_ind_aandelen_vps <- map_dfr(c("VP100", "VP50", "VD50"), sel_ff_tabel_ind_aandelen)

#mee
sel_ff_tabel_tickers_selectie_start_end <- function(portfolio = "VP100", start_date = last_ultimo_year, end_date = snapshot_date) { #}, tickers = c(single_stocks_tickers, andere_etfs)) {
  #totaal sel_ff in RD
  # sel_ff_total_cum_portfolio_start_end <- 
  #   attr_tabellen_pfs_sector_Bs_Ae_Se |> 
  #   filter(portfolio == !!portfolio, date > start_date, date <= end_date) |>
  #   summarise(sel_ff = sum(er)) |>
  #   mutate(ticker = "Totaal", sel_ff = sel_ff, portfolio = portfolio, start_date = start_date, end_date = end_date) |> select(ticker, sel_ff, portfolio, start_date, end_date)
  #tabel met sel_ff in RD per ticker
  sel_ff_tabel_ind_aandelen_portfolio_start_end <-
    sel_ff_RD_tabel_ind_aandelen_vps |> 
    filter(portfolio == !!portfolio) |> 
    filter(date > start_date, date <= end_date,
           ticker %in% c(single_stocks_tickers, andere_etfs)) |> 
    group_by(ticker) |> 
    summarise(sel_ff = sum(sel_ff, na.rm = TRUE)) |> 
    mutate(portfolio = portfolio, start_date = start_date, end_date = end_date) |> 
    ungroup()
  #totaal sel_ff in RD van tickers
  # sel_ff_total_cum_tickers_start_end <- 
  #   sel_ff_tabel_ind_aandelen_portfolio_start_end |> 
  #   summarise(ticker = "SubTotaal", sel_ff = sum(sel_ff, na.rm = TRUE)) |> 
  #   mutate(portfolio = portfolio, start_date = start_date, end_date = end_date) |> 
  #   ungroup()
  
  bind_rows(sel_ff_tabel_ind_aandelen_portfolio_start_end)#, sel_ff_total_cum_tickers_start_end) #|> #, sel_ff_total_cum_portfolio_start_end) |> 
    # pivot_wider(names_from = ticker, values_from = sel_ff) |> 
    # mutate(Overige = Totaal - SubTotaal) |> 
    # pivot_longer(names_to = "ticker", cols = -c(portfolio, start_date, end_date)) |> 
    # select(ticker, sel_ff = value, portfolio, start_date, end_date) 
}

#mee
tickers_trr_periode <- function(start_date = last_ultimo_year, end_date = snapshot_date) {
  all_trr_eur_long %>%
  filter(date > start_date & date <= end_date) %>%
  mutate(start_date = start_date, end_date = end_date, trr_periode = cumprod(1 + trr) - 1) %>%
  filter(date == end_date) %>%
  select(-trr, -date) |> 
  rename(trr = trr_periode)
}

#mee
attr_tabel_individuele_tickers_sel_ff <- function(portfolio = "VP100", start_date = last_ultimo_year, end_date = snapshot_date) {
  tabel_ind_aandelen <-
    sel_ff_tabel_tickers_selectie_start_end(portfolio = portfolio, start_date = start_date, end_date = end_date) |> 
    #gewicht in portfolio begin en eind
    left_join(sel_ff_RD_tabel_ind_aandelen_vps |> filter(portfolio == !!portfolio, date == start_date) |> select(date, portfolio, ticker, start_weight = wt_in_RD), by = c("start_date" = "date", "ticker", "portfolio")) |> 
    left_join(sel_ff_RD_tabel_ind_aandelen_vps |> filter(portfolio == !!portfolio, date == end_date) |> select(date, portfolio, ticker, end_weight = wt_in_RD), by = c("end_date" = "date", "ticker", "portfolio")) |> 
    left_join(wt_hist_tickers_in_bm |> rename(wt_bm_start = wt_in_bm), by = c("start_date" = "date", "ticker")) |>
    left_join(wt_hist_tickers_in_bm |> rename(wt_bm_end = wt_in_bm), by = c("end_date" = "date", "ticker")) |>
    #criteria
    filter(end_weight > 0.005 | start_weight > 0.005 | sel_ff > 0.005 | sel_ff < -0.005 | wt_bm_start > 0.01) |> 
    mutate(across(.cols = everything(), ~replace(., is.na(.), 0))) |> 
    mutate(OU_start = start_weight - wt_bm_start, OU_end = end_weight - wt_bm_end)|> 
    select(ticker, sel_ff, start_weight, end_weight, wt_bm_start, wt_bm_end, OU_start, OU_end)
  
  regel_subtotaal_tabel_ind_aandelen <-
    tabel_ind_aandelen |> 
    summarise(ticker = "SubTotaal",
              start_weight = sum(start_weight),
              wt_bm_start = sum(wt_bm_start),
              OU_start = sum(OU_start),
              end_weight = sum(end_weight),
              wt_bm_end = sum(wt_bm_end),
              OU_end = sum(OU_end),
              sel_ff = sum(sel_ff)) |> 
    mutate(portfolio = portfolio, start_date = start_date, end_date = end_date) |> 
    select(ticker, sel_ff, start_weight, end_weight, wt_bm_start, wt_bm_end, OU_start, OU_end)
  
  regel_totaal <-
    tibble(ticker = "Totaal",
           sel_ff = attr_tabellen_RDRM_simple |> 
             filter(portfolio == !!portfolio, date > start_date, date <= end_date) |>
             summarise(sel_ff_RD = sum(sel_ff_RD)) |> pull(sel_ff_RD),
           start_weight = 1,
           wt_bm_start = 1,
           OU_start = 0,
           end_weight = 1,
           wt_bm_end = 1,
           OU_end = 0) |> 
    select(ticker, sel_ff, start_weight, end_weight, wt_bm_start, wt_bm_end, OU_start, OU_end)
 
    regel_overige <-
      regel_totaal |> 
      bind_rows(regel_subtotaal_tabel_ind_aandelen) |>
      summarise(ticker = "Overige",
                sel_ff = sel_ff[1] - sel_ff[2],
                start_weight = 1 - start_weight[2],
                wt_bm_start = 1 - wt_bm_start[2],
                OU_start = -OU_start[2],
                end_weight = 1 - end_weight[2],
                wt_bm_end = 1 - wt_bm_end[2],
                OU_end = -OU_end[2]) |>
    select(ticker, sel_ff, start_weight, end_weight, wt_bm_start, wt_bm_end, OU_start, OU_end)
  
  bind_rows(tabel_ind_aandelen, regel_subtotaal_tabel_ind_aandelen, regel_overige, regel_totaal) |> 
  left_join(tickers_trr_periode(start_date = start_date, end_date = end_date) |> select(-start_date, -end_date), by = c("ticker"))  |>
  left_join(holdings |> select(ticker, sector, name), by = "ticker") |>
  select(sector, ticker, name, start_weight, wt_bm_start, OU_start, end_weight, wt_bm_end, OU_end, trr, sel_ff) |>
  mutate(name = ifelse(is.na(sector), "", name),
         sector = ifelse(is.na(sector), ticker, sector),
         ticker = ifelse(sector %in% c("Totaal", "SubTotaal", "Overige"), "", ticker)) |> 
   mutate(sector = factor(sector, levels = c(sector_levels, "SubTotaal", "Overige", "Totaal"))) |>
   arrange(sector, desc(end_weight)) 
}

attr_tabel_individuele_tickers_sel_ff_nice <- function(portfolio = "VP100", start_date = last_ultimo_year, end_date = snapshot_date) {
  tabel_nice <-
      attr_tabel_individuele_tickers_sel_ff(portfolio = portfolio, start_date = start_date, end_date = end_date) |>
      rename(weight_in_RD = start_weight, weight_in_bm = wt_bm_start, OU = OU_start,
             `weight_in_RD ` = end_weight, `weight_in_bm ` = wt_bm_end, `OU ` = OU_end) |> 
      gt(id = "one") |>
      fmt_percent(columns = c(weight_in_RD, weight_in_bm, `weight_in_RD `, `weight_in_bm `, OU, `OU `, trr, sel_ff), decimals = 2) |>
      tab_spanner(columns = c(weight_in_RD, weight_in_bm, OU), label = format(start_date, "%d-%b-%y")) |>
      tab_spanner(columns = c(`weight_in_RD `, `weight_in_bm `, `OU `), label = format(end_date, "%d-%b-%y")) |>
      tab_spanner(columns = c(trr, sel_ff), label = "Performance") |>
      tab_style(locations = cells_body(columns = c(OU, `OU `, sel_ff)),
                style = list(cell_text(weight = "bold"))) |>
      gt_add_dividers_right(columns = c(3, 6, 9)) |>
      gt_data_colors(columns = c("OU", "OU ", "sel_ff")) |>
      gt_delete_first_col_label() |>
      gt_cols_align() |>
      gt_first_col_bold() |>
      sub_zero(zero_text = " ") |>
      opt_row_striping() |>
      gt_font_padding_align() |>
      gt_last_row_bold() |>
      #gt_container_scroll() |>
      tab_header(str_c("Individuele aandelen en ETF's - performance attributie RD-gedeelte, van ", format(as.Date(start_date), "%d-%b-%Y"), " t/m ", format(as.Date(end_date), "%d-%b-%Y"), ", ", portfolio)) |>
      tab_options(table.width = 1000)

    if(difftime(end_date, start_date) |> as.integer() > 31) {
      tabel_nice <-
        tabel_nice |>
        tab_footnote("De attributie is cumulatief op maandbasis en maakt gebruik van maandelijkse startgewichten. 'Overige' betreft andere aandelen in de sector-ETF's voor de portefeuille en alle andere aandelen die onderdeel uitmaken van de benchmark voor de benchmark")
    } else {
      tabel_nice <-
        tabel_nice |>
        tab_footnote("'Overige' betreft andere aandelen in de sector-ETF's voor de portefeuille en alle andere aandelen die onderdeel uitmaken van de benchmark voor de benchmark")
    }
    tabel_nice
  }
```

::: panel-tabset

#### ytd

```{r barchart_bijdrage_aan_trr_per_regel_vps_ytd}
#| fig-height: 7
#| fig-width: 10
attr_tabel_individuele_tickers_sel_ff_nice(start_date = last_ultimo_year, end_date = snapshot_date)
```

#### qtd

```{r barchart_bijdrage_aan_trr_per_regel_vps_qtd}
#| fig-height: 7
#| fig-width: 10
attr_tabel_individuele_tickers_sel_ff_nice(start_date = last_quarter_end, end_date = snapshot_date)
```

#### mtd

```{r barchart_bijdrage_aan_trr_per_regel_vps_mtd}
#| fig-height: 7
#| fig-width: 10
attr_tabel_individuele_tickers_sel_ff_nice(start_date = lastdate, end_date = snapshot_date)
```

#### lm

```{r barchart_bijdrage_aan_trr_per_regel_vps_lm}
#| fig-height: 7
#| fig-width: 10
attr_tabel_individuele_tickers_sel_ff_nice(start_date = next_to_lastdate, end_date = lastdate)
```

#### lq

```{r barchart_bijdrage_aan_trr_per_regel_vps_lq}
#| fig-height: 7
#| fig-width: 10
attr_tabel_individuele_tickers_sel_ff_nice(start_date = last_quarter_start, end_date = last_quarter_end)
```

#### lq2

```{r barchart_bijdrage_aan_trr_per_regel_vps_lq2}
#| fig-height: 7
#| fig-width: 10

attr_tabel_individuele_tickers_sel_ff_nice(start_date = as.Date("2025-03-31"), end_date = last_quarter_start)
```

#### `r year(last_ultimo_year)`

```{r barchart_bijdrage_aan_trr_per_regel_vps_ly}
#| fig-height: 7
#| fig-width: 10
attr_tabel_individuele_tickers_sel_ff_nice(start_date = next_to_last_ultimo_year, end_date = last_ultimo_year)
```

#### `r year(next_to_last_ultimo_year)`

```{r barchart_bijdrage_aan_trr_per_regel_vps_ly2}
#| fig-height: 7
#| fig-width: 10
attr_tabel_individuele_tickers_sel_ff_nice(start_date = next_to_last_ultimo_year2, end_date = next_to_last_ultimo_year)
```

#### vanaf start VP

```{r barchart_bijdrage_aan_trr_per_regel_vps_vanaf_ly4}
#| fig-height: 7
#| fig-width: 10
attr_tabel_individuele_tickers_sel_ff_nice(start_date = start_date_vp_vf, end_date = snapshot_date)
```

:::

### Performance attributie sectoren RD-gedeelte VP100, VP50 en VD50

::: panel-tabset

#### ytd

```{r perf_attr_vp_ytd}
attr_tabel_sector_summary_nice(portfolio = "VP100", start_date = last_ultimo_year, end_date = snapshot_date)
```

```{r perf_attr_vf_ytd}
attr_tabel_sector_summary_nice(portfolio = "VP50", start_date = last_ultimo_year, end_date = snapshot_date)
```

```{r perf_attr_vd_ytd}
attr_tabel_sector_summary_nice(portfolio = "VD50", start_date = last_ultimo_year, end_date = snapshot_date)
```

#### qtd

```{r perf_attr_vp_qtd}
attr_tabel_sector_summary_nice(portfolio = "VP100", start_date = last_quarter_end, end_date = snapshot_date)
```

```{r perf_attr_vf_qtd}
attr_tabel_sector_summary_nice(portfolio = "VP50", start_date = last_quarter_end, end_date = snapshot_date)
```

```{r perf_attr_vd_qtd}
attr_tabel_sector_summary_nice(portfolio = "VD50", start_date = last_quarter_end, end_date = snapshot_date)
```

#### mtd

```{r perf_attr_vp_mtd}
attr_tabel_sector_summary_nice(portfolio = "VP100", start_date = lastdate, end_date = snapshot_date)
```

```{r perf_attr_vf_mtd}
attr_tabel_sector_summary_nice(portfolio = "VP50", start_date = lastdate, end_date = snapshot_date)
```

```{r perf_attr_vd_mtd}
attr_tabel_sector_summary_nice(portfolio = "VD50", start_date = lastdate, end_date = snapshot_date)
```

#### lm

```{r perf_attr_vp_lm}
attr_tabel_sector_summary_nice(portfolio = "VP100", start_date = next_to_lastdate, end_date = lastdate)
```

```{r perf_attr_vf_lm}
attr_tabel_sector_summary_nice(portfolio = "VP50", start_date = next_to_lastdate, end_date = lastdate)
```

```{r perf_attr_vd_lm}
attr_tabel_sector_summary_nice(portfolio = "VD50", start_date = next_to_lastdate, end_date = lastdate)
```

#### lq

```{r perf_attr_vp_lq}
attr_tabel_sector_summary_nice(portfolio = "VP100", start_date = last_quarter_start, end_date = last_quarter_end)
```

```{r perf_attr_vf_lq}
attr_tabel_sector_summary_nice(portfolio = "VP50", start_date = last_quarter_start, end_date = last_quarter_end)
```

```{r perf_attr_vd_lq}
attr_tabel_sector_summary_nice(portfolio = "VD50", start_date = last_quarter_start, end_date = last_quarter_end)
```

#### `r last_year`

```{r perf_attr_vp_last_ultimo_year}
attr_tabel_sector_summary_nice(portfolio = "VP100", start_date = next_to_last_ultimo_year, end_date = last_ultimo_year)
```

```{r perf_attr_vf_last_ultimo_year}
attr_tabel_sector_summary_nice(portfolio = "VP50", start_date = next_to_last_ultimo_year, end_date = last_ultimo_year)
```

```{r perf_attr_vd_last_ultimo_year}
attr_tabel_sector_summary_nice(portfolio = "VD50", start_date = next_to_last_ultimo_year, end_date = last_ultimo_year)
```

#### `r last_year - 1`

```{r perf_attr_vp_last_ultimo_year2}
attr_tabel_sector_summary_nice(portfolio = "VP100", start_date = next_to_last_ultimo_year2, end_date = next_to_last_ultimo_year)
```

```{r perf_attr_vf_last_ultimo_year2}
attr_tabel_sector_summary_nice(portfolio = "VP50", start_date = next_to_last_ultimo_year2, end_date = next_to_last_ultimo_year)
```

```{r perf_attr_vd_last_ultimo_year2}
attr_tabel_sector_summary_nice(portfolio = "VD50", start_date = next_to_last_ultimo_year2, end_date = next_to_last_ultimo_year)
```

#### vanaf start VD50

```{r perf_attr_vp_hele_historie_vd}
attr_tabel_sector_summary_nice(portfolio = "VP100", start_date = start_date_vd, end_date = snapshot_date)
```

```{r perf_attr_vf_hele_historie_vd}
attr_tabel_sector_summary_nice(portfolio = "VP50", start_date = start_date_vd, end_date = snapshot_date)
```

```{r perf_attr_vd_hele_historie_vd}
attr_tabel_sector_summary_nice(portfolio = "VD50", start_date = start_date_vd, end_date = snapshot_date)
```

#### vanaf start VP

```{r perf_attr_vp_hele_historie}
attr_tabel_sector_summary_nice(portfolio = "VP100", start_date = start_date_vp_vf, end_date = snapshot_date)
```

```{r perf_attr_vf_hele_historie}
attr_tabel_sector_summary_nice(portfolio = "VP50", start_date = start_date_vp_vf, end_date = snapshot_date)
```

:::

### Cumulatieve sectorattributie-effecten (RD-gedeelte)

```{r attr_sector_attr_graphs}

chart_RD_attr_vp_vf <- function(start_date = start_date_vp_vf, end_date = snapshot_date) {
  attr_tabellen_pfs_sector_Bs_Ae_Se %>%
  filter(date >= start_date & date <= end_date) %>%
  group_by(portfolio) |>
  #eerste regel op 0 zetten
  mutate(across(is.numeric, ~ if_else(row_number() == 1, 0, .))) |>
  arrange(date, portfolio) %>%
  mutate(across(is.numeric, ~(cumprod(1 + .x) - 1))) %>%
  select(date, portfolio, All_ff, Sel_ff, er) %>%
  pivot_longer(-c(date, portfolio), names_to = "ff") %>%
  mutate(portfolio = case_when(
                        portfolio == "VP50" ~ "VP50",
                        portfolio == "VD50" ~ "VD50",
                        portfolio == "VP100" ~ "VP100"),
         portfolio = factor(portfolio, levels = c("VP50", "VD50", "VP100")),
         ff = factor(ff, levels = c("er", "All_ff", "Sel_ff"))) %>%
  ggplot(aes(x = date, y = value, col = ff, linewidth = ff)) +
  geom_hline(yintercept = 0, col = "grey60", linetype = "dashed") +
  geom_line(alpha = .8) +
    scale_color_manual(values = c(VP50green, euroblue, usred)) +
    scale_linewidth_manual(values = c(2, 1, 1)) +
    scale_y_continuous(labels = scales::percent_format(accuracy = 0.1)) +
    scale_x_date(date_labels = "%b-%y", breaks = datum_breaks(start_date, end_date)) +
    facet_wrap(~portfolio, ncol = 3) +
    labs(x = "", y = "") +
    ggtitle(str_c("Cumulatieve sectorattributie-effecten (RD-gedeelte), van ", format(as.Date(start_date), "%d-%b-%Y"), " t/m ", format(as.Date(end_date), "%d-%b-%Y"))) +
    theme_bw() +
    theme(legend.position = "bottom",
          legend.title = element_blank(),
          plot.title = element_text(hjust = 0.5))
}
```

::: panel-tabset

#### ytd

```{r chart_RD_attr_vp_vf_ytd_ssd}
#| fig-height: 5

chart_RD_attr_vp_vf(start_date = last_ultimo_year, end_date = snapshot_date)
```

#### mtd

```{r chart_RD_attr_vp_vf_mtd_ssd}
#| fig-height: 5

chart_RD_attr_vp_vf(start_date = lastdate, end_date = snapshot_date)
```

#### qtd

```{r chart_RD_attr_vp_vf_qtd_ssd}
#| fig-height: 5
chart_RD_attr_vp_vf(start_date = last_quarter_end, end_date = snapshot_date)
```

#### lm

```{r chart_RD_attr_vp_vf_lm_ssd}
#| fig-height: 5
chart_RD_attr_vp_vf(start_date = next_to_lastdate, end_date = lastdate)
```

#### lq

```{r chart_RD_attr_vp_vf_lq_ssd}
#| fig-height: 5
chart_RD_attr_vp_vf(start_date = last_quarter_start, end_date = last_quarter_end)
```

#### `r year(last_ultimo_year)`

```{r chart_RD_attr_vp_vf_last_ultimo_year}
#| fig-height: 5

chart_RD_attr_vp_vf(start_date = next_to_last_ultimo_year, end_date = last_ultimo_year)
```

#### `r year(next_to_last_ultimo_year)`

```{r chart_RD_attr_vp_vf_2022}
#| fig-height: 5

chart_RD_attr_vp_vf(start_date = next_to_last_ultimo_year2, end_date = next_to_last_ultimo_year)
```

#### vanaf start VD50

```{r chart_RD_attr_vd_si}
#| fig-height: 5

chart_RD_attr_vp_vf(start_date = start_date_vd, end_date = snapshot_date) +
  theme(axis.text.x = element_text(angle = 90, hjust = 1))
```

#### vanaf start VP

```{r chart_RD_attr_vp_vf_si}
#| fig-height: 5

chart_RD_attr_vp_vf(start_date = start_date_vp_vf, end_date = snapshot_date) +
  theme(axis.text.x = element_text(angle = 90, hjust = 1))
```
:::

### Individuele aandelen in RD-deel VP100, VP50 en VD50

```{r tabel_RD_regels_vp_vf_vd}

trr_ytd_long <-
  all_trr_eur_long %>%
  filter(date > last_ultimo_year & date <= snapshot_date) %>%
  mutate(trr_ytd = cumprod(1 + trr) - 1) %>%
  filter(date == snapshot_date) %>%
  select(-trr)

pf_weights(portfolio = "VP100") %>%
  rename(VP100 = weight) %>%
  full_join(pf_weights(portfolio = "VP50"), by = "ticker") %>%
  rename(VP50 = weight) %>%
  full_join(pf_weights(portfolio = "VD50"), by = "ticker") %>%
  rename(VD50 = weight) |> 
  left_join(holdings, by = "ticker") %>%
  mutate(sector = factor(sector, levels = sector_levels)) %>%
  arrange(sector, ticker) %>%
  select(sector, type, ticker, everything()) %>%
  filter(RDRM == "RD") %>%
  left_join(all_trr_eur_long %>% filter(date == max(date)), by = "ticker") %>%
  rename(mtd = trr) %>%
  left_join(trr_ytd_long, by = "ticker") %>%
  rename(ytd = trr_ytd) %>%
  mutate(across(is.numeric , ~replace_na(.x, 0))) %>%
  mutate_at(portfolio_levels_vlieger, ~./sum(.)) %>%
  group_by(sector) %>%
  mutate(`VP100 ` = VP100/sum(VP100), `VP50 ` = VP50/sum(VP50),  `VD50 ` = VD50/sum(VD50)) %>%
  select(sector, ticker, name, VP100, VP50, VD50, `VP100 `, `VP50 `, `VD50 `, mtd, ytd) %>%
  mutate(across(is.numeric, ~.x*100)) %>%
  ungroup() |> 
  gt(id = "one") |> #id ivm container scroll css
  tab_spanner("wgt in pf", columns = 4:6) |> 
  tab_spanner("wgt in sector", columns = 7:9) |>
  tab_spanner("return", columns = 10:11) |>
  gt_data_colors(columns = 10:11) |> 
  fmt_number(decimals = 1, columns = everything()) |> 
  fmt_number(decimals = 0, columns = 7:9) |> 
  gt_add_dividers_right(columns = c(3, 6, 9)) |> 
  gt_cols_align() |> 
  opt_row_striping() |> 
  gt_font_padding_align() |> 
  gt_delete_first_col_label() |> 
  gt_first_col_bold() |> 
  tab_header(str_c("Individuele aandelen in RD-deel VP100, VP50 en VD50, ", snapshot_date)) |> 
  tab_footnote("Sectorgewichten zijn hier alleen de posities in de individuele aandelen en niet tevens die in de ETF's.") |> 
  gt_container_scroll()
```

### Performance individuele aandelen vs sector

```{r single_stocks_selectie_effect}

all_vp_rd_tickers <-
  portfolios_tabel %>%
  ungroup() %>%
  filter(portfolio %in% portfolio_levels_vlieger, RDRM == "RD") %>%
  select(ticker, sector) %>% 
  unique()

all_vp_trr <-
  all_trr_eur_long %>%
  filter(ticker %in% all_vp_rd_tickers$ticker)

all_sector_trr <-
  MSDEWIN_sector_returns_EUR_hist_adj %>%
  rename(sector_trr = bm_rt) %>%
  select(date, sector, sector_trr)

MSDEWIN_trr <-
  all_returns_eur_long %>%
  filter(ticker == "MSDEWIN") %>%
  rename(MSDEWIN_trr = monthly.returns) %>%
  ungroup() |>
  select(-ticker)

sector_None_trr <-
  MSDEWIN_trr %>%
  mutate(sector = "None") %>%
  rename(sector_trr = MSDEWIN_trr) %>%
  select(date, sector, sector_trr)

all_sector_trr <-
  all_sector_trr %>%
  bind_rows(sector_None_trr)

all_sector_trr_wgt <-
  all_sector_trr %>%
  left_join(
    etf_sector_weights_hist %>% filter(ETF == "IWDA_NA"),
    by = c("date", "sector")) %>%
    rename(sector_weight_bm = weight) %>%
  select(date, sector, sector_trr, sector_weight_bm)

#===

# all_vp_rd_tickers_weights <-
#   portfolios_tabel %>%
#   filter(pf == "VP100", RDRM == "RD") %>%
#   group_by(ticker) %>%
#   mutate(start_wgt = lag(weight)) %>%
#   select(date, ticker, sector, start_wgt)
#
# all_vp_rd_tickers_weights_trr <-
#   all_vp_rd_tickers_weights %>%
#   left_join(all_vp_trr, by = c("date", "ticker"))

# all_vp_rd_tickers_weights_trr_sector_returns <-
#   all_vp_rd_tickers_weights_trr %>%
#     filter(date >= start_date_vp_vf) %>%
#   left_join(all_sector_trr_wgt, by = c("date", "sector")) %>%
#   left_join(MSDEWIN_trr, by = "date") %>%
#   mutate(er_vs_sector = trr - sector_trr,
#          wgt_in_sector = start_wgt/sector_weight_bm,
#          wtd_er_vs_sector = sector_weight_bm* (wgt_in_sector * er_vs_sector),
#          wtd_er_vs_sector = replace_na(wtd_er_vs_sector, 0),
#          sector = factor(sector, levels = sector_levels_RD)) %>%
#   arrange(sector, ticker)

```

```{r single_stocks_selectie_vs_sector_function}

single_stocks_selectie_vs_sector <- function(start_date = last_ultimo_year, end_date = snapshot_date, maanden_tussen_labels = 3) {
#data uit vorige chunk
  data <- 
  all_vp_trr %>%
  left_join(all_vp_rd_tickers, by = "ticker") %>%
  left_join(all_sector_trr_wgt, by = c("date", "sector")) %>%
  left_join(portfolios_tabel %>% filter(portfolio %in% c("VP100")) %>%
              select(date, portfolio, ticker, weight), by = c("date", "ticker")) %>%
  select(-portfolio) %>%
  mutate(sector = ifelse(sector == "None", "vs. MSDEWIN", sector),
         sector = factor(sector, levels = c(sector_levels, "vs. MSDEWIN"))) %>%
  #in_pf of geweest filteren, met 0 gewichten als ticker is verkocht
  filter(date >= start_date, date <= end_date) %>%
  mutate(in_out = ifelse(is.na(lag(weight)) & weight > 0, 1, NA)) %>%
  fill(in_out, .direction = "down") %>%
  filter(in_out == 1) %>%
  mutate(weight = ifelse(is.na(weight), 0, weight),
  #in_out veranderen in out als weight nul is
  #data per ticker begint altijd bij pos holding
         in_out = ifelse(date == min(date), 1, ifelse(lag(weight) > 0, 1, 0)),
  #ook lag weight, want verkocht in een maand is nog wel in pf in die maand
         in_out_int = as.integer(in_out)) %>%
  #trr vs sector
  mutate(trr = ifelse(date == min(date), 0, trr),
         trr_index = cumprod(trr + 1),
         sector_trr = ifelse(date == min(date), 0, sector_trr),
         sector_trr_index = cumprod(sector_trr + 1),
         trr_vs_sector_cum = trr_index - sector_trr_index,
  #voor locatie geom_point
         months_in = ifelse(in_out < 1, 0, cumsum(in_out)),
         in_out = factor(in_out, levels = c(1, 0)),
         lead_in_out = lead(in_out))

ggplot(data = data, aes(x = date, y = trr_vs_sector_cum, group = ticker)) +
  geom_line(aes(col = ticker, alpha = lead_in_out)) +
    scale_alpha_manual(values = c(0.8, 0.3)) +
  geom_hline(yintercept = 0, col = "grey60", linetype = "dashed") +
  geom_point(data = data %>% filter(months_in == max(months_in))) +
  #geom_point(data = data %>% filter(sold == 1), aes(col = ticker), size = 1.5, alpha = .6) +
  geom_text_repel(data = data %>% filter(months_in == max(months_in)),
                   aes(label = ticker, col = ticker), size = 3) +
  theme(legend.position = "none") +
  scale_x_date(limits = c(as.Date(start_date), end_date), breaks = datum_breaks(start_date, end_date), date_labels = "%b-%y") +
  scale_y_continuous(labels = scales::percent_format(accuracy = 1)) +
    facet_wrap(~sector, ncol = 2) +
    theme_bw() +
    theme(legend.position = "none") +
    labs(x = "", y = "") +
  ggtitle(str_c("Performance individuele aandelen vs. sector, van ",
                format(as.Date(start_date), "%d-%b-%Y"), " t/m ", format(as.Date(end_date), "%d-%b-%Y")))
}

```

::: panel-tabset
#### ytd

```{r single_stocks_selectie_effect_ytd}
#| fig-height: 12
single_stocks_selectie_vs_sector(last_ultimo_year, snapshot_date, maanden_tussen_labels = 3)
```

#### mtd

```{r single_stocks_selectie_effect_mtd}
#| fig-height: 12
single_stocks_selectie_vs_sector(lastdate, snapshot_date, maanden_tussen_labels = 1)
```

#### qtd

```{r single_stocks_selectie_effect_qtd}
#| fig-height: 12
single_stocks_selectie_vs_sector(last_quarter_end, snapshot_date, maanden_tussen_labels = 1)
```

#### lm

```{r single_stocks_selectie_effect_lm}
#| fig-height: 12
single_stocks_selectie_vs_sector(next_to_lastdate, lastdate, maanden_tussen_labels = 1)
```

#### lq

```{r single_stocks_selectie_effect_lq}
#| fig-height: 12
single_stocks_selectie_vs_sector(last_quarter_start, last_quarter_end, maanden_tussen_labels = 1)
```

#### `r last_year`

```{r single_stocks_selectie_effect_ly}
#| fig-height: 12
single_stocks_selectie_vs_sector(next_to_last_ultimo_year, last_ultimo_year, maanden_tussen_labels = 3)
```

#### `r last_year - 1`

```{r single_stocks_selectie_effect_ly2}
#| fig-height: 12
single_stocks_selectie_vs_sector(next_to_last_ultimo_year2, next_to_last_ultimo_year, maanden_tussen_labels = 3)
```

#### vanaf start VD50

```{r single_stocks_selectie_effect_si_vd}
#| fig-height: 12
single_stocks_selectie_vs_sector(start_date_vd, snapshot_date, maanden_tussen_labels = 12)
```
#### vanaf start VP

```{r single_stocks_selectie_effect_si_vp_vf}
#| fig-height: 12
single_stocks_selectie_vs_sector(start_date_vp_vf, snapshot_date, maanden_tussen_labels = 12)
```
:::

### Performance ETF's vs MSDEWIN

::: panel-tabset
```{r performance_ETFs_vs_MSDEWIN}

ETFs_RD_tickers <-
  holdings %>% filter(RDRM == "RD", type == "ETF") %>% select(ticker, etf_type)

ETFs_in_portfolios_dates <-
  portfolios_tabel %>% 
  ungroup() %>%
  select(date, ticker) %>%
  filter(ticker %in% ETFs_RD_tickers$ticker) %>%
  unique() %>%
  group_by(ticker) %>%
  filter(date >= min(date)) %>%
  mutate(is_in_pf = 1)

ETFs_vs_MSDEWIN <- function(start_date = start_date_vp_vf, end_date = snapshot_date , maanden_tussen_labels = 3) {
all_trr_eur_long %>%
  filter(ticker %in% ETFs_RD_tickers$ticker, date >= start_date, date <= end_date) %>%
  group_by(ticker) %>%
  left_join(ETFs_in_portfolios_dates, by = c("date", "ticker")) %>%
  left_join(ETFs_RD_tickers, by = "ticker") %>% #soort ETF erbij etf_type
  left_join(MSDEWIN_trr, by = "date") %>%
  left_join(portfolios_tabel %>% filter(portfolio %in% c("RD50")) %>%
              select(date, portfolio, ticker, weight), by = c("date", "ticker")) %>%
    #in_pf of geweest filteren, met 0 gewichten als ticker is verkocht
        filter(date >= start_date, date <= end_date) %>%
        mutate(in_out = ifelse(is.na(lag(weight)) & weight > 0, 1, NA)) %>%
        fill(in_out, .direction = "down") %>%
        filter(in_out == 1) %>%
        mutate(weight = ifelse(is.na(weight), 0, weight),
        #in_out veranderen in out als weight nul is
        #data per ticker begint altijd bij pos holding
               in_out = ifelse(date == min(date), 1, ifelse(lag(weight) > 0, 1, 0))) %>%
        #ook lag weight, want verkocht in een maand is nog wel in pf in die maand
        fill(in_out, .direction = "down") %>%
        mutate(trr = ifelse(date == min(date), 0, trr),
               trr_index = cumprod(trr + 1),
               MSDEWIN_trr = ifelse(date == min(date), 0, MSDEWIN_trr),
               MSDEWIN_trr_index = cumprod(MSDEWIN_trr + 1),
               trr_vs_MSDEWIN_cum = trr_index - MSDEWIN_trr_index,
               #voor locatie geom_point
               months_in = ifelse(in_out < 1, 0, cumsum(in_out)),
               in_out = factor(in_out, levels = c(1, 0)),
               lead_in_out = lead(in_out),
               is_in_pf = replace_na(is_in_pf, 0),
               months_in_pf = cumsum(is_in_pf) * is_in_pf) %>%
        fill(lead_in_out, .direction = "down") %>%
  ggplot(aes(x = date, y = trr_vs_MSDEWIN_cum, col = ticker, alpha = lead_in_out)) +
    geom_line() +
    geom_point(data = . %>% filter(months_in == max(months_in))) +
    geom_text_repel(data = . %>% filter(months_in_pf == max(months_in_pf)),
                     aes(label = ticker, col = ticker), size = 3, arrow = NULL) +
    geom_hline(yintercept = 0, col = "grey60", linetype = "dashed") +
    scale_alpha_manual(values = c(0.8, 0.3)) +
    scale_x_date(limits = c(as.Date(start_date), end_date), breaks = datum_breaks(start_date, end_date), date_labels = "%b-%y") +
    scale_y_continuous(labels = scales::percent_format(accuracy = 1)) +
    facet_wrap(~etf_type, ncol = 2) +
    theme_bw() +
    theme(legend.position = "none") +
    labs(x = "", y = "") +
    ggtitle(str_c("Performance ETF's vs. MSDEWIN, van ",
                  format(as.Date(start_date), "%d-%b-%Y"), " t/m ", format(as.Date(end_date), "%d-%b-%Y")))
}
```

#### ytd

```{r performance_ETFs_vs_MSDEWIN_ytd}

ETFs_vs_MSDEWIN(start_date = last_ultimo_year, end_date = snapshot_date, maanden_tussen_labels = 3)
```

#### mtd

```{r performance_ETFs_vs_MSDEWIN_mtd}

ETFs_vs_MSDEWIN(start_date = lastdate, end_date = snapshot_date, maanden_tussen_labels = 3)
```

#### qtd

```{r performance_ETFs_vs_MSDEWIN_qtd}

ETFs_vs_MSDEWIN(start_date = last_quarter_end, end_date = snapshot_date, maanden_tussen_labels = 3)
```

#### lm

```{r performance_ETFs_vs_MSDEWIN_lm}

ETFs_vs_MSDEWIN(start_date = next_to_lastdate, end_date = lastdate, maanden_tussen_labels = 3)
```

#### lq

```{r performance_ETFs_vs_MSDEWIN_lq}

ETFs_vs_MSDEWIN(start_date = last_quarter_start, end_date = last_quarter_end, maanden_tussen_labels = 3)
```

#### `r last_year`

```{r performance_ETFs_vs_MSDEWIN_ly}

ETFs_vs_MSDEWIN(start_date = next_to_last_ultimo_year, end_date = last_ultimo_year, maanden_tussen_labels = 3)
```

#### `r last_year - 1`

```{r performance_ETFs_vs_MSDEWIN_ly2}

ETFs_vs_MSDEWIN(start_date = next_to_last_ultimo_year2, end_date = next_to_last_ultimo_year, maanden_tussen_labels = 3)
```

#### sinds 2017

```{r performance_ETFs_vs_MSDEWIN_si}

ETFs_vs_MSDEWIN(start_date = start_date_attr, end_date = snapshot_date, maanden_tussen_labels = 12)
```
:::

```{r performance_attr_RM_credits}

spreads_credit_etfs_monthly <-
  #read_rds(str_c(pad_deel1, "blbrg_all_prices_local_long_monthly.rds")) |> 
  monthly_bdh_fields |> 
  filter(ticker %in% c("I05885", "I36658EU", "I32516"), 
         field == "INDEX_OAS_TSY") |> 
  #spreads vs govt voor resp. SUA0, EUNS en EUNR
  mutate(ticker = case_when(ticker == "I32516" ~ "SUA0_GY", 
                            ticker == "I36658EU" ~ "EUNS_GY", 
                            ticker == "I05885" ~ "EUNR_GY")) |> 
  mutate(spread = value/100) |>
  select(-field, -value) 
  #datums zetten op einde maand
  #mutate(date = floor_date(date, unit = "month"), 
   #      date = lubridate::rollback(date + months(1)))

spreads_credit_etfs_snapshot <- 
  #read_rds(str_c(pad_deel1, "blbrg_all_prices_local_long_daily_mtd.rds")) |> 
  daily_bdh_fields_mtd |> 
  filter(ticker %in% c("I05885", "I36658EU", "I32516"), 
         field == "INDEX_OAS_TSY",
         date == snapshot_date) |> 
  #spreads vs govt voor resp. SUA0, EUNS en EUNR
  mutate(ticker = case_when(ticker == "I32516" ~ "SUA0_GY", 
                            ticker == "I36658EU" ~ "EUNS_GY", 
                            ticker == "I05885" ~ "EUNR_GY")) |> 
  mutate(spread = value/100) |>
  select(-field, -value)
  
spreads_credit_etfs <-
  spreads_credit_etfs_monthly |> 
  bind_rows(spreads_credit_etfs_snapshot) |>
  #verandering van spreads erin voor attributie
  group_by(ticker) |>
  mutate(d_spread = spread - lag(spread),
         lag_spread = lag(spread))

credit_etfs_in_pfs <-
  portfolios_tabel |> 
  group_by(portfolio, date) |>
  filter(sector == "Credits") |> 
  select(date, portfolio, ticker)

d_benega_yield_kolom <-
  benega_yield_kolom |> 
  mutate(d_benega_yield = benega_yield - lag(benega_yield))

RM_tickers_lag_mod_dur_hist <-
  RM_tickers_mod_dur_hist |> 
  group_by(ticker) |>
  mutate(mod_dur = dur,
         mod_dur = replace_na(mod_dur, 0),
         lag_mod_dur = ifelse(date == min(date), mod_dur, lag(dur)),
         lag_mod_dur = replace_na(lag_mod_dur, 0))
```

```{r performance_attr_dur_curve_credits_RM}

#spreads ophalen
#RM_tickers_mod_dur_hist beval alle durations per obl en voor ETFS's harde constante cijfers
#EUNR_GY_duration, EUNS_GY_duration en SUA0_GY_duration

#versie met avg wgts
#durations van instrumenten aan begin vd maand
#portefeuillegewichten gemiddelde van vorige maand en deze maand
sel_ffs_RM <-
  portfolios_tabel %>%
  group_by(portfolio, date) %>%
    filter(!portfolio %in% c("VP100", "RD100")) %>%
    left_join(RM_tickers_lag_mod_dur_hist, by = c("date", "ticker")) %>%
    mutate(mod_dur = ifelse(is.na(mod_dur), 0, mod_dur)) |>
    mutate(avg_sprd_dur = ifelse(sector == "Credits", (mod_dur - lag_mod_dur)/2, 0)) |> 
    group_by(portfolio, ticker) |>
    mutate(avg_weight = ifelse(is.na(lag(weight)), weight, (weight + lag(weight)/2))) |> 
    group_by(portfolio, date) |>
    summarize(wtd_pf_dur = weighted.mean(mod_dur, weight),
              avg_wtd_sprd_dur = weighted.mean(avg_sprd_dur, avg_weight), 
              avg_credit_wt = sum(avg_weight[sector == "Credits"])) |> 
    left_join(credit_etfs_in_pfs, by = c("date", "portfolio")) |> 
    left_join(spreads_credit_etfs, by = c("date", "ticker")) |> 
    left_join(benega_mod_dur, by = "date") %>%
    left_join(d_benega_yield_kolom, by = "date") %>%
    left_join(attr_tabellen_RDRM_simple, by = c("date", "portfolio")) %>%
    mutate(wtd_BM_dur = pf_wt_RM * BENEGA_mod_dur,
           sel_ff_RM_dur = -(wtd_pf_dur - wtd_BM_dur) * d_benega_yield,
           sel_ff_RM_credits_carry = avg_credit_wt * lag_spread/12, 
           sel_ff_RM_credits_koers = -d_spread * avg_wtd_sprd_dur, 
           sel_ff_RM_credits = sel_ff_RM_credits_carry + sel_ff_RM_credits_koers,
           sel_ff_RM_curve = sel_ff_RM - sel_ff_RM_dur - sel_ff_RM_credits) |>
  select(date, portfolio, sel_ff_RM, sel_ff_RM_dur, sel_ff_RM_credits, sel_ff_RM_curve)  

sel_ffs_RM <-
  portfolios_tabel %>%
  group_by(portfolio, date) %>%
    filter(!portfolio %in% c("VP100", "RD100")) %>%
    left_join(RM_tickers_lag_mod_dur_hist, by = c("date", "ticker")) %>%
    mutate(mod_dur = ifelse(is.na(mod_dur), 0, mod_dur)) |>
    mutate(lag_sprd_dur = ifelse(sector == "Credits", lag_mod_dur, 0)) |> 
    group_by(portfolio, ticker) |>
    mutate(lag_weight = lag(weight)) |> 
    group_by(portfolio, date) |>
    summarize(wtd_pf_dur = weighted.mean(mod_dur, weight),
              lag_wtd_sprd_dur = weighted.mean(lag_sprd_dur, weight), 
              credit_wt = sum(weight[sector == "Credits"])) |> 
    left_join(credit_etfs_in_pfs, by = c("date", "portfolio")) |> 
    left_join(spreads_credit_etfs, by = c("date", "ticker")) |> 
    left_join(benega_mod_dur, by = "date") %>%
    left_join(d_benega_yield_kolom, by = "date") %>%
    left_join(attr_tabellen_RDRM_simple, by = c("date", "portfolio")) %>%
    mutate(wtd_BM_dur = pf_wt_RM * BENEGA_mod_dur,
           sel_ff_RM_dur = -(wtd_pf_dur - wtd_BM_dur) * d_benega_yield,
           sel_ff_RM_credits_carry = credit_wt * lag_spread/12, 
           sel_ff_RM_credits_koers = -d_spread * lag_wtd_sprd_dur, 
           sel_ff_RM_credits = ifelse(credit_wt == 0, 0, sel_ff_RM_credits_carry + sel_ff_RM_credits_koers),
           sel_ff_RM_curve = sel_ff_RM - sel_ff_RM_dur - sel_ff_RM_credits) |>
  select(date, portfolio, sel_ff_RM, sel_ff_RM_dur, sel_ff_RM_credits, sel_ff_RM_curve)  

cum_sel_ffs_RM_graph <- function(portfolios = portfolio_levels_RDRM, start_date = start_date_attr, end_date = snapshot_date) {
  sel_ffs_RM |> 
    pivot_longer(sel_ff_RM:sel_ff_RM_curve) |> 
    filter(portfolio %in% portfolios,
           date >= max(start_date, min(date)), 
           date <= end_date) |> #voor VP's latere start
    mutate(value = replace_na(value, 0)) |> 
    mutate(value = ifelse(date == min(date), 0, value)) |> 
    group_by(portfolio, name) |> 
    mutate(cum_ff = cumprod(value + 1) - 1,
           portfolio = factor(portfolio, levels = portfolio_levels)) %>% 
    arrange(portfolio) |> 
  ggplot(aes(x = date, y = cum_ff, group = name, col = name, linewidth = name)) +
    geom_hline(yintercept = 0, col = "grey60", linetype = "dashed") +
    geom_line(alpha = .8) +
    scale_color_manual(values = c(VP50green, etforange, usred, euroblue)) +
    scale_linewidth_manual(values = c(2, 1, 1, 1)) +
    scale_y_continuous(labels = scales::percent_format(accuracy = 1)) +
    scale_x_date(breaks = datum_breaks(start_date, end_date), date_labels = "%b-%y") +
  facet_wrap(~portfolio, ncol = 6) +
    labs(x = "", y = "") +
    ggtitle(str_c("Cumulatieve duration, credit en curve attributie-effecten - portefeuille niveau")) +
    theme_bw() +
    theme(legend.position = "bottom",
          legend.title = element_blank(),
          plot.title = element_text(hjust = 0.5))
}
```

## Performance attributie RM-gedeelte

::: panel-tabset
### ytd

```{r performance_attr_dur_curve_ytd_met credit}

cum_sel_ffs_RM_graph(start_date = last_ultimo_year, end_date = snapshot_date) +
  scale_y_continuous(labels = scales::percent_format(accuracy = 0.1)) +
  theme(axis.text.x = element_text(angle = 90, hjust = 1))

```

### mtd

```{r performance_attr_dur_curve_mtd_met credit}

cum_sel_ffs_RM_graph(start_date = lastdate, end_date = snapshot_date) +
  scale_y_continuous(labels = scales::percent_format(accuracy = 0.1)) +
  theme(axis.text.x = element_text(angle = 90, hjust = 1))

```

### qtd

```{r performance_attr_dur_curve_qtd_met credit}

cum_sel_ffs_RM_graph(start_date = last_quarter_end, end_date = snapshot_date) +
  scale_y_continuous(labels = scales::percent_format(accuracy = 0.1)) +
  theme(axis.text.x = element_text(angle = 90, hjust = 1))

```

### lm

```{r performance_attr_dur_curve_lm_met credit}

cum_sel_ffs_RM_graph(start_date = next_to_lastdate, end_date = lastdate) +
  scale_y_continuous(labels = scales::percent_format(accuracy = 0.1)) +
  theme(axis.text.x = element_text(angle = 90, hjust = 1))

```

### lq

```{r performance_attr_dur_curve_lq_met credit}

cum_sel_ffs_RM_graph(start_date = last_quarter_start, end_date = last_quarter_end) +
  scale_y_continuous(labels = scales::percent_format(accuracy = 0.1)) +
  theme(axis.text.x = element_text(angle = 90, hjust = 1))

```

### `r last_year`

```{r performance_attr_dur_curve_ly_met credit}

cum_sel_ffs_RM_graph(start_date = next_to_last_ultimo_year, end_date = last_ultimo_year) +
  scale_y_continuous(labels = scales::percent_format(accuracy = 0.1)) +
  theme(axis.text.x = element_text(angle = 90, hjust = 1))
```

### `r last_year - 1`

```{r performance_attr_dur_curve_ly2_met credit}

cum_sel_ffs_RM_graph(start_date = next_to_last_ultimo_year2, end_date = next_to_last_ultimo_year) +
  scale_y_continuous(labels = scales::percent_format(accuracy = 0.1)) +
  theme(axis.text.x = element_text(angle = 90, hjust = 1))
```

### vanaf start VD50

```{r performance_attr_dur_curve_si_vd_met credit}
cum_sel_ffs_RM_graph(start_date = start_date_vd, end_date = snapshot_date) +
  theme(axis.text.x = element_text(angle = 90, hjust = 1))
```

### vanaf start VP50

```{r performance_attr_dur_curve_si_met_credit_vp}
#
cum_sel_ffs_RM_graph(portfolios = portfolio_levels_RDRM[-which(portfolio_levels_RDRM %in% c("DZ50", "VD50"))], 
                     start_date = start_date_vp_vf, end_date = snapshot_date) +
  theme(axis.text.x = element_text(angle = 90, hjust = 1))
```
### vanaf beschikbaarheid looptijd BENEGA

```{r performance_attr_dur_curve_si_met credit}
#
cum_sel_ffs_RM_graph(portfolios = portfolio_levels[which(portfolio_levels %in% c("RD50", "RD30", "RD70"))] , 
                     start_date = start_date_looptijd_BENEGA, end_date = snapshot_date) +
  theme(axis.text.x = element_text(angle = 90, hjust = 1))
```


### Spreads van credit ETF's

```{r credit_etfs_spreads_graph}

in_portfolio_date_credit_ticker <-  
  portfolios_tabel %>% filter(sector == "Credits", portfolio == "RD50") %>% ungroup() %>% select(date, ticker) %>% mutate(in_pf = "in_pf")

spreads_credit_etfs |> 
  left_join(in_portfolio_date_credit_ticker, by = c("date", "ticker")) |>
  mutate(alpha = ifelse(is.na(in_pf), 0.4, 1)) |> 
  ggplot(aes(x=date, y = spread, group = ticker, alpha = alpha, col = ticker)) +
  scale_alpha_identity() +
  geom_line(linewidth = 1.5) +
  geom_dl(aes(label = ticker, y = spread), alpha = 1, method = list(dl.trans(x = x + .1), cex = 30, "last.polygons")) +
        expand_limits(x = as.Date(max(all_prices_eur_long$date)) + 320) +
  scale_y_continuous(labels = scales::percent_format(accuracy = 0.1)) +
  scale_x_date(breaks = datum_breaks(start_date = start_date_of_long_term_data, end_date = lastdate), date_labels = "%b-%y") +
  charts_custom_theme +
  ggtitle("spread van credit ETF's (INDEX_OAS_TSY)") +
  theme(legend.position = "none")
```
:::

## Performance attributie - bijdrage van posities

```{r cum_bijdrage_bets_in_etf_pfs}
#start_bets
#weight history van een ticker in een portefeuille
weight_hist <- function(ticker, portfolio) {
  portfolios_tabel %>%
    select(date, portfolio, ticker, weight) %>%
    filter(portfolio == !!portfolio, ticker == !!ticker) %>%
    #zorgen dat alle datums meekomen ook die met een nulgewicht
    right_join(all_prices_eur %>% select(date) %>% filter(date >= start_date_attr), by = "date") %>%
    mutate(portfolio = !!portfolio, ticker = !!ticker) %>%
    arrange(date) %>%
    mutate(weight = replace_na(weight, 0))
}

bet_vs_BM <- function(ticker, portfolio, BM) {
  #BM_trr, voor RDbets alleen de RD_BM geb
  BM_trr <-
    all_trr_eur_long %>%
    filter(ticker == BM) %>%
    rename(BM = ticker,
           BM_trr = trr)
  #weight
  weight_hist(portfolio = portfolio, ticker = ticker) %>%
    #trr vh aandeel
    left_join(all_trr_eur_long %>% filter(ticker == ticker), by = c("date", "ticker")) %>%
    #trr vd BM
    left_join(BM_trr, by = "date") %>%
    #bet, bet return en ontwikkeling
    ungroup() %>%
    mutate(bet_rt = ifelse(is.na(trr), 0, lag(weight)*(trr - BM_trr)))
}

SMALL_CAP_bet_vs_BM <- function(portfolio) {
  #twee tickers voor small cap, een vs USA (IJR)
  bet_vs_BM(ticker = "IJR_US", portfolio = portfolio , BM = "SPY5_GY") %>%
    #en een vs MSDEWIN (NTSCLAE)
    left_join(bet_vs_BM(ticker = "NTSCLBE_NA", portfolio = portfolio, BM = "MSDEWIN"), by = c("date", "portfolio")) %>%
    #doorvermenigvuldigd
    mutate(ticker = "Small Caps",
           bet_rt = bet_rt.x + bet_rt.y,
           portfolio = portfolio) %>%
    select(date, portfolio, ticker, bet_rt)
}

#bets voor alle portefeuilles
SMALL_CAP_bets <- map(portfolio_levels_ETFs, SMALL_CAP_bet_vs_BM) %>% bind_rows() %>% select(date, portfolio, ticker, bet_rt)
XDWH_bets <- map(portfolio_levels_ETFs, bet_vs_BM, ticker = "XDWH_GY", BM = "MSDEWIN") %>% bind_rows() %>% select(date, portfolio, ticker, bet_rt)
WTCH_bets <- map(portfolio_levels_ETFs, bet_vs_BM, ticker = "WTCH_NA", BM = "MSDEWIN") %>% bind_rows() %>% select(date, portfolio, ticker, bet_rt)
VFEM_bets <- map(portfolio_levels_ETFs, bet_vs_BM, ticker = "VFEM_NA", BM = "MSDEWIN") %>% bind_rows() %>% select(date, portfolio, ticker, bet_rt)
VIG_bets <- map(portfolio_levels_ETFs, bet_vs_BM, ticker = "VIG_US", BM = "SPY5_GY") %>% bind_rows() %>% select(date, portfolio, ticker, bet_rt)

#regio is ((SPY5 + IJR + VIG) weight * SPY5 return + SXXPIEX weight * SXXPIEX return) - al die weights samen * MSDEWIN return
# daar komen bij SNAF2_NA en SPPY_GY nog bij en LEAD_GY voor Eu
regio_bet_kolommen <- function(portfolio) {
              weight_hist("SPY5_GY", portfolio) %>% rename(SPY5_GY_wt = weight) %>%
    left_join(weight_hist("IJR_US", portfolio), by = c("date", "portfolio")) %>% rename(IJR_US_wt = weight) %>%
    left_join(weight_hist("VIG_US", portfolio), by = c("date", "portfolio")) %>% rename(VIG_US_wt = weight) %>%
    left_join(weight_hist("SNAF2_NA", portfolio), by = c("date", "portfolio")) %>% rename(SNAF2_NA_wt = weight) %>%
    left_join(weight_hist("SPPY_GY", portfolio), by = c("date", "portfolio")) %>% rename(SPPY_GY_wt = weight) %>%
    mutate(US_wt = SPY5_GY_wt + VIG_US_wt + IJR_US_wt + SNAF2_NA_wt + SPPY_GY_wt) %>%
    left_join(weight_hist("SXXPIEX_GY", portfolio), by = c("date", "portfolio")) %>% rename(SXXPIEX_GY_wt = weight) %>%
    left_join(all_trr_eur_long %>% filter(ticker == "SPY5_GY") %>% rename(SPY5_GY_rt = trr), by = "date") %>%
    left_join(all_trr_eur_long %>% filter(ticker == "SXXPIEX_GY") %>% rename(SXXPIEX_GY_rt = trr), by = "date") %>%
    left_join(all_trr_eur_long %>% filter(ticker == "MSDEWIN") %>% rename(MSDEWIN_rt = trr), by = "date") %>%
    mutate(SPY5_GY_rt = replace_na(SPY5_GY_rt, 0),
           SXXPIEX_GY_rt = replace_na(SXXPIEX_GY_rt, 0),
           MSDEWIN_rt = replace_na(MSDEWIN_rt, 0)) %>%
    select(-starts_with("ticker")) %>% ungroup() %>%
    mutate(regio_bet_rt = ifelse(date == start_date_attr, 0,
             (lag(US_wt) * SPY5_GY_rt + lag(SXXPIEX_GY_wt) * SXXPIEX_GY_rt) -
             (lag(US_wt) + lag(SXXPIEX_GY_wt)) * MSDEWIN_rt))
}

regio_bet <- function(portfolio) {
  regio_bet_kolommen(portfolio) %>%
    mutate(ticker = "Regio") %>%
    rename(bet_rt = regio_bet_rt) %>%
    select(date, portfolio, ticker, bet_rt)
}

REGIO_bets <- map(portfolio_levels_ETFs, regio_bet) %>% bind_rows()

RM_bet <- function(portfolio) {
  attr_tabel_RDRM_simple(portfolio) %>%
    mutate(ticker = "RM") %>%
    rename(bet_rt = sel_ff_RM) %>%
    select(date, portfolio, ticker, bet_rt)
}

RM_bets <- map_dfr(portfolio_levels_ETFs, RM_bet)

allocatie_bet <- function(portfolio) {
  attr_tabel_RDRM_simple(portfolio) %>%
    mutate(ticker = "Allocatie") %>%
    rename(bet_rt = all_ff) %>%
    select(date, portfolio, ticker, bet_rt)
}

ALLOCATIE_bets <- map_dfr(portfolio_levels_ETFs, allocatie_bet)

total_bet <- function(portfolio) {
  attr_tabel_RDRM_simple(portfolio) %>%
    mutate(ticker = "Totaal") %>%
    rename(bet_rt = er) %>%
    select(date, portfolio, ticker, bet_rt)
}

TOTAL_bets <- map_dfr(portfolio_levels_ETFs, total_bet)

#alle bets onder ekaar voor chart
all_bets <-
  REGIO_bets %>%
  bind_rows(SMALL_CAP_bets) %>%
  bind_rows(XDWH_bets) %>%
  bind_rows(WTCH_bets) %>%
  bind_rows(VFEM_bets) %>%
  bind_rows(VIG_bets) %>%
  bind_rows(RM_bets) %>%
  bind_rows(ALLOCATIE_bets) %>%
  bind_rows(TOTAL_bets) %>%
  mutate(portfolio = factor(portfolio, levels = c("RD50", "DZ50", "RD30", "RD70", "RD100"))) %>%
  #unexplained berekenen
  pivot_wider(names_from = ticker, values_from = bet_rt) %>%
  mutate(Unexpl = Totaal - rowSums(across(Regio:Allocatie))) %>%
  pivot_longer(names_to= "ticker", values_to = "bet_rt", cols = Regio:Unexpl) %>%
  #factor maken van ticker voor sorteren charts
  mutate(ticker = factor(ticker,
            levels = c("VIG_US", "Small Caps", "VFEM_NA", "WTCH_NA", "XDWH_GY", "Regio", "Allocatie", "RM", "Unexpl", "Totaal"))) %>%
  arrange(portfolio, date, ticker) %>%
  group_by(portfolio, ticker)
```

### Cumulatieve bijdrage van posities

```{r cum_bijdrage_bets_graph}

cum_bijdrage_bets_graph <- function(start_date = start_date_attr, end_date = snapshot_date) {
  all_bets %>%
  group_by(portfolio, ticker) |> 
  filter(date >= start_date, date <= end_date) |> 
  mutate(bet_rt = ifelse(date == start_date, 0, bet_rt),
         bet_rt_cum = cumprod(1 + bet_rt) - 1) |> 
    #geen positie uitfilteren
  filter(!all(bet_rt_cum==0)) |> 
  ggplot(aes(x = date, y = bet_rt_cum, col = ticker)) +
    scale_x_date(breaks = datum_breaks(start_date, end_date), date_labels = "%b-%y") +
    geom_line(aes(linewidth = ticker)) +
    geom_hline(yintercept = 0, colour = "grey60", linetype = "dashed") +
    scale_linewidth_manual(values = c(rep(1, 9), 2)) +
    labs(x = "", y = "",
       title = "Cumulatieve bijdrage van posities - portefeuilleniveau") +
    facet_grid(ticker ~ portfolio) +
    theme_bw() +
    theme(legend.position = "none",
          legend.title = element_blank(),
          axis.text.x = element_text(angle =90, vjust =.5),
          plot.caption = element_text(hjust = 0))
}
```

::: panel-tabset
#### ytd

```{r cum_bijdrage_bets_graph_ytd}
#| fig-height: 9

cum_bijdrage_bets_graph(start_date = last_ultimo_year, end_date = snapshot_date) +
     scale_y_continuous(labels = scales::percent_format(accuracy = 0.1), 
                       breaks = seq(-.04, .04, .005))
 #regio is ((SPY5 + IJR + VIG) weight * SPY5 return + SXXPIEX weight * SXXPIEX return) - al die weights samen * MSDEWIN return
```

#### `r last_year`

```{r cum_bijdrage_bets_graph_ly}
#| fig-height: 9

cum_bijdrage_bets_graph(start_date = next_to_last_ultimo_year, end_date = last_ultimo_year) +
     scale_y_continuous(labels = scales::percent_format(accuracy = 0.1), 
                       breaks = seq(-.04, .04, .005))
```
#### `r last_year - 1`

```{r cum_bijdrage_bets_graph_ly2}
#| fig-height: 9

cum_bijdrage_bets_graph(start_date = next_to_last_ultimo_year2, end_date = next_to_last_ultimo_year) +
     scale_y_continuous(labels = scales::percent_format(accuracy = 0.1), 
                       breaks = seq(-.04, .04, .01))
```

#### sinds 2017

```{r cum_bijdrage_bets_graph_si}
#| fig-height: 9

cum_bijdrage_bets_graph(start_date = start_date_attr, end_date = snapshot_date) +
     scale_y_continuous(labels = scales::percent_format(accuracy = 1), 
                       breaks = seq(-.04, .06, .02))
```
:::

<!-- ### Bijdrage van posities -->

<!-- ```{r all_bets_tabel_nice} -->

<!--  all_bets_cum <- -->
<!--   all_bets %>% -->
<!--   group_by(pf, ticker) |>  -->
<!--   rename(portfolio = pf) |>  -->
<!--   mutate(bet_rt_cum = cumprod(1 + bet_rt) - 1) |>  -->
<!--   select(-bet_rt) -->

<!-- all_bets_cum_period_nice <- function(start_date, end_date) { -->
<!--   if(end_date > start_date) { -->
<!--   all_bets_cum %>% -->
<!--   filter(date == start_date | date == end_date) %>% -->
<!--   pivot_wider(names_from = ticker, values_from = bet_rt_cum) %>% -->
<!--   mutate(across(c(VIG_US: Totaal), ~ (. + 1)/lag(. + 1) - 1)) %>% -->
<!--   filter(date == end_date) %>% -->
<!--   mutate(across(c(VIG_US: Totaal), ~ times_100_round2(.))) %>% -->
<!--   select(-date) %>% -->
<!--   ungroup() |>  -->
<!--   gt() |>  -->
<!--   opt_row_striping() |>  -->
<!--   gt_cols_align() |>  -->
<!--   gt_portfolio_colors() |>  -->
<!--   gt_delete_first_col_label() |>  -->
<!--   fmt_number(decimals = 1, columns = everything()) |>  -->
<!--   sub_zero(zero_text = " ") |>  -->
<!--   sub_missing(missing_text = " ") |>  -->
<!--   gt_data_colors(columns = 2:length(everything())) |>  -->
<!--   gt_cols_align() |>  -->
<!--   gt_font_padding_align() |>  -->
<!--   tab_header(str_c("Bijdrage van posities - portefeuilleniveau, van ", format(as.Date(start_date), "%d-%b-%Y"), " t/m ", format(as.Date(end_date), "%d-%b-%Y"))) -->
<!--   } else -->
<!-- {
        tribble(~x, str_c("geen maandgevens na ", format(end_date, "%d-%b"))) |> rename(" " = x) |> gt()   
   }
<!-- ``` -->

<!-- ::: panel-tabset -->
<!-- #### ytd -->

<!-- ```{r all_bets_tabel_nice_mtd} -->

<!-- all_bets_cum_period_nice(start_date = last_ultimo_year, end_date = snapshot_date) -->
<!-- ``` -->

<!-- #### `r last_year` -->

<!-- ```{r all_bets_tabel_nice_ly} -->

<!-- all_bets_cum_period_nice(start_date = next_to_last_ultimo_year, end_date = last_ultimo_year) -->
<!-- ``` -->
<!-- #### `r last_year - 1` -->

<!-- ```{r all_bets_tabel_nice_ly_m1} -->

<!-- all_bets_cum_period_nice(start_date = next_to_last_ultimo_year2, end_date = next_to_last_ultimo_year) -->
<!-- ``` -->

<!-- #### sinds `r format(start_date_attr, "%b-%Y")` -->

<!-- ```{r all_bets_tabel_nice_si} -->

<!-- all_bets_cum_period_nice(start_date = start_date_attr, end_date = snapshot_date) -->
<!-- ``` -->
<!-- ::: -->

# Overige gegevens

## Dividenden

```{r div_ontvangen_ruw}
ruwe_div_gegevens_long <-
  #euros ontvangen
  div_EUR_portfolios_per_date_per_sector_per_ticker %>%
  #div per aandeel gegevens
  left_join(dividends_EUR_month_end, by = c("date", "ticker")) %>%
  filter(sector %in% c(sector_levels_RD, "None")) %>%
  filter(div_EUR_net_pf != 0) %>%
  ungroup()

ruwe_div_gegevens <-
  ruwe_div_gegevens_long %>%
  pivot_wider(names_from = portfolio, values_from = div_EUR_net_pf) %>%
  mutate(across(is.numeric, ~replace_na(.x, 0)))
```

```{r div_ontvangen}

#nultabel maken
nul_tabel_pf <- function(portfolio) {
  all_prices_local %>%
    select(date) %>%
    filter(date >= start_date_attr) %>%
    mutate(portfolio = !!portfolio) %>%
    select(portfolio, date)
  }
nultabel <-
  map_dfr(portfolio_levels, nul_tabel_pf)

sum_div_gegevens_long <-
  ruwe_div_gegevens_long %>%
  left_join(pf_values_kolom_RD, by = c("portfolio", "date")) %>%
  group_by(portfolio, date) %>%
  mutate(div_pct = div_EUR_net_pf/value_eur) %>%
  reframe(sum_div_date_pct = sum(div_pct))

pf_start_date <- function(portfolio = "VP100") {
   if(portfolio %in% c("VP100", "VP50")) {pf_start_date <- start_date_vp_vf}
      else if(portfolio == "VD50") {pf_start_date <- start_date_vd}
      else if(portfolio == "DZ50") {pf_start_date <- start_date_fd}
      else if(portfolio %in% c("RD50","RD70", "RD30", "RD100")) {pf_start_date <- start_date_attr}
}

cum_div_gegevens_long <-
  nultabel %>%
  left_join(sum_div_gegevens_long, by = c("portfolio", "date")) %>%
  mutate(sum_div_date_pct = replace_na(sum_div_date_pct, 0)) %>%
  rowwise() %>%
  mutate(start = pf_start_date(portfolio),
         date_before_start = ifelse(date < start, 1, 0)) %>%
  filter(date_before_start == 0) %>%
  select(-start, -date_before_start) %>%
  mutate(year = year(date)) %>%
  group_by(portfolio, year) %>%
  reframe(date = date, cum_div_pct_pf_yr = cumsum(sum_div_date_pct)) %>%
  rowwise() %>%
  mutate(portfolio = factor(portfolio, levels = portfolio_levels))
```

::: panel-tabset
### Dividenden cumulatief per jaar

```{r div_ontvangen_chart}
#| fig-height: 7

cum_div_gegevens_long %>%
  ggplot(aes(x=date, y = cum_div_pct_pf_yr, group = year)) +
  geom_line(aes(col = portfolio), linewidth = 1.5) +
  scale_color_manual(values = portfolio_colors) +
  scale_y_continuous(sec.axis = dup_axis(), 
                     labels = scales::percent_format(accuracy = 1), 
                     breaks = c(0, 0.01, 0.02)) +
  scale_x_date(breaks = "1 year", date_labels = "%Y") +
  facet_wrap(~portfolio, ncol = 1) +
  labs(title = "Dividenden RD, cumulatief als % van RD, per jaar",
       subtitle = "VP's vanaf Jun-17") +
  charts_custom_theme

```

### Dividenden

```{r div_ontvangen_tabel}

ruwe_div_gegevens %>%
  arrange(desc(date)) %>%
  mutate(date = format(date, "%b-%Y")) %>%
  mutate(across(starts_with("div"), ~round(.x, 2))) %>%
  mutate(across(portfolio_levels, ~round(.x, 0))) %>%
  select(date, sector, ticker, div, div_EUR, portfolio_levels) %>%
  gt(id = "one") |> #id ivm container scroll css
  gt_cols_align() |> 
  tab_spanner(columns = 4:5, label = "per aandeel") |> 
  tab_spanner(columns = 6:13, label = "per portefeuille in euro's") |> 
  opt_row_striping() |> 
  sub_zero(zero_text = " ") |> 
  tab_header(str_c("Ontvangen dividenden RD per ticker, bron bloomberg, dividendbelasting verondersteld op nul")) |> 
  gt_font_padding_align() |> 
  gt_container_scroll()
```
:::

## Transacties

::: panel-tabset
### Transacties RD VP50, VD50 en VP100

```{r transacties_tabel_vf_vp}
#in inflows_RD komen niet alle data voor, dus prijsgegevens eerst aanmaken voor alle data
#price_local ter illustratie en controle en gemiddelde prijzen (de veronderstelde koersen op het midden van de maand)
#in aanmaak inflows_RD_eur gaat het goed (gechecked, ook daar eerst prijsgegevens en daarna de transacties)

all_pfs_values_kolom_av_RD <-
  pf_values_kolommen_RDRM |>
  group_by(portfolio) |>
  mutate(av_RD = (RD + lag(RD))/2) |>
  select(date, portfolio, av_RD)

all_pfs_values_kolom_av_RM <-
  pf_values_kolommen_RDRM |>
  group_by(portfolio) |>
  mutate(av_RM = (RM + lag(RM))/2) |>
  select(date, portfolio, av_RM)

transacties_RD_tabel <-
  all_prices_local_long %>%
  left_join(all_prices_eur_long, by = c("date", "ticker")) %>%
  mutate(price_local_lag = ifelse(is.na(lag(PX_LAST)), PX_LAST, lag(PX_LAST)),
         price_eur_lag = ifelse(is.na(lag(price_eur)), price_eur, lag(price_eur)),
         price_local_avg = (price_local_lag + PX_LAST)/2,
         price_eur_avg = (price_eur_lag + price_eur)/2) %>%
  #right joinen met inflows_RD_eur (op de datums in die tabel)
  right_join(inflows_RD_eur %>% select(-c(price_eur, price_eur_lag)), by = c("date", "ticker")) %>%
  #price_eur zou dubbel worden, maar zijn dezelfde (gecheckt), daarom eruit gehaald
  #kolommen maken
  mutate(KV = ifelse(d_shares < 0 , "V", "K"),
         q = abs(d_shares),
         pq = q * price_eur_avg,
         check = abs(pq)-abs(inflow_eur)) %>%
  #pq is gelijk aan inflows_RD_eur$inflows_eur (check)
  rename(p_loc = price_local_avg,
         p_eur = price_eur_avg) %>%
  select(date, portfolio, ticker, KV, q, p_loc, p_eur, pq)

transacties_RD_tabel_met_av_RD <-
  transacties_RD_tabel %>%
  #nav's erbij
  left_join(all_pfs_values_kolom_av_RD, by = c("date", "portfolio")) %>%
  arrange(date, portfolio) %>%
  #pct per transactie
  mutate(pct_RD = pq/av_RD) %>%
  #afronden
  mutate(across(c(pq, av_RD), ~round(.x, 0)),
         across(starts_with("p_"), ~round(.x, 1)),
         pct_RD = round(100 * pct_RD, 1))

transacties_RD_tabel_met_av_RD %>%
  filter(portfolio %in% portfolio_levels_vlieger) %>%
  pivot_wider(names_from = portfolio, values_from = c(q, pq, av_RD, pct_RD)) %>%
  select(date, ticker, KV, p_loc, p_eur, q_VP50, pq_VP50, av_RD_VP50, pct_RD_VP50, #hier de volgorde aangepast
                                         q_VP100, pq_VP100, av_RD_VP100, pct_RD_VP100,
                                         q_VD50, pq_VD50, av_RD_VD50, pct_RD_VD50) %>%
  #mooie tabel
  rename('K/V' = KV,
         q = q_VP100, `p*q` = pq_VP100, av_RD = av_RD_VP100, pct = pct_RD_VP100,
         `q ` = q_VP50, `p*q ` = pq_VP50, `av_RD ` = av_RD_VP50, `pct ` = pct_RD_VP50,
          `q  ` = q_VD50, `p*q  ` = pq_VD50, `av_RD  ` = av_RD_VD50, `pct  ` = pct_RD_VD50) %>%
  arrange(desc(date)) %>%
  mutate(date = format(date, "%b-%Y")) %>%
  ungroup() |> 
  gt(id = "one") |> #id ivm container scroll css
  opt_row_striping() |> 
  tab_spanner(columns = 6:9, label = "VP100") |> 
  tab_spanner(columns = 10:13, label = "VP50") |> 
  tab_spanner(columns = 14:17, label = "VD50") |> 
  gt_cols_align() |> 
  gt_font_padding_align() |> 
  gt_add_dividers_right(columns = c(5, 9, 13)) |> 
  sub_zero(zero_text = " ") |> 
  sub_missing(missing_text = " ") |> 
  tab_header(str_c("Transacties RD, tegen gemiddelde koersen van de maand, bedragen gebruikt in de attributies")) |> 
  gt_container_scroll()
```

### Transacties RD ETF portefeuilles

```{r transacties_tabel_etf_pfs}

transacties_RD_tabel_met_av_RD %>%
  filter(!portfolio %in% c("VP100", "VP50")) %>%
  pivot_wider(names_from = portfolio, values_from = c(q, pq, av_RD, pct_RD)) %>%
  select(date, ticker, KV, p_loc, p_eur, q_RD50, pq_RD50, av_RD_RD50, pct_RD_RD50, #hier de volgorde aangepast
                                         q_DZ50, pq_DZ50, av_RD_DZ50, pct_RD_DZ50,
                                         q_RD30, pq_RD30, av_RD_RD30, pct_RD_RD30,
                                         q_RD70, pq_RD70, av_RD_RD70, pct_RD_RD70,
                                         q_RD100, pq_RD100, av_RD_RD100, pct_RD_RD100,
                                         ) %>%
  #mooie tabel
  rename('K/V' = KV,
          q = q_RD70,    `p*q` = pq_RD70,    av_RD = av_RD_RD70,     pct = pct_RD_RD70,
         `q ` = q_RD50,  `p*q ` = pq_RD50,  `av_RD ` = av_RD_RD50,  `pct ` = pct_RD_RD50,
         `q  ` = q_RD30, `p*q  ` = pq_RD30, `av_RD  ` = av_RD_RD30, `pct  ` = pct_RD_RD30,
         `q   ` = q_DZ50, `p*q   ` = pq_DZ50, `av_RD   ` = av_RD_DZ50, `pct   ` = pct_RD_DZ50,
         `q    ` = q_RD100, `p*q    ` = pq_RD100, `av_RD    ` = av_RD_RD100, `pct    ` = pct_RD_RD100) %>%
  arrange(desc(date)) %>%
  mutate(date = format(date, "%b-%Y")) %>%
  ungroup() |> 
  gt(id = "one") |> #id ivm container scroll css
  opt_row_striping() |> 
  tab_spanner(columns = 6:9, label = "RD50") |> 
  tab_spanner(columns =10:13, label = "DZ50") |> 
  tab_spanner(columns =14:17, label = "RD30") |> 
  tab_spanner(columns =18:21, label = "RD70") |> 
  tab_spanner(columns =22:25, label = "RD100") |> 
  gt_cols_align() |> 
  gt_font_padding_align() |> 
  gt_add_dividers_right(columns = c(5, 9, 13, 17, 21)) |> 
  sub_zero(zero_text = " ") |> 
  sub_missing(missing_text = " ") |> 
  tab_header(str_c("Transacties RD, tegen gemiddelde koersen van de maand, bedragen gebruikt in de attributies")) |> 
  gt_container_scroll()
```
:::

## cahflow mtd

::: panel-tabset
### Coupons en dividend mtd

```{r coupons_en_div_deze_maand_tabel}

#waarde pf in eur op maandeindes sinds eind 2017
portfolio_values_lastdate <-
  portfolios_tabel |>
  filter(date == lastdate) |>
  group_by(portfolio) |>
  summarise(value_eur = sum(value_eur))

#cash_flow_tabel <-
# coupons_deze_maand_tabel <-
#   bonds_NL_cashflows_this_month_before_snapshot_date_by_pf_ticker %>%
#   rowwise() %>%
#   mutate(type = "coupon",
#          bedrag = bond_ticker_coupon(ticker)*100,
#          bedrag_EUR = bedrag,
#          bedrag_EUR_net = bedrag) %>%
#   select(portfolio, ticker, ex_date = coupon_date, pay_date = coupon_date, currency, shares, type,
#          bedrag,	bedrag_EUR,	bedrag_EUR_net, cashflow = coupons)

div_deze_maand_tabel <-
  dividends_EUR_month_end %>%
  filter(pay_date > lastdate, pay_date <= snapshot_date) |>
  mutate(date = snapshot_date,
         type = "dividend") |> #voor aansluiting met portfolios_tabel
  left_join(portfolios_tabel %>% ungroup() %>% select(portfolio, ticker, date, shares), by = c("date", "ticker")) %>%
  ungroup() %>%
  filter(!is.na(portfolio)) %>%
  mutate(cashflow = shares*div_EUR_net) %>%
  select(portfolio, ticker, ex_date, pay_date, currency = CRNCY, shares, type,
         bedrag = div, bedrag_EUR = div_EUR, bedrag_EUR_net = div_EUR_net, cashflow)

total_cashflows_deze_maand_tabel <-
  #coupons_deze_maand_tabel %>%
  #bind_rows(div_deze_maand_tabel) %>%
  div_deze_maand_tabel |> 
  filter(cashflow > 0) |>
  #portfoliovalue ernaast voor bps
  left_join(portfolio_values_lastdate, by = "portfolio") |>
  mutate(cashflow_pct = 100*cashflow/value_eur) |>
  select(-value_eur, - bedrag_EUR_net) |>
  mutate(portfolio = factor(portfolio, levels = portfolio_levels)) %>%
  arrange(portfolio, pay_date)

total_cashflows_deze_maand_tabel %>%
    gt() |> 
    tab_header(str_c("dividend mtd, ", snapshot_date_format)) |> 
    fmt_number(columns = 8:10, decimals = 2) |> 
    fmt_number(columns = 11, decimals = 4) |> 
    gt_cols_align() |> 
    gt_font_padding_align()
```

```{r cash_lastdate_cashflow_cash_snapshotdate}

cash_lastdate <-
  portfolios_tabel %>%
  filter(date == lastdate, ticker == "CASH") %>%
  ungroup() %>%
  select(portfolio, value_eur) %>%
  rename(!!sym(format(lastdate, "cash %d %b")) := value_eur)

cash_snapshotdate <-
  portfolios_tabel %>%
  filter(date == snapshot_date, ticker == "CASH") %>%
  ungroup() %>%
  select(portfolio, value_eur) %>%
  rename(!!sym(format(snapshot_date, "cash %d %b")) := value_eur)

cash_erbij_dezemaand <-
  total_cashflows_deze_maand_tabel %>%
  filter(pay_date > lastdate, pay_date <= snapshot_date) %>%
  group_by(portfolio) %>%
  summarise(cashflow = sum(cashflow),
            cashflow_pct = sum(cashflow_pct))
```

### Totaal cashflow mtd

```{r cash_lastdate_cashflow_cash_snapshotdate_agg_tabel}

cash_lastdate %>%
  left_join(cash_erbij_dezemaand, by = "portfolio") %>%
  left_join(cash_snapshotdate, by = "portfolio") %>%
  mutate(portfolio = factor(portfolio, levels = portfolio_levels),
         across(is.numeric, ~replace_na(., 0))) %>%
  arrange(portfolio) |>
  gt() |> 
  fmt_number(decimals = 0, columns = everything()) |> 
  fmt_number(decimals = 2, columns = 4) |> 
  gt_cols_align() |> 
  gt_delete_first_col_label() |> 
  gt_font_padding_align() |> 
  tab_header(str_c("Totaal cashflow mtd per portefeuille, ", snapshot_date_format)) %>%
  tab_footnote(str_c("cash ", format(lastdate, "%d %b"), " volgens VOLK bestanden"))

```
:::

## Omzet

::: panel-tabset
### Omzet per jaar in RD Individuele Aandelen portefeuilles niet-duurzaam

```{r omzet_tabel_ia_pfs_nd}
data <-
  transacties_RD_tabel |> 
  left_join(all_pfs_values_kolom_av_RD, by = c("date", "portfolio")) |> 
  mutate(omzet_pct = pq/av_RD/2, year = year(date)) |> 
  filter(!str_detect(portfolio, "D"), str_detect(portfolio, "V"), year >= 2018) |> 
  rowwise() |> 
  group_by(portfolio, year) |>  
  summarise(omzet_pct = sum(omzet_pct))

gemiddelde_omzet_laatste_vijf_jaar_IA_nd <- 
  data |> 
  filter(year %in% c(last_year - 4, last_year - 3, last_year - 2, last_year - 1, last_year)) |> 
  ungroup() |> 
  summarise(omzet_pct = mean(omzet_pct)) |> 
  pull()
  
data |> 
  left_join(portfolios_bms_colors, by = "portfolio") |> 
  ggplot() +
  geom_col(aes(x = year, y = omzet_pct, fill = color)) + 
  scale_fill_identity() +
  facet_wrap(~portfolio) + 
  scale_y_continuous(labels = scales::percent_format(accuracy = 1)) +
  labs(title = "Omzet per jaar in RD van Individuele Aandelen portefeuilles",
       subtitle = str_c("gemiddelde laatste 5 jaar (2020 t/m 2024) is ",
                     label_percent() (gemiddelde_omzet_laatste_vijf_jaar_IA_nd)), 
       x= "", y = "",
       caption = "Omzet is som van (p maal q)/waarde portefeuille/2") +
  charts_custom_theme
```

### Omzet per jaar in RD ETF portefeuilles niet-duurzaam

```{r omzet_tabel_etf_pfs_nd}
data <-
  transacties_RD_tabel |> 
  left_join(all_pfs_values_kolom_av_RD, by = c("date", "portfolio")) |> 
  mutate(omzet_pct = pq/av_RD/2, year = year(date)) |> 
  filter(portfolio %in% portfolio_levels_x_duurzaam, portfolio %notin% portfolio_levels_vlieger, year >= 2018) |> 
  rowwise() |> 
  group_by(portfolio, year) |>  
  summarise(omzet_pct = sum(omzet_pct))

gemiddelde_omzet_laatste_vijf_jaar_ETF_nd <- 
  data |> 
  filter(year %in% c(last_year - 4, last_year - 3, last_year - 2, last_year - 1, last_year)) |> 
  ungroup() |> 
  summarise(omzet_pct = mean(omzet_pct)) |> 
  pull()
  
data |> 
  left_join(portfolios_bms_colors, by = "portfolio") |> 
  ggplot() +
  geom_col(aes(x = year, y = omzet_pct, fill = color)) + 
  scale_fill_identity() +
  facet_wrap(~portfolio) +
  scale_y_continuous(labels = scales::percent_format(accuracy = 1)) +
  labs(title = "Omzet per jaar in RD van ETF portefeuilles",
       subtitle = str_c("gemiddelde laatste 5 jaar (2020 t/m 2024) is ",
                     label_percent() (gemiddelde_omzet_laatste_vijf_jaar_ETF_nd)), 
       x= "", y = "",
       caption = "Omzet is som van (p maal q)/waarde portefeuille/2") +  charts_custom_theme

```

### Omzet per jaar in RM

```{r omzet_RM}

data <-
  portfolios_tabel |> 
  filter(RDRM == "RM", type != "CASH", !str_detect(portfolio, "D"), portfolio %notin% c("VP100", "RD100")) |> 
  group_by(portfolio, ticker) |> 
  select(date, portfolio, ticker, price, shares, value_eur) |>  
  mutate(d_shares = shares - lag(shares)) |> 
  left_join(all_pfs_values_kolom_av_RM, by = c("portfolio", "date")) |> 
  mutate(omzet = ifelse(is.na(d_shares), abs(shares*price/100/2), abs(d_shares * price/100/2)), 
         omzet_pct = omzet/av_RM, 
         year = year(date)) |> 
  group_by(year, portfolio) |> 
  summarise(omzet_pct = sum(omzet_pct)) |> 
  filter(year >= 2018)

gemiddelde_omzet_laatste_vijf_jaar_RM <- 
  data |> 
  filter(year %in% c(last_year - 4, last_year - 3, last_year - 2, last_year - 1, last_year)) |> 
  ungroup() |> 
  summarise(omzet_pct = mean(omzet_pct)) |> 
  pull()

data |> 
  left_join(portfolios_bms_colors, by = "portfolio") |> 
  ggplot() +
  geom_col(aes(x = year, y = omzet_pct, fill = color)) + 
  scale_fill_identity() +
  facet_wrap(~portfolio) +
  scale_y_continuous(labels = scales::percent_format(accuracy = 1)) +
  labs(title = "Omzet per jaar in RM",
       subtitle = str_c("gemiddelde laatste 5 jaar (2020 t/m 2024) is ",
                     label_percent() (gemiddelde_omzet_laatste_vijf_jaar_RM)), 
       x= "", y = "",
       caption = "Omzet is som van (p maal q)/waarde portefeuille/2") +
  charts_custom_theme
```
:::

## Gewicht van tickers in RD per portefeuille

::: panel-tabset
```{r gewichten_RD_maken}
portfolios_tabel_with_RD_ticker_wt <-
  portfolios_tabel %>%
  left_join(pf_values_kolom_RD |> rename(value_eur_RD = value_eur), by = c("date", "portfolio")) %>%
  mutate(wt_in_RD = value_eur/value_eur_RD)
```

### Historie van gewicht van namen in RD VP50, VD50 en VP100

```{r gewichten_in_RD_vp_vf}
#| fig-height: 16

#alleen huidige tickers
current_vp_vf_tickers <-
  portfolios_tabel %>%
  filter(date == lastdate, portfolio %in% c("VP100", "VP50"), RDRM == "RD") %>%
  select(date, portfolio, ticker) %>%
  unique() %>%
  pull()

portfolios_tabel_with_RD_ticker_wt_charts <- function(portfolios, tickers) {
  portfolios_tabel_with_RD_ticker_wt %>%
  group_by(portfolio, ticker) %>%
  mutate(KV = ifelse(shares != lead(shares), "KV", NA)) %>%
  mutate(KV = ifelse(date == min(date), NA, KV),
                  portfolio = factor(portfolio, levels = portfolio_levels)) %>%
  filter(RDRM == "RD", portfolio %in% portfolios, ticker %in% tickers) %>%
  ggplot(aes(x = date, y = wt_in_RD, col = portfolio)) +
    geom_line(linewidth = 1.5) +
    geom_point(aes(x = date, y = wt_in_RD), col = "red", data = . %>% filter(!is.na(KV))) +
    scale_color_manual(values = portfolio_colors[which(portfolio_levels %in% portfolios)]) +
    scale_y_continuous(sec.axis = dup_axis(), labels = scales::percent_format(accuracy = 1)) +
    scale_x_date(breaks = "1 year", date_labels = "%y") +
    facet_wrap(~ticker, ncol = 2) +
    labs(title = "Gewicht in RD van tickers, per portefeuille") +
    charts_custom_theme +
    theme(legend.position = "bottom")
}

portfolios_tabel_with_RD_ticker_wt_charts(
  portfolios = c("VP50", "VD50", "VP100"),
  tickers = current_vp_vf_tickers)
```

### Historie van gewicht van ETF's in RD, RD50, RD70, RD30 en RD100

```{r gewichten_in_RD_etf_pfs}
#| fig-height: 7

current_st_ff_ts_tickers <-
  portfolios_tabel %>%
  filter(date == lastdate, portfolio %in% c("RD50","RD70", "RD30", "RD100"), RDRM == "RD") %>%
  ungroup() |>
  select(ticker) %>%
  unique() %>%
  pull()

portfolios_tabel_with_RD_ticker_wt_charts(
  portfolios = c("RD50", "RD70", "RD30", "RD100"),
  tickers = current_st_ff_ts_tickers)
```

### Gewicht van "Magnificent Seven" in portefeuille en benchmark

```{r gewichten_grote_tickers}
#| fig-height: 7

grote_tickers <- c("MSFT_UW", "AAPL_UW",  "NVDA_UW", "GOOGL_UW", "AMZN_UW", "META_UW", "TSLA_UW") |> as_tibble() |> rename(ticker = value)

pf_wt_grote_namen <- function(portfolio) {
  tabel <-
    grote_tickers |> 
    #naam
    left_join(portfolios_tabel |> select(date, portfolio, ticker, weight) |> filter(date == snapshot_date, portfolio == !!portfolio), 
              by = c("ticker")) |> 
    select(-date, -portfolio) |> 
    rename(wgt_naam = weight) |>
    left_join(market_caps, by = "ticker") |> 
    rename(mkt_cap_naam = market_caps) |> 
    #wereld
    mutate(wereld = "MXWO") |> 
    left_join(market_caps, by = c("wereld" = "ticker")) |> 
    rename(mkt_cap_wereld = market_caps) |> 
    select(-wereld) |> 
    mutate(wereld_ETF = "IWDA_NA") |>
    left_join(portfolios_tabel |> select(date, portfolio, ticker, weight) |> 
                filter(date == snapshot_date, portfolio == !!portfolio), 
              by = c("wereld_ETF" = "ticker")) |> 
    rename(wgt_wereld_ETF = weight) |>
    mutate(wgt_from_wereld_ETF = mkt_cap_naam/mkt_cap_wereld*wgt_wereld_ETF) |>
    select(-date, -portfolio) |> 
    #regio
    mutate(regio = "SPX") |> 
    left_join(market_caps, by = c("regio" = "ticker")) |> 
    rename(mkt_cap_regio = market_caps) |> 
    select(-regio) |> 
    mutate(regio_ETF = "SPY5_GY") |>
    left_join(portfolios_tabel |> select(date, portfolio, ticker, weight) |> 
                filter(date == snapshot_date, portfolio == !!portfolio), 
              by = c("regio_ETF" = "ticker")) |> 
    rename(wgt_regio_ETF = weight) |>
    mutate(wgt_from_regio_ETF = mkt_cap_naam/mkt_cap_regio*wgt_regio_ETF) |>
    select(-date, -portfolio) |> 
    #sector
    left_join(holdings |> select(ticker, sector), by = "ticker") |> 
    rowwise() |> mutate(sectorbenchmark = sector_benchmark_levels[which(sector_levels == sector)]) |> 
    left_join(market_caps, by = c("sectorbenchmark" = "ticker")) |> 
    rename(mkt_cap_sector = market_caps) |> 
    select(-sectorbenchmark) |> 
    left_join(holdings |> filter(type == "ETF") |> select(ETF = ticker, sector), by = "sector") |> 
    rename(sector_ETF = ETF) |>
    left_join(portfolios_tabel |> select(date, portfolio, ticker, weight) |> 
                filter(date == snapshot_date, portfolio == !!portfolio), 
              by = c("sector_ETF" = "ticker")) |> 
    rename(wgt_sector_ETF = weight) |>
    mutate(wgt_from_sector_ETF = mkt_cap_naam/mkt_cap_sector*wgt_sector_ETF) |>
    select(-date, -portfolio) |> 
    mutate(total_wgt = sum(wgt_naam, wgt_from_wereld_ETF, wgt_from_regio_ETF, wgt_from_sector_ETF, na.rm = TRUE)) |> 
    #benchmark_weight
    mutate(bm_wgt = mkt_cap_naam/mkt_cap_wereld * BM_weight_RD(portfolio),
           OU_wgt = total_wgt - bm_wgt) |>
    mutate(portfolio = portfolio) |> 
    select(portfolio, ticker, wgt_naam, contains("from"), total_wgt, bm_wgt, OU_wgt) |> 
    mutate(across(is.numeric, ~replace_na(., 0))) |>
    ungroup()
    #arrange(desc(bm_wgt))
  total_row <- 
    tabel |> 
  reframe(portfolio = portfolio, ticker = "Totaal", across(where(is.numeric), ~sum(.x))) |> 
    slice(n())
   bind_rows(tabel, total_row) 
} 

map_dfr(c("RD50", "VP50", "RD30","RD70", "RD100", "VP100"), pf_wt_grote_namen) |> 
 # rename(portfolio = pf) |>
  gt() |>
  gt_cols_align() |> 
  fmt_percent(columns = where(is.numeric), decimals = 1) |> 
  tab_spanner(label = "gewicht afkomstig van", columns = wgt_naam:wgt_from_sector_ETF) |>
  cols_label(#label = "wgt_naam" ~ "ticker",
             wgt_naam = "naam",
             wgt_from_wereld_ETF = "wereld ETF",
             wgt_from_regio_ETF = "regio ETF",
             wgt_from_sector_ETF = "sector ETF",
             total_wgt = "totaal",
             bm_wgt = "benchmark") |> 
gt_portfolio_colors() |>
  #gt_first_col_bold() |>
  gt_font_padding_align() |> 
  data_color(columns = OU_wgt, 
    colors = scales::col_bin(
    bins = c(-Inf, -.001, 0.001, Inf),
    palette = c("red3", "gray30", "gray30", "forestgreen")),
    apply_to = "text") |> 
  sub_zero(zero_text = "-") |>
  tab_style(
    style = list(cell_text(weight = "bold")),
    locations = cells_body(rows = ticker == "Totaal")
    ) |> 
  tab_style(
    style = list(cell_text(weight = "bold")),
    locations = cells_body(columns = "OU_wgt")
    ) |> 
  tab_header(str_c("Gewicht 'Magnificent Seven' in portefeuille en benchmarks, ", snapshot_date_format)) %>%
  tab_footnote(str_c("afgeleid uit market caps in USD van de namen, de MXWO en de MXWO sectoren, in combinatie met de gewichten van de individuele namen, de wereld ETF, de regio ETF's en de sector ETF's in de portefeuille ", format(snapshot_date, "%d %b"))) 
    
```
:::

## Duurzaam gehalte van modelportefeuilles

::: panel-tabset
### Als duurzaam gekenmerkte regels

```{r duurzaam_gehalte}
portfolios_tabel |> ungroup() |> 
    filter(duurzaam == 1) |> 
  select(c(RDRM:ticker), currency) |> 
  unique() |> 
  arrange(RDRM, type) |> 
  gt() |> 
  gt_cols_align() |> 
  gt_font_padding_align() |> 
  tab_header("NL Obligaties, duurzame ETF's en Individuele Aandelen in MWOP_GY (per nov-24)")
```

### Duurzaam gehalte verloop inclusief cash (cash is niet duurzaam)

```{r duurzaam_gehalte_2}
#| fig-height: 7
portfolios_tabel |> 
  group_by(date, portfolio) |> 
  mutate(duurzaam_wt = duurzaam * weight) |> 
  filter(!is.na(duurzaam), date > "2022-12-31") |> 
  reframe(duurzaam_wt = sum(duurzaam_wt)) |> 
  mutate(portfolio = factor(portfolio, levels = portfolio_levels)) |> 
  pivot_wider(names_from = portfolio, values_from = duurzaam_wt) |>
  select(date, portfolio_levels) %>% 
  gt() |>
  gt_cols_align() |>
  gt_font_padding_align() |> 
  tab_header("NL Obligaties, duurzame ETF's en Individuele Aandelen die voorkomen in MWOP_GY (per nov-24)") |> 
  fmt_percent(columns = where(is.numeric), decimals = 1)

```
:::

#  Modelportefeuilles, MSCI sector-, stijl-, landenindices en andere markten

## Staafgrafieken
```{r benchmarks_perf_barchart}

bms_chart_data <-
  bm_prices_eur_long %>%
  mutate(ticker = case_when(
    str_detect(ticker, "JPM") ~ "JPM",
    str_detect(ticker, "BM30") ~ "BM30",
    str_detect(ticker, "BM50") ~ "BM50",
    str_detect(ticker, "BM70") ~ "BM70",
    str_detect(ticker, "MSDEWIN") ~ "BM100"),
    price_delta = ifelse(date == min(date), 100, PX_LAST/lag(PX_LAST)),
         price_index = cumprod(price_delta)) %>%
  filter(!str_detect(ticker, "MXWO")) %>%
  select(date, ticker, price_index) %>%
  mutate(ticker = factor(ticker, levels = c("JPM", "BM30", "BM50", "BM70", "BM100")),
         #voor uniformiteit chart_data
         name = ticker,
         label = ticker,
         fill = bmgray,
         alpha = case_when(ticker == "JPM" ~ 1,
                           ticker == "BM30" ~ 0.8,
                           ticker == "BM50" ~ 0.6,
                           ticker == "BM70" ~ 0.4,
                           ticker == "BM100" ~ 0.2)) |> 
  select(date, ticker, price_index, name, label, fill, alpha) 

pfs_bms_chart_data <-
  map_dfr(portfolio_levels, pf_vs_bm_index_kolom, start_date = start_date_sector_indices, end_date = snapshot_date) |>
  select(-BM_index) |> 
  rename(ticker = portfolio) |>
  mutate(price_index = 100 * pf_index) %>%
  select(date, ticker, price_index)  |> 
    mutate(#voor uniformiteit chart_data
          name = ticker,
          label = ticker,
          alpha = 0.8) |> 
  left_join(portfolios_colors, by = c("ticker" = "portfolio")) |> 
  rename(fill = color) |> 
  select(date, ticker, price_index, name, label, fill, alpha) |> 
 #
  bind_rows(bms_chart_data) |> 
  group_by(ticker) |> 
  mutate(ticker = factor(ticker, 
                         levels = c("JPM", "RD50", "DZ50", "VP50", "VD50",
                                    "BM50", "RD30", "BM30", "RD70", "BM70",
                                    "RD100", "VP100", "BM100")),
         name = as.character(ticker)) |> 
  mutate(label = ticker,
         label = factor(label, 
                        levels = c("JPM", "RD30", "BM30", "RD50", "DZ50", "VP50", "VD50",
                                    "BM50",  "RD70", "BM70",
                                    "RD100", "VP100", "BM100")))
  
pfs_chart_data <-
  pfs_bms_chart_data |> 
  #BM's en JPM eruit
  filter(!(str_detect(ticker, "BM")|ticker == "JPM"))
         
benega_msdewin_chart_data <-
  all_prices_eur_long %>%
  filter(ticker %in% c("BENEGA", "MSDEWIN"),
         date >= start_date_sector_indices) %>%
  mutate(return = ifelse(date == min(date), 0, price_eur/lag(price_eur) - 1)) |>
  select(date, ticker, return) |>
  #wider voor mixes
  pivot_wider(names_from = ticker, values_from = return) |>
  #mixed bms maken
  mutate(MR_7030 = 0.7 * MSDEWIN + 0.3 * BENEGA,
         MR_5050 = 0.5 * MSDEWIN + 0.5 * BENEGA,
         MR_3070 = 0.3 * MSDEWIN + 0.7 * BENEGA) |>
  mutate(across(-date, ~cumprod(1 + .) * 100)) |>
  #lang maken
  pivot_longer(-date, names_to = "ticker", values_to = "price_index") |>
  group_by(ticker) |>
  mutate(ticker = factor(ticker, levels = c("MSDEWIN", "MR_7030", "MR_5050", "MR_3070", "BENEGA")),
         #voor uniformiteit chart_data
         name = ticker,
         label = ticker,
         fill = case_when(ticker == "MSDEWIN" ~ brewer.pal(7,"Oranges")[6],
                          ticker == "MR_7030" ~ "#74C476",
                          ticker == "MR_5050" ~ "#238B45",
                          ticker == "MR_3070" ~ "#006D2C",
                          ticker == "BENEGA" ~ brewer.pal(7,"Purples")[5]),
         alpha = 0.7,
         label = factor(label, levels = c("MSDEWIN", "MR_7030", "MR_5050", "MR_3070", "BENEGA"))) |>
  select(date, ticker, price_index, name, label, fill, alpha)

```

```{r perf_barcharts_prep}

MSDEWIN_perf <- function(start_date = start_date_attr, end_date = snapshot_date) {
  all_prices_eur_long %>%
  filter(ticker == "MSDEWIN", date == start_date | date == end_date) %>%
  mutate(return = price_eur/lag(price_eur)-1) %>%
  ungroup() %>%
  select(return) %>%
  tail(1) %>%
  as.double()
}

MSDEWIN_streep <- function(aantal_bars, start_date = start_date_attr, end_date = snapshot_date) {
  list(
      annotate('segment', x = 0.55, xend = aantal_bars + 1 - 0.55, 
               y = MSDEWIN_perf(start_date, end_date), 
               yend = MSDEWIN_perf(start_date, end_date), 
               linewidth = 2, alpha = 0.2, color = bmgray)
  )
}
```

```{r sector_chart_data}

sector_chart_data_incl <-
  MSCI_sector_indices_in_en_ex_EUR_hist |> 
  filter(incl_or_excl == "incl") |>
  rename(price_index = index,
         ticker = sector) |>
  left_join(sectors_colors, by = "ticker") |>
  mutate(label = abbreviate(ticker, 3),
         label = factor(label, levels = abbreviate(sector_levels_RD, 3)),
         name = ticker,
         alpha = 0.6,
         date = as.Date(date)) |> 
  select(date, ticker, price_index, name, label, fill, alpha) 

sector_chart_data_incl_excl <-
  MSCI_sector_indices_in_en_ex_EUR_hist |> 
  rename(ticker = sector,
         price_index = index) |>
  left_join(sectors_colors, by = "ticker") |>
  mutate(ticker = str_c(abbreviate(ticker, 2),"_",incl_or_excl)) |> 
  select(-group, -incl_or_excl) |> 
  mutate(label = ticker,
         label = factor(label, levels = c(str_c(abbreviate(sector_levels_RD, 3), "_excl"), 
                                          str_c(abbreviate(sector_levels_RD, 3), "_incl"))),
         name = ticker,
         alpha = ifelse(str_detect(ticker, "incl"), 0.9, 0.6)) |> 
  select(date, ticker, price_index, name, label, fill, alpha) 

# sector_chart_data_incl <-
#   sector_chart_data_incl_excl |> 
#   filter(str_detect(ticker, "incl"))

sector_chart_data_excl <-
  sector_chart_data_incl_excl |>
  filter(str_detect(ticker, "excl"))

```

```{r styles_chart_data}

styles_tabel <-
  tribble(~ticker, ~fill, ~label, ~alpha,
          "M1WOEW", brewer.pal(9,"Oranges")[9], "EW", 0.8,
          "M1WOGW", brewer.pal(9,"Oranges")[8], "GW", 0.75,
          "M1WOQU", brewer.pal(9,"Oranges")[7], "Q", 0.7,
          "M1WO000V", brewer.pal(9,"Oranges")[6], "V", 0.65,
          "M1WO000G", brewer.pal(9,"Oranges")[5], "G", 0.6,
          "M1WOMVOL", brewer.pal(9,"Oranges")[4], "MV", 0.55)

styles_chart_data_incl <-
  all_prices_eur_long %>%
  filter(ticker %in% styles_tabel$ticker, 
         date >= start_date_sector_indices) %>%
  left_join(holdings |> select(ticker, name), by = "ticker") |> 
  left_join(styles_tabel, by = "ticker") |>
  mutate(price_delta = ifelse(date == min(date), 100, price_eur/lag(price_eur)),
         price_index = cumprod(price_delta),
         ticker = factor(ticker, levels = styles_tabel$ticker),
         label = factor(label, levels = styles_tabel$label)) |> #,
        # alpha = 0.8) |> 
  select(date, ticker, price_index, name, label, fill, alpha)

```

```{r sector_en_styles_chart_data_incl}

sector_en_styles_chart_data_incl <- 
  sector_chart_data_incl |> 
  bind_rows(styles_chart_data_incl)

```

```{r landen_chart_data}

landen_tabel <-
  tribble(~ticker, ~fill, ~label,
          "NDDUUS", "#BB2533", "US",
          "M7EU", "#004494", "EU",
          "M7NL", "#FF9B00", "NL",
          "MSDEFRN", "blue", "FR",
          "NDDUGR", "#FFCC00", "GE",
          "NDDLSZ", "#FF0000", "CH",
          "NDDLUK", "darkcyan", "UK",
          "NDDUJN", "#8cb8c5", "JP",
          "NDEEWNR", "darkgreen", "ACWI",
          "MBEF", brewer.pal(7,"Oranges")[5], "EM",
          "M1CN", "darkkhaki", "CN",
          "M1IN", "#0a8901", "IN")

landen_chart_data <-
  all_prices_eur_long %>%
  filter(ticker %in% landen_tabel$ticker, 
         date >= start_date_sector_indices) %>%
  left_join(holdings |> select(ticker, name), by = "ticker") |> 
  left_join(landen_tabel, by = "ticker") |>
  mutate(price_delta = ifelse(date == min(date), 100, price_eur/lag(price_eur)),
         price_index = cumprod(price_delta),
         ticker = factor(ticker, levels = landen_tabel$ticker),
         label = factor(label, levels = landen_tabel$label),
         alpha = 0.8) |> 
  select(date, ticker, price_index, name, label, fill, alpha)

currencies_tabel <-
  tribble(~ticker, ~fill, ~label,
          "EURUSD_ECB", "#BB2533", "USD",
          "EURGBP_ECB", "darkcyan", "GBP",
          "EURCHF_ECB", "#FF0000", "CHF",
          "EURJPY_ECB", "#8cb8c5", "JPY")#,
          #"XBTUSD", "#f2a900", "BTC")
```

```{r other_currency_chart_data}

currency_chart_data <-
  ECB_Exchange_rates_long |>  
  group_by(currency) |>
  rename(ticker = currency, price_eur = exchange_rate) |>
  mutate(price_eur = 1/ price_eur,
         name = ticker) |>
  filter(date >= start_date_sector_indices,
         ticker != "EUREUR_ECB") |> 
  left_join(currencies_tabel, by = "ticker") |> 
  mutate(price_delta = ifelse(date == min(date), 100, price_eur/lag(price_eur)),
         price_index = cumprod(price_delta),
         ticker = factor(ticker, levels = currencies_tabel$ticker),
         label = factor(label, levels = currencies_tabel$label),
         alpha = 0.8) |> 
  select(date, ticker, price_index, name, label, fill, alpha)

other_tabel <- 
  tribble(~ticker, ~fill, ~label,
          "SPLPEQNT_US", brewer.pal(7,"Oranges")[4], "PrEq",
          "M1WOSC", "darkgoldenrod", "SmCp",
          "IBXX000T", brewer.pal(7,"Purples")[6], "LDur",
          "BCIW1A", brewer.pal(7,"Purples")[3], "ILBs",
          "IBXXGH30", brewer.pal(5,"Greens")[5], "HY",
          "JPEIGLBL", brewer.pal(5,"Greens")[3], "EMB",
          "SPBDLL", brewer.pal(5,"Greens")[4], "LLs",
          "XAUEUR", "gold", "Goud",
          #"XBTUSD_Curncy", "#F7931A", "BTC",
          "SPGSCITR", "slategray", "Cdties")

other_chart_data <-
  all_prices_eur_long %>%
  filter(ticker %in% other_tabel$ticker,
         date >= start_date_sector_indices) %>%
  #kolom name erbij
  left_join(holdings |> select(ticker, name), by = "ticker") |>   
  left_join(other_tabel, by = "ticker") |>
  mutate(price_delta = ifelse(date == min(date), 100, price_eur/lag(price_eur)),
         price_index = cumprod(price_delta),
         ticker = factor(ticker, levels = other_tabel$ticker),
         label = factor(label, levels = other_tabel$label), #c("SmCp", "PrEq", "LLs",  "HY", "EMB", "ILBs", "LDur", "Goud", "Cdties")),
         alpha = 0.8) |> 
  select(date, ticker, price_index, name, label, fill, alpha)

other_currency_chart_data <- 
  other_chart_data |> 
  bind_rows(currency_chart_data)
```

```{r perf_barchart}

perf_barchart <- 
  function(chart_data = sector_chart_data_incl, titel_tekst = "MSCI World sectoren, ", start_date = start_date_attr, end_date = snapshot_date) {
    if(end_date > start_date) {
      chart_data <-
        chart_data %>%
      filter(date %in% c(start_date, end_date)) %>%
      mutate(return = price_index/lag(price_index) - 1) %>%
      filter(date == end_date) 
      
    chart_data %>%
      ggplot(aes(x = label, y = return)) +
      MSDEWIN_streep(aantal_bars = 
                       chart_data |> select(ticker) |> unique() |> nrow(), start_date, end_date) +
      geom_col(aes(fill = fill, alpha = alpha), col = "gray40") +
      scale_fill_identity() +
      scale_alpha_identity() +
      geom_text(data = chart_data, aes(x = label, 
                                       y = return/2, 
                                       label = str_c(round(return*100, 1), "%")), 
                size = 4, col = "gray30", fontface = 'bold') +
      scale_y_continuous(labels = scales::percent_format(accuracy = 0.1)) +
      scale_x_discrete() +
      ggtitle(str_c(titel_tekst, ", van ", format(as.Date(start_date), "%d-%b-%Y"), " t/m ", format(as.Date(end_date), "%d-%b-%Y"))) +
      labs(x = "", y = "") +
      theme_bw() +
      theme(legend.position = "none",
            axis.text = element_text(size = 12),
            plot.title = element_text(size = 12, hjust = 0.5))
 } else
  ggplot() +
    theme_void() +
    geom_text(aes(0, 0, label = str_c("geen maandgegevens na ", format(lastdate, "%d-%b"))))
  }
```

```{r all_mkts_barchart}
pfs_bms_barchart <- function(start_date = start_date_attr, end_date = snapshot_date) {
  perf_barchart(chart_data = pfs_bms_chart_data, titel_tekst = "Modelportefeuilles en benchmarks", start_date, end_date) + 
  theme(axis.text = element_text(size = 10)) + 
  geom_vline(xintercept = c(1.5, 3.5, 8.5, 10.5), linetype = "dotdash", alpha = 0.7, linewidth = 1) 
}
sector_en_styles_barchart <- function(start_date = start_date_attr, end_date = snapshot_date) {
  perf_barchart(chart_data = sector_en_styles_chart_data_incl, titel_tekst = "MSCI sectoren en stijlen, in EUR, incl. div.", start_date, end_date) + geom_vline(xintercept = c(11.5), linetype = "dotdash", alpha = 0.7)
}
landen_barchart <- function(start_date = start_date_attr, end_date = snapshot_date) {
  perf_barchart(chart_data = landen_chart_data, titel_tekst = "MSCI landen/regio's, in EUR, incl. div.", start_date, end_date)
}
other_currency_barchart<- function(start_date = start_date_attr, end_date = snapshot_date) {
  perf_barchart(chart_data = other_currency_chart_data, titel_tekst = "Other, in EUR, incl. div.", start_date, end_date) + geom_vline(xintercept = c(9.5), linetype = "dotdash", alpha = 0.7)
}

all_mkts_barchart <- function(start_date = start_date_attr, end_date = snapshot_date) {
  grid.arrange(
    pfs_bms_barchart(start_date = start_date, end_date = end_date),
    sector_en_styles_barchart(start_date = start_date, end_date = end_date),
    landen_barchart(start_date = start_date, end_date = end_date),
    other_currency_barchart(start_date = start_date, end_date = end_date),
  nrow = 2)
}

```

::: panel-tabset
### ytd

```{r indices_perf_bar_ytd2}
#| column: page
#| layout-ncol: 1
#| fig-width: 14
#| fig-height: 7

all_mkts_barchart(start_date = last_ultimo_year, end_date = snapshot_date)
```

### mtd

```{r indices_perf_bar_mtd2}
#| column: page
#| layout-ncol: 1
#| fig-width: 14
#| fig-height: 7

all_mkts_barchart(start_date = lastdate, end_date = snapshot_date)
```

### qtd

```{r indices_perf_bar_qtd2}
#| column: page
#| layout-ncol: 1
#| fig-width: 14
#| fig-height: 7

all_mkts_barchart(start_date = last_quarter_end, end_date = snapshot_date)
```

### lm

```{r indices_perf_lm_chart2}
#| column: page
#| layout-ncol: 1
#| fig-width: 14
#| fig-height: 7

all_mkts_barchart(start_date = next_to_lastdate, end_date = lastdate)
```

### lq

```{r indices_perf_lq_chart2}
#| column: page
#| layout-ncol: 1
#| fig-width: 14
#| fig-height: 7

all_mkts_barchart(start_date = last_quarter_start, end_date = last_quarter_end)
```

### `r year(last_ultimo_year)`

```{r indices_perf_last_ultimo_year2}
#| column: page
#| layout-ncol: 1
#| fig-width: 14
#| fig-height: 7

all_mkts_barchart(start_date = next_to_last_ultimo_year, end_date = last_ultimo_year)
```

### `r year(last_ultimo_year - years(1))`

```{r indices_perf_last_ultimo_year_minus_1_2}
#| column: page
#| layout-ncol: 1
#| fig-width: 14
#| fig-height: 7

all_mkts_barchart(start_date = next_to_last_ultimo_year - years(1), end_date = last_ultimo_year - years(1))
```

### `r year(last_ultimo_year - years(2))`

```{r indices_perf_last_ultimo_year_minus_1_2_3}
#| column: page
#| layout-ncol: 1
#| fig-width: 14
#| fig-height: 7

all_mkts_barchart(start_date = next_to_last_ultimo_year - years(2), end_date = last_ultimo_year - years(2))
```


### vanaf start VD50

```{r indices_perf_start_vd_chart2}
#| column: page
#| layout-ncol: 1
#| fig-width: 14
#| fig-height: 7

all_mkts_barchart(start_date = as.Date(start_date_vd), end_date = snapshot_date)
```

### vanaf start VP

```{r indices_perf_start_vp_chart2}
#| column: page
#| layout-ncol: 1
#| fig-width: 14
#| fig-height: 7

all_mkts_barchart(start_date = as.Date(start_date_vp_vf), end_date = snapshot_date)
```

### vanaf `r format(as.Date(start_date_sector_indices), "%b-%Y")`

```{r indices_perf_start_attr_chart2}
#| column: page
#| layout-ncol: 1
#| fig-width: 14
#| fig-height: 7

all_mkts_barchart(start_date = as.Date(start_date_sector_indices), end_date = snapshot_date)
```

:::

## Lijngrafieken

```{r indices_perf_line_functies}
# Define date sequences (assuming start_date_sector_indices is defined)
dates <- all_prices_local_long %>% 
  filter(date >= start_date_sector_indices) |> 
  ungroup() %>% select(date) %>% arrange(date) |> unique()

twee_jaar_datums <- start_date_sector_indices %m+% months(seq(0, length(dates$date), 24))
jaar_datums <- start_date_sector_indices %m+% months(seq(0, length(dates$date), 12))
kwartaal_datums <- start_date_sector_indices %m+% months(seq(0, length(dates$date), 3))
maand_datums <- start_date_sector_indices %m+% months(seq(0, length(dates$date), 1))
#

indices_plot <- function(data, start_date = start_date_sector_indices, end_date = snapshot_date, title = title, subtitle = subtitle, caption = caption) {

  available_tickers <- data |> 
    filter(date == start_date) |> 
    pull(ticker)
  
  data <- data |>
    group_by(ticker) |>
    filter(date >= start_date, date <= end_date, ticker %in% available_tickers) |>
    mutate(price_delta = ifelse(date == start_date, 0, price_index / lag(price_index) - 1),
           price_index = 100 * cumprod(1 + price_delta),
           date = as.Date(date)) |>
    select(-price_delta) |>
    arrange(ticker, date)
  
  label_data <- data |> filter(date == end_date)
  
  if(start_date == as.Date(last_ultimo_year)) {nudge_x_value <- 10} else if(start_date == as.Date(start_date_attr)) {nudge_x_value <- 400} else {nudge_x_value <- 100}
  
  ggplot(data = data,
         aes(x = date, y = price_index, group = ticker, col = fill, alpha = alpha)) +
    geom_line(linewidth = 1.2) +
    scale_color_identity() +
    geom_label_repel(data = label_data,
                     aes(label = label, fill = fill, alpha = alpha),
                     col = "black", 
                     nudge_x = nudge_x_value, 
                     max.overlaps = 30) +
    scale_fill_identity() +
    scale_alpha_identity() +
    scale_x_date(limits = c(start_date, end_date + max(as.integer((end_date - start_date) * .3)), 100),
                 breaks = c(datum_breaks(start_date, end_date), last_ultimo_year),
                 date_labels = datum_labels(start_date, end_date)) +
    scale_y_continuous(breaks = seq(0, 1000, 100), minor_breaks = seq(0, 1000, 50)) +
    theme_bw() +
    labs(x = "", y = "") +
    ggtitle(label = str_c(title,
                          " van ",
                          day(start_date), "-", month(start_date, label = TRUE), "-", year(start_date),
                          " t/m ",
                          day(end_date), "-", month(end_date, label = TRUE), "-", year(end_date)),
            subtitle) +
    labs(caption = caption) +
    theme(legend.position = "none",
          axis.text = element_text(size = 12),
          plot.title = element_text(size = 12, hjust = 0.5))
}

pfs_linechart <- function(start_date = start_date_sector_indices, end_date = snapshot_date) {
  indices_plot(data = pfs_chart_data, start_date, end_date, 
               title = "Modelportefeuilles ", 
               subtitle = NULL, caption = NULL)
}
pfs_bms_linechart <- function(start_date = start_date_sector_indices, end_date = snapshot_date) {
  indices_plot(data = pfs_bms_chart_data, start_date, end_date, 
               title = "Modelportefeuilles en benchmarks ", 
               subtitle = NULL, caption = NULL)
}
sectors_linechart <- function(start_date = start_date_sector_indices, end_date = snapshot_date) {
  indices_plot(data = sector_chart_data_incl, start_date, end_date, 
               title = "MSCI sector indices in EUR, incl div. ", 
               subtitle = NULL, caption = NULL)
}
styles_linechart <- function(start_date = start_date_sector_indices, end_date = snapshot_date) {
  indices_plot(data = styles_chart_data_incl |> 
                 bind_rows(benega_msdewin_chart_data |> 
                 filter(ticker == "MSDEWIN")), start_date, end_date, 
               title = "MSCI stijlindices, incl div., in EUR, ", 
               subtitle = NULL, caption = NULL)
}
landen_linechart <- function(start_date = start_date_sector_indices, end_date = snapshot_date) {
  indices_plot(data = landen_chart_data, start_date, end_date, 
               title = "MSCI landen in EUR, incl div., ", 
               subtitle = NULL, caption = NULL)
}
other_currency_linechart <- function(start_date = start_date_sector_indices, end_date = snapshot_date) {
  indices_plot(data = other_currency_chart_data, start_date, end_date, 
               title = "Other en enkele valuta's, in EUR, ", 
               subtitle = NULL, caption = NULL)
}

all_indices_linechart <- function(start_date = start_date_sector_indices, end_date = snapshot_date) {
  grid.arrange(
    pfs_linechart(start_date = start_date, end_date = end_date),
    pfs_bms_linechart(start_date = start_date, end_date = end_date),
    sectors_linechart(start_date = start_date, end_date = end_date),
    styles_linechart(start_date = start_date, end_date = end_date),
    landen_linechart(start_date = start_date, end_date = end_date),
    other_currency_linechart(start_date = start_date, end_date = end_date),
  nrow = 3)
}

```

::: panel-tabset

### vanaf `r format(as.Date(start_date_sector_indices), "%b-%Y")`

```{r indices_perf_line_start_attr_chart2}
#| column: page
#| layout-ncol: 1
#| fig-width: 14
#| fig-height: 10

all_indices_linechart(start_date = start_date_sector_indices, end_date = snapshot_date)
```

### vanaf start VP

```{r indices_perf_line_start_vp_chart2}
#| column: page
#| layout-ncol: 1
#| fig-width: 14
#| fig-height: 10

all_indices_linechart(start_date = as.Date(start_date_vp_vf), end_date = snapshot_date)
```

### vanaf start VD50

```{r indices_perf_line_start_vd_chart2}
#| column: page
#| layout-ncol: 1
#| fig-width: 14
#| fig-height: 10

all_indices_linechart(start_date = as.Date(start_date_vd), end_date = snapshot_date)
```

:::

## Info en Sectorgewichten

::: panel-tabset

### Info

```{r gebruikte_tickers2}

landen_chart_data |> 
  bind_rows(other_currency_chart_data) |> 
  bind_rows(styles_chart_data_incl) |> 
  filter(date == max(date)) |>
  select(label, name, ticker, datum = date) |>
  unique() |> 
  rename(bloomberg_ticker = ticker) |>
  ungroup() |> 
  gt() |> 
  tab_header("Gebruikte tickers") |> 
  gt_cols_align() |> 
  gt_font_padding_align()

```

### Sectorgewichten

```{r sector_wts_msci_area_chart}
#| layout-ncol: 1
#| fig-width: 7
#| fig-height: 4
#| fig-align: center

label_data <-
  IWDA_sector_weights_hist %>%
  filter(date == IWDA_sector_weights_hist$date[as.integer(length(IWDA_sector_weights_hist$date)/2)]) %>% #de datum in het midden
  mutate(cumsum_wt = cumsum(weight),
         x = weight/2,
         pos = ifelse(sector == "Energy", x, lag(cumsum_wt) + x),
         pos = 1 - pos)

  ggplot(data = IWDA_sector_weights_hist, aes(x = date, y = weight))+
  geom_area(aes(fill = sector), col = "darkgray", alpha = 0.4, position = "stack",stat = "identity") +
  geom_label(data = label_data, aes(x = date, y = pos, label = sector, fill = sector), alpha = 0.6, color = "black", size = 3) + 
  scale_y_continuous(labels = scales::percent_format(accuracy = 1, limits = c(0, 1))) +
  scale_x_date(breaks = datum_breaks(start_date = start_date_sector_indices, end_date = lastdate), date_labels = "%b-%y") +
  theme_minimal() +
  labs(x = "", y = "") +
  ggtitle("MSCI World sectorgewichten") +
  theme(legend.position = "none")
```
### Sectoren risk/return

```{r sectors_riskreturn}
df <- 
  all_trr_eur_long |> 
  filter(str_detect(ticker, "MXWO0") | ticker %in% c("M1WOSC", "MSDEWIN")) |> 
  filter(!is.na(trr), date <= lastdate) |> 
  group_by(ticker) 

df |> 
  summarise(risk = sqrt(12) * sd(trr), return = prod(1 + trr)^(12 / n()) - 1) |> 
  left_join(sector_levels_RD_ticker_name, by = "ticker") |> 
  mutate(sector_abbrev = abbreviate(sector)) |>  
  left_join(sectors_colors, by = c("sector" = "ticker")) |> 
  rename(colour = fill) |>
  mutate(
    sector = ifelse(ticker == "M1WOSC", "M1WOSC", sector),
    sector_abbrev = ifelse(ticker == "M1WOSC", "SmCp", sector_abbrev),
    colour = ifelse(ticker == "M1WOSC", "darkgoldenrod", colour),
    sector = ifelse(ticker == "MSDEWIN", "MSDEWIN", sector),
    sector_abbrev = ifelse(ticker == "MSDEWIN", "MSDEWIN", sector_abbrev),
    colour = ifelse(ticker == "MSDEWIN", bmgray, colour)  # Set colour, not fill# Set colour, not fill
  ) |>
  ggplot(aes(x = risk, y = return, colour = colour)) +  # Use colour column
  geom_point(size = 5) +
  scale_colour_identity() +  # Use hex codes directly
  geom_label_repel(aes(label = sector_abbrev)) + 
  theme_minimal() + 
  theme(legend.position = "none") +
  scale_y_continuous(labels = percent_format(accuracy = 1), limits = c(NA, 0.3)) +
  scale_x_continuous(labels = percent_format(accuracy = 1), limits = c(0, 0.3)) + 
  ggtitle(str_c("MSCI sectors risk/return, van ", format(start_date_attr, "%d-%b-%y"), " tot ", format(lastdate, "%d-%b-%y")))
```
### Sector correlaties

```{r sectors_correlaties}

df |> left_join(sector_levels_RD_ticker_name, by = "ticker") |>  
  mutate(sector_abbrev = abbreviate(sector)) |> 
  mutate(sector_abbrev = ifelse(ticker == "M1WOSC", "SmCp", sector_abbrev), 
         sector_abbrev = ifelse(ticker == "MSDEWIN", "MSDEWIN", sector_abbrev)) |> 
  group_by(sector_abbrev) |> 
  select(date, sector_abbrev, trr) |> 
  mutate(sector_abbrev = factor(sector_abbrev, levels = c(abbreviate(sectors_colors$ticker), "SmCp", "MSDEWIN"))) |> 
  pivot_wider(names_from = sector_abbrev, values_from = trr) |> 
  select(-date)|>  
  cor() |> 
  ggcorrplot(type = "lower", insig = "blank", lab = TRUE, digits = 1) +
  ggtitle(str_c("MSCI sectors en small caps correlaties, \nvan ", format(start_date_attr, "%d-%b-%y"), " tot ", format(lastdate, "%d-%b-%y"))) +
  theme(legend.position = "none")

```

:::

```{r save_img}
#alleen op macbook RiRe.RData opslaan voor Beleggingsvoorstel (trackrecord)
if(str_detect(getwd(), "pieter")) {
  save.image(file = "RiRe.Rdata")
  save.image(file = "/Users/pieter/Library/CloudStorage/OneDrive-Personal/R Projects/Dashboard/RiRe.RData")
}
```

```{r leeg}
#lege chunk
```

# Toelichting

## Waardering
  - Als basis voor de waarde van alle individuele regels in de modelportefeuilles dienen bestanden uit AIRS.
  - Voor intra-maand updates en voor aanvullende historie t.b.v. risicoberekeningen worden koersen uit Bloomberg gebruikt.
  - De enige verschillen die kunnen overblijven zijn in de cash standen. De reden hiervoor is dat de cash standen in AIRS na het moment waarop de VOLK bestanden zijn gedraaid, aan het begin van de maand, nog kunnen veranderen. Daarom worden een aantal dagen na de maandeinde nieuwe VOLK bestanden gemaakt.
  - De performance cijfers sluiten dus aan bij de cijfers uit AIRS. Behalve mogelijk voor de mtd cijfers.

## Input

-   Maandelijkse inputs
    -   van administratie
        -   Modelportefeuilles per maandeinde - AIRS (VOLK bestanden)
        -   Dagelijkse benchmark JPM - AIRS
    -   met de hand updaten in sheet_holdings.xlsx:
        -   Landen- en sectorverdeling ETF's (van ETF's die niet via Bloomberg BQL te benaderen zijn, m.n. NTSCLBE)
        -   Benchmark bonds - nieuwe regels toevoegen (DSTA.nl)
        -   Statische gegevens van portefeuilleholdings (sector, land, valuta, Bloomberg ticker, etc)
    -   uit VM
        -   Dividend yields sectoren US en EU
    -   inlezen in R uit Bloomberg:
        -   MSCI sectoren
        -   Landen- en sectorverdeling ETF's (van ETF's die via Bloomberg BQL te benaderen zijn)
        -   ECB wisselkoersen (zelfde bron als AIRS) en rentes
        -   spreads van Credit ETFs
        -   looptijd en duration historie van BENEGA index
        -   duration historie van obligaties
        -   partial durations van obligaties
        -   dagelijkse benchmark MSDEWIN
        -   dividendhistorie portefeuille holdings
-   Dagelijkse input voor intramaand updates
    -   inlezen in R uit Bloomberg
        -   koersen van portefeuille holdings
        -   MSCI sectoren
        -   ECB wisselkoersen en rentes
        -   duration van obligaties
        -   partiële durations van obligaties per looptijdsegment
        -   spreads van Credit ETFs
        -   looptijd en duration van BENEGA index
        -   Dividendhistorie portefeuille holdings
        -   Dagelijkse benchmarks BENEGA (benadering voor JPM) en MSDEWIN

## Output

-   Portefeuilleverdeling
    -   RDRM/Asset Categorieën/Landen/Valuta/Sectoren
    -   Obligaties: Key Rate Durations o/u weights

-   Risk
    -   12- en 24-maands voortschrijdende (gerealiseerde) standaarddeviaties van modelportefeuilles en hun benchmarks
    -   Ex-post tracking error: de gerealiseerde 12- en 24-maands standaarddeviaties van de maandelijkse rendementsverschillen van de portefeuilles vs de benchmarks. De benchmarks zijn historisch op dagbasis gerebalanced.
    -   Ex-ante tracking error: Met de laatste 5 jaar maandelijkse return historie en de huidige portefeuillegewichten wordt de verwachte standaarddeviatie van de portefeuille berekend uit de portefeuillegewichten en een variantie-covariantie matrix. De tracking errors worden berekend met de portefeuille over- en ondergewichten t.o.v. de benchmark en de variantie-covariantie matrix.
    -   Partiële bijdrage aan tracking error van posities
    -   Historische return/standaarddeviatie op jaarbasis en informatieratio's

-   Portefeuille returns vs benchmark sinds beschikbaarheid

-   Performance Attributie
    -   De gehanteerde methode is ontleend aan "Practical Portfolio Performance Measurement and Attribution", Second Edition, Carl R. Bacon, 2008, Appendix A, pp. 261-263. Deze methode is in principe bedoeld voor "single currency" portefeuilles, maar is toch gebruikt voor de haalbaarheid en de relatieve eenvoud. Aandelen in dollars zijn dus het aandeel en de dollar samen.
    -   De methode onderscheidt alleen allocatie- en selectie-effecten (geen zgn. interactie-effecten) en is toegepast voor berekening van de allocatie- en selectie-effecten RD/RM en sectoren RD.
    -   Bij transacties tussen RD en RM (bij verkoop of koop van RD aandelen of ETF's) of tussen RD sectoren (om verschillen in dividenden te verrekenen) wordt de "simple Dietz" methode gebruikt, dwz tegen de gemiddelde waarde op het midden van de maand.
    -   RDRM Allocatie en Selectie
        -   Voor de RD holdings worden de dividenden meegenomen, met een veronderstelde dividendbelasting van 0%.
        -   Voor de VP100 zijn de selectie-effecten RD en RM samengevoegd. De returns voor RM zijn voor deze portefeuille grijs gemaakt. Deze cijfers zijn erg gevoelig vanwege het lage percentage RM, nietszeggend en niet correct.
        -   In de attributietabellen tellen de deeleffecten op tot het totale (allocatie- of selectie) effect. De beide totale effecten op de onderste regel vermenigvuldigen tot de excess return.
    -   Sectorallocatie en Aandelen Selectie voor de VP's.
        -   Alleen voor de individuele aandelen portefeuilles. Voor de overige portefeuilles is eigenlijk alleen sprake van (vooral) sector en regio-allocatie, wat tot uitdrukking komt in het RD selectie-effect in de RDRM attributie. Een diepere attributie is in deze portefeuilles niet mogelijk of zinvol omdat er geen detailinzicht is in de samenstelling.
        -   Voor deze attributie is inzicht nodig in de historische sectorsamenstelling van zowel portefeuille als benchmark.
        -   Voor de portefeuille is dit eenvoudig voor zover het de individuele aandelen betreft. Voor de ETF's in portefeuille en voor de benchmark wordt de huidige (laatste) samenstelling als uitgangspunt genomen en worden historische gewichten verkregen door terugrekenen met met-dividend sectorindices (zie hieronder). De vereenvoudigende veronderstelling is dus dat alle ETF's eenzelfde sectorperformance hebben. De huidige samenstelling is dus goed, maar terug in de tijd ontstaan foutjes.
        -   Voor sectoren waar geen individuele aandelen exposure in is, wordt het portefeuillegewicht verkregen uit het gewicht in de ETF's en wordt de portefeuille return gelijk verondersteld met de benchmark sector return.
        -   Met-dividend sectorindices worden berekend door de sectorindices van de MXWO (MSCI-wereld zonder dividenden, MXWO0EN etc., vertaald naar euro's) op te hogen met dividend yields. Deze laatste komen uit de gegevens voor het Vliegermodel. Hierna worden deze returns nog zo aangepast dat ze per periode gewogen uitkomen op de overall benchmark (MSDEWIN). Soms zijn de rendementen met-dividend kleiner dan die zonder. Dat is vreemd, maar het geldt ook voor de MSDEWIN, waarvan het rendement soms lager is dan de MXWO.
        -   Het portefeuille-rendement wordt per sector berekend net als bij RDRM met "simple Dietz", waarbij dividenden worden meegenomen. De resultaten worden daarna, omdat het benaderingen zijn, weer zo aangepast dat ze per periode gewogen uitkomen op de portefeuille return RD.
        -   In de attributietabellen tellen de deeleffecten per sector, mede door deze aanpassingen, op tot het totale (allocatie of selectie) effect. De beide totale effecten op de onderste regel vermenigvuldigen tot de excess return.
    -   Attributie selectie-effect RM
        -   Met behulp van curves in het verleden en de obligatiekarakteristieken worden historische durations berekend van individuele obligaties. Credit ETF's EUNR, EUNS en SUA0 en cash worden verondersteld op resp, 5, 3, 4,4 resp. 0. Zo worden portefeuille-durations verkregen. Daarnaast zijn er historische durations van de BENEGA index, als benadering voor die van de JPM index, beschikbaar in Bloomberg.
        -   Het duration-effect wordt berekend als: -(portefeuille-duration - benchmark-duration) \* (verandering benchmark-yield) (bron: "A Performance Attribution Methodology for Fixed Income Portfolios", Antonio Francisco A. Silva Jr. e.a., 2010). Voor totaal portefeuilleniveau wordt dat nog vermenigvuldigd met benchmark-gewicht RM. Dit duration effect wordt afgetrokken van het totale selectie-effect RM.
        -   Het effect van het hebben van credits wordt berekend in twee stappen: de carry (spread maal het gewicht in de portefeuille) en een koerseffect (verandering van de spread ten opzichte van de benchmark maal de duration).
        -   De rest (het totale RM selectie-effect minus het duration effect minus het credits effect), is het curve-effect en het effect van individuele obligaties.
    -   Een Attributie naar posities zoals Allocatie RD/RM, Selectie-effect RM, Regio's RD en de diverse posities in sector of thema-ETF's, voor de portefeuilles RD70, RD50 en RD30R70. Die zijn als volgt berekend:
        -   Regio: (gewicht(SPY5_GY + IJR_US + VIG_US + SPPY_GY) \* return(SPY5_GY) + gewicht(SXXPIEX_GY + LEAD_GY) \* return(SXXPIEX_GY)) - gewicht(SPY5_GY + IJR_US + VIG_US + SPPY_GY + SXXPIEX_GY + LEAD_GY) \* return(MSDEWIN)
        -   WTCH_NA, VFEM_NA en XDWH_GY vs MSDEWIN
        -   VIG_US vs SPY5_GY
        -   Small_Caps: IJR_US vs SPY5_GY en NTSCLBE_NA vs MSDEWIN
        -   Duration: selectie-effect risicomijdend
        -   Unexplained: Totaal min alle verklaarde effecten
    -   Een overzicht van de in de attributies gebruikte dividend- en transactiegegevens:
        -   Grafieken met cumulatieve dividenden per jaar als % van het risicodragende deel van de portefeuilles
        -   Een tabel met dividenden per aandeel, in lokale valuta en in euro's, en totalen in euro's per portefeuille
        -   Een tabel met transacties in RD per aandeel per portefeuille. De bedragen worden meegenomen als storting of onttrekking in of uit RD bij de attributies
        -   Grafieken met het verloop in de tijd van de gewichten van aandelen en ETF's in het risicodragende gedeelte van de modelportefeuilles

### Gebruiksaanwijzing en verdere details

-   Bestandslocaties
    -   Er is een hoofdmap genaamd Performance en een sub-map, genaamd portfolio_downloads. De maandelijkse portefeuillebestanden uit AIRS staan in de portfolio_downloads submap. De R bestanden en de output html komen in de hoofdmap.
-   Portefeuillesamenstelling
    -   Elke maandultimo zijn nieuwe bestanden nodig van de VP100, de VP50, DZ50, RD70, RD50 en de RD30 en de duurzame portefeuilles DZ50 (ETF's) en VD50 (Individuele aandelen). Deze worden aangeleverd door de administratie (Jeroen) en komen uit AIRS. Ze moeten achtereenvolgens de volgende naam hebben: VOLK_Vlieger 100RD yyyymmdd.xlsx, VOLK_70RD-30RM yyyymmdd.xlsx, VOLK_Vlieger 50RD-50RM yyyymmdd, VOLK_50RD-50RM yyyymmdd.xlsx, VOLK_30RD-70RM yyyymmdd.xlsx, VOLK_Vlieger_Duurzaam-50RD-50RM yyyymmdd.xlsx en VOLK_Duurzaam-50RD-50RM yyyymmdd.xlsx. De bestanden moeten in de submap portfolio_downloads worden geplaatst.
-   Holdings en benchmark informatie
    -   In het excel-bestand sheet_holdings.xlsx wordt informatie bijgehouden over
        -   Holdings. Van alle holdings die in de portefeuilles, of in de benchmark in het geval van obligaties, aanwezig zijn of zijn geweest wordt een aantal kenmerken vastgelegd. Deze staan op het tabblad all_holdings. Dit zijn zaken als ticker, land, valuta etc. Als er nieuwe holdings bijkomen dan worden deze hierbij gevoegd. De naam van het fonds moet precies overeenkomen met de naam in AIRS. Deze naam wordt namelijk, bij gebrek aan bv. een ISIN code, gebruikt als sleutel voor de koppeling tussen AIRS-gegevens en die uit Bloomberg. Als de naam in AIRS wijzigt (wat een paar keer is voorgekomen, meest recent die van de Amundi Leaders etc. ETF, v/h Lyxor etc.) dan moet de naam in de tabel op de tab all_holdings ook worden aangepast. Ook in de code van het R bestand (zoek op NAAMSWIJZIGINGEN) moet de naam dan met terugwerkende kracht worden aangepast in de portefeuilles. De oorspronkelijke VOLK-bestanden worden niet aangepast.                 
        -   Benchmarkobligaties - op de site van de agent (www.dsta.nl) is, onder "actueel", zichtbaar of er emissies van nieuwe obligaties zijn geweest.
        -   In het sheet credit_pds staat informatie over de credit etf. Het betreft de duration en de verdeling over de curve punten daarvan.
        -   In het sheet etf_update_dates_bronnen staan de data van de update van de ETF info en de adressen van de websites waar deze (landen- en sector-) info te vinden is. Deze info moet worden geupdate.
        -   Landen- en sectorgewichten van de ETF's. Op de tabbladen country_weights_calc en sector_weights_calc worden van alle ETF's de landen- en sectorgewichten bijgehouden. Dit is nodig voor het landen, valuta en sectoroverzicht. Dit gebeurt semi-handmatig door de desbetreffende sites te bezoeken. Het is meestal copy-paste achtig werk, komma's vervangen door punten en op een paar plekken overtypen. Zie deze tabbladen voor meer info. Op het volgende tabblad, country_weights en sector_weights, staan de gegevens in een nette tabel klaar zodat ze in R kunnen worden ingelezen. Soms tellen de gewichten niet precies op tot 100%, dit wordt in het spreadsheet gecorrigeerd.
    -   Elke maand is een update nodig van de eindemaandkoersen sinds eind 2014. Deze worden uit Bloomberg in R gelezen en opgeslagen in een bestand. Het betreft maandelijkse koersen van aandelen, obligaties, ETF's, valuta's en benchmarks die relevant zijn of zijn geweest voor de modelportefeuilles.
    -   Wekelijks of wanneer een update gewenst is worden dagelijkse koersen sinds de laatste maandultimo ingelezen. Dit gaat net zoals de maandkoersen binnen R.
    -   De samengestelde benchmarks van de 3070, 5050 en 7030 portefeuilles worden op dagbasis gerebalanced. Om de returns van deze samengestelde indices te berekenen is dus informatie op dagbasis nodig van de MSDEWIN en de JPM indices. MSDEWIN is beschikbaar in Bloomberg en de dagelijkse info wordt daar ingelezen. JPM informatie wordt aangeleverd door adminstratie in een .xls bestand uit AIRS. Deze info betreft de laatste maand en moet onder de bestaande reeks worden geplakt in het bestand sheet_JPM_daily_from_dec_2013.xlsx. Dit vergt enige spreadsheet vaardigheid (zelf een goede datum kolom maken, waarden overnemen nadat spaties zijn verwijderd, goed sorteren en dan waarden plakken onder de tabel in het bestaande bestand sheet_JPM_daily_from_dec_2013.xlsx). In R worden beide dagelijkse reeksen samengevoegd zodat de samengestelde benchmarks kunnen worden berekend.
    -   In november 2023 is MSCI gestopt met het onderhouden van de Real Estate index (MXWO0RE). De performance van sectoren in de benchmark is een input voor de sectorattributie. De performance van sectoren in de portefeuille wordt daarmee vergeleken om, samen met de gewichten in de benchmark, de bijdrage van sectorallocatie en -selectie te berekenen. Als oplossing hiervoor wordt de performance van Real Estate afgeleid uit de performance van de MSCI World (MXWO), de gewichten daarin van de sectoren, zoals handmatig overgenomen uit de IWDA ETF info, en de performance van de andere sectoren. Dit is mogelijk zolang er slechts een sector niet beschikbaar is. Als er meerdere sectoren niet langer beschikbaar zijn dan is een oplossing misschien om een sector "Other" in te voeren.
    -   De koersen in AIRS worden soms achteraf bijgesteld. Vooral in het geval van de Small Cap ETF maar soms ook in de WTCH, de XDWH, SPY5 en de STOXX ETF's. In februari 2025 zijn veel VOLK bestanden opnieuw gedraaid en is het aantal dubbele koersen beperkt tot een maal WTCH, een maal XDWH en meestal het NTSCLBE_NA small caps fonds. De WTCH en XDWH zijn met de hand overschreven (ging om een halve cent). Voor de small caps ETF worden de bloomberg koersen over de koersen uit AIRS geschreven. Deze koersen komen precies overeen met de definitieve koersen in AIRS. De aansluiting met de AIRS performance cijfers is daarmee compleet.
    -   Bloomberg koersen zijn nodig voor risico-, duration- en becnhmark gegevens, voor intra-maand updates van de modelportefeuilles en voor overige marktgegevens.
